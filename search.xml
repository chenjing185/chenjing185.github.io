<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>响应式网页设计-应用视觉设计</title>
      <link href="/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>视觉设计结合了排版、色彩理论、图形、动画、页面布局等，以表达独特的信息。</p><span id="more"></span><h2 id="使用-text-align-属性创建视觉平衡"><a href="#使用-text-align-属性创建视觉平衡" class="headerlink" title="使用 text-align 属性创建视觉平衡"></a>使用 text-align 属性创建视觉平衡</h2><p>这部分课程的主题是应用视觉设计。 开始的挑战基于美化一个卡片组件的外观，借此展示了若干核心原则。<br>web 内容大部分都是文本。 CSS 里面的 text-align 属性可以控制文本的对齐方式。</p><ol><li>text-align: justify; 将文本隔开，使每行的宽度相等。</li><li>text-align: center; 可以让文本居中对齐。</li><li>text-align: right; 可以让文本右对齐。</li><li>text-align: left; 是默认值，它可以让文本左对齐。<h2 id="使用-width-属性调整元素的宽度"><a href="#使用-width-属性调整元素的宽度" class="headerlink" title="使用 width 属性调整元素的宽度"></a>使用 width 属性调整元素的宽度</h2>你可以使用 CSS 里的 width 属性来指定元素的宽度。 属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。 下面这段代码可以把图片的宽度设置为 220px：<pre class="language-none"><code class="language-none">img &#123;  width: 220px;&#125;</code></pre><h2 id="使用-height-属性调整元素的宽度"><a href="#使用-height-属性调整元素的宽度" class="headerlink" title="使用 height 属性调整元素的宽度"></a>使用 height 属性调整元素的宽度</h2>和 width 属性类似，你可以使用 CSS 里面的 height 属性来指定元素的高度。 下面这段代码可以把图片的高度设置为 20px：<pre class="language-none"><code class="language-none">img &#123;  height: 20px;&#125;</code></pre><h2 id="使用-strong-标签加粗文本"><a href="#使用-strong-标签加粗文本" class="headerlink" title="使用 strong 标签加粗文本"></a>使用 strong 标签加粗文本</h2>你可以使用 strong 标签来加粗文字。 粗体文字一般用来吸引读者注意或用来表示强调。 添加了 strong 标签后，浏览器会自动给元素添加这段样式：font-weight:bold;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Stanford University<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-u-标签给文本添加下划线"><a href="#使用-u-标签给文本添加下划线" class="headerlink" title="使用 u 标签给文本添加下划线"></a>使用 u 标签给文本添加下划线</h2>你可以使用 u 标签来给文字添加下划线。 下划线通常用来表示重要内容或需要记忆的内容。 添加了 u 标签后，浏览器会自动给元素添加这段样式：text-decoration: underline;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>Ph.D.students<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-em-标签强调文本"><a href="#使用-em-标签强调文本" class="headerlink" title="使用 em 标签强调文本"></a>使用 em 标签强调文本</h2>你可以使用 em 标签来强调文本。 由于浏览器会自动给元素应用 font-style: italic; 所以文本会显示为斜体。<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Google was founded by Larry Page and Sergey Brin while they were <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>Ph.D. students<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> at <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Stanford University<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-s-标签给文本添加删除线"><a href="#使用-s-标签给文本添加删除线" class="headerlink" title="使用 s 标签给文本添加删除线"></a>使用 s 标签给文本添加删除线</h2>你可以用 s 标签来给文字添加删除线。 删除线是位于文字水平中央的一条线，它代表着一段文字不再有效。 添加了 s 标签后，浏览器会自动给元素添加这段样式：text-decoration: line-through;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-hr-标签创建水平线"><a href="#使用-hr-标签创建水平线" class="headerlink" title="使用 hr 标签创建水平线"></a>使用 hr 标签创建水平线</h2>你可以用 hr 标签来创建一条宽度撑满父元素的水平线。 这种水平分割线一般用来表示内容主题的改变，或在视觉上将文档分隔成几个部分。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： HTML 中的 hr 是自闭合标签，所以我们不需要为它添加结束标签。</p></blockquote><h2 id="调整文本的背景色"><a href="#调整文本的背景色" class="headerlink" title="调整文本的背景色"></a>调整文本的背景色</h2><p>为了让页面更美观，除了设置整个页面的背景色以及文字颜色外，你还可以单独设置文字的背景色，即在文字的父元素上添加 background-color 属性。 在本挑战里我们将使用 <code>rgba()</code> 颜色，而不是之前学到的 hex 编码或者 <code>rgb()</code> 颜色。</p><pre class="language-none"><code class="language-none">rgba 代表：  r &#x3D; red 红色  g &#x3D; green 绿色  b &#x3D; blue 蓝色  a &#x3D; alpha 透明度</code></pre><p>RGB 值可以取在 0 到 255 之间。 alpha 值可取在 0 到 1 之间，其中 0 代表完全透明，1 代表完全不透明。 <code>rgba()</code> 在需要设置颜色透明度时十分有用， 这意味着你可以做出一些很漂亮的半透明效果。<br>例如: <code>background-color: rgba(45, 45, 45, 0.1)</code>。 它表示背景是黑灰色，因为设置了透明度为 0.1，所以几乎是透明的。</p><h2 id="调整标题元素与段落元素的大小"><a href="#调整标题元素与段落元素的大小" class="headerlink" title="调整标题元素与段落元素的大小"></a>调整标题元素与段落元素的大小</h2><p>标题元素（h1 到 h6）的字体大小通常应大于段落标签的字体大小。 这使用户更容易直观地了解页面上所有内容的布局和重要性级别。 你可以使用 font-size 属性来调整元素中文本的大小。例如:</p><pre class="language-none"><code class="language-none">h4 &#123;    text-align: center;    background-color: rgba(45, 45, 45, 0.1);    padding: 10px;    font-size: 27px;  &#125;</code></pre><h2 id="给卡片元素添加-box-shadow"><a href="#给卡片元素添加-box-shadow" class="headerlink" title="给卡片元素添加 box-shadow"></a>给卡片元素添加 box-shadow</h2><p>box-shadow 属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。<br>box-shadow 属性按顺序采用以下值：</p></li></ol><ul><li>offset-x （阴影的水平偏移量）</li><li>offset-y （阴影的垂直偏移量）</li><li>blur-radius</li><li>spread-radius</li><li>color<br>其中 blur-radius 和 spread-radius 是可选的。</li></ul><p>可以通过逗号分隔每个 box-shadow 元素的属性来添加多个 box-shadow。</p><p>如下为添加了模糊效果的例子，它使用了透明度较高的黑色作为阴影：</p><pre class="language-none"><code class="language-none">box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</code></pre><h2 id="降低元素的透明度"><a href="#降低元素的透明度" class="headerlink" title="降低元素的透明度"></a>降低元素的透明度</h2><p>CSS 里的 opacity 属性用来设置元素的透明度。</p><ul><li>属性值为 1 代表完全不透明。</li><li>属性值为 0.5 代表半透明。</li><li>属性值为 0 代表完全透明。<br>透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。<h2 id="使用-text-transform-属性给文本添加大写效果"><a href="#使用-text-transform-属性给文本添加大写效果" class="headerlink" title="使用 text-transform 属性给文本添加大写效果"></a>使用 text-transform 属性给文本添加大写效果</h2>CSS 里的 text-transform 属性可以改变英文字母的大小写。 使用这个属性时，我们无需改变 HTML 元素中的文本也可以统一页面里英文的显示。<br>下面的表格展示了 text-transform 的不同值对文字 “Transform me” 的影响：<table><thead><tr><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">lowercase</td><td align="center">“transform me”</td></tr><tr><td align="center">uppercase</td><td align="center">“TRANSFORM ME”</td></tr><tr><td align="center">capitalize</td><td align="center">“Transform Me”</td></tr><tr><td align="center">initial</td><td align="center">使用默认值</td></tr><tr><td align="center">inherit</td><td align="center">使用父元素的 text-transform 值。</td></tr><tr><td align="center">none</td><td align="center">Default:不改变文字。</td></tr></tbody></table><h2 id="设置段落的-line-height"><a href="#设置段落的-line-height" class="headerlink" title="设置段落的 line-height"></a>设置段落的 line-height</h2>CSS 提供 line-height 属性来设置行间的距离。 行高，顾名思义，可以用来设置每行文字所占据的垂直空间。<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="调整锚点的悬停状态"><a href="#调整锚点的悬停状态" class="headerlink" title="调整锚点的悬停状态"></a>调整锚点的悬停状态</h2>本挑战将要涉及到伪类。 伪类是可以添加到选择器上的关键字，用来选择特定状态的元素。<br>比如，可以使用 :hover 伪类选择器来选取超链接的悬停状态。 下面的代码可以在鼠标悬停在超链接上时将其 color 变成红色：<pre class="language-none"><code class="language-none">a:hover &#123;  color: red;&#125;</code></pre><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="更改元素的相对位置"><a href="#更改元素的相对位置" class="headerlink" title="更改元素的相对位置"></a>更改元素的相对位置</h3>在 CSS 里一切 HTML 元素皆为盒子，也就是通常所说的盒模型。 块级元素自动从新的一行开始（比如标题、段落以及 div），行内元素排列在上一个元素后（比如图片以及 span）。 元素默认按照这种方式布局称为文档的普通流，同时 CSS 提供了 position 属性来覆盖它。<br>当元素的定位设置为 relative 时，它允许你通过 CSS 指定该元素在当前文档流页面下的相对偏移量。 CSS 里控制各个方向偏移量的属性是 left、right、top 和 bottom。 它们代表从原来位置向远离该方向偏移指定的像素、百分比或者 em。 下面的例子展示了段落向上偏移 10px：<pre class="language-none"><code class="language-none">p &#123;  position: relative;  bottom: 10px;&#125;</code></pre>把元素的位置设置成相对，并不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响。<br>注意： 定位可以使页面布局更灵活、高效。 不管元素的定位是怎样的，HTML 标记在从上到下阅读起来时应该是整洁的、有意义的。 这样可以让视障人士（重度依赖辅助设备比如屏幕阅读软件的人们）也能够无障碍地浏览你的网页。<blockquote><p>CSS 里面的 top、bottom、left 和 right 定义了元素在相应方位的偏移距离。 元素将从当前位置向属性相反的方向偏移。</p></blockquote><h3 id="绝对定位的参照物是元素的父元素"><a href="#绝对定位的参照物是元素的父元素" class="headerlink" title="绝对定位的参照物是元素的父元素"></a>绝对定位的参照物是元素的父元素</h3><p>接下来要介绍 CSS position 属性的取值选项 absolute，它的含义是相对于其包含块定位。 和 relative 定位不一样，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它。 这样我们就可以用 CSS 的 top、bottom、left、right 属性来调整元素的位置。<br>绝对定位比较特殊的一点是元素的定位参照于最近的 positioned 祖先元素。 如果它的父元素没有添加定位规则（默认是 position: relative;），浏览器会继续寻找直到默认的 body 标签。</p><h3 id="固定定位的参照物是浏览器的窗口"><a href="#固定定位的参照物是浏览器的窗口" class="headerlink" title="固定定位的参照物是浏览器的窗口"></a>固定定位的参照物是浏览器的窗口</h3><p>fixed 定位，它是一种特殊的绝对（absolute）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 CSS 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。<br>但 fixed 和 absolute 的最明显的区别在于，前者定位的元素不会随着屏幕滚动而移动。</p><h2 id="使用-float-属性将元素左浮动或右浮动"><a href="#使用-float-属性将元素左浮动或右浮动" class="headerlink" title="使用 float 属性将元素左浮动或右浮动"></a>使用 float 属性将元素左浮动或右浮动</h2><p>定位机制并不是 position 属性的选项，而是通过元素的 float 属性来设置。 浮动元素不在文档流中，它向 left 或 right 浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 通常需要用 width 属性来指定浮动元素占据的水平空间。</p><h2 id="使用-z-index-属性更改重叠元素的位置"><a href="#使用-z-index-属性更改重叠元素的位置" class="headerlink" title="使用 z-index 属性更改重叠元素的位置"></a>使用 z-index 属性更改重叠元素的位置</h2><p>当一些元素在位置上重叠时（例如，使用 position: absolute | relative | fixed | sticky 时），在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。 你可以使用 z-index 属性指定元素的堆叠次序。 z-index 的取值是整数，数值大的元素会叠放到数值小的元素上面。</p><h2 id="使用-margin-属性将元素水平居中"><a href="#使用-margin-属性将元素水平居中" class="headerlink" title="使用 margin 属性将元素水平居中"></a>使用 margin 属性将元素水平居中</h2><p>在应用设计中经常需要把一个块级元素水平居中显示。 一种常见的实现方式是把块级元素的 margin 值设置为 auto。</p><blockquote><p>同样的，这个方法也对图片奏效。 图片默认是内联元素，但是可以通过设置其 display 属性为 block来把它变成块级元素。</p></blockquote><h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><h3 id="互补色"><a href="#互补色" class="headerlink" title="互补色"></a>互补色</h3><p>在网站设计里，颜色能让内容更醒目，能调动情绪，从而创造舒适的视觉体验。 不同的颜色组合对网站的视觉效果影响很大，精妙的设计都需要适宜的颜色来美化页面内容。<br>色环是我们认识颜色关系的好工具。它是一个近色相邻、异色相离的圆环。 当两个颜色恰好在色环的两端时，这两个颜色就互为补色。 两个互为补色的颜色会在混合后变成灰色。 然而，补色搭配能形成强烈的视觉对比效果。<br>下面是一些以 hex 形式表示的补色例子：</p></li></ul><ol><li>红色（#FF0000）和蓝绿色 (#00FFFF)</li><li>绿色（#00FF00）和品红色（#FF00FF）</li><li>蓝色（#0000FF）和黄色（#FFFF00）</li></ol><p>这与我们许多人在学校学的过时的 RYB 色彩模式不同，RYB 有不同的原色和补色。 现代色彩理论使用 RGB 模型（如在计算机屏幕上）和 CMY（K）模型（如在印刷中）。 在这里阅读了解更多有关这个复杂主题的信息。<br>现在，很多在线选色工具也为我们提供了寻找补色的功能。</p><blockquote><p>注意：颜色搭配是提起用户兴趣或吸引用户注意的重要方式之一。 但我们不应让颜色作为传达重要信息的唯一方式，因为视觉障碍用户可能无法像其他人一样看出其中的含义。</p></blockquote><h3 id="三次色"><a href="#三次色" class="headerlink" title="三次色"></a>三次色</h3><p>电脑显示器和各类屏幕都是基于颜色叠加的模型：将红（R）、绿（G）、蓝（B）三原色的色光以不同的比例相加，就可以产生各种色彩光。 这在现代色彩理论中叫作三原色光模式（RGB Color Model）。 红色（R）、绿色（G）和蓝色（B）叫作三原色。 如果把两种原色相加，就可以产生二次色：蓝绿（G+B）、品红（R+B）和黄色（R+G），这些二次色恰好是在合成它们时未使用的原色的补色，即在色环中位于两端。 例如，品红色是红色和蓝色相加产生，它是绿色的补色。</p><p>三次色是由原色和二次色相加产生的颜色， 例如，在 RGB 颜色模型中，红色（原色）和黄色（二次色）相加产生橙色（三次色）。 将这六种颜色中相邻的颜色相加，便产生了十二色色环。</p><p>设计里面有很多种颜色搭配方法。 涉及到三次色的一种配色方法是分裂补色搭配法。 选定主色之后，在色环上选择与它的补色相邻的两种颜色与之搭配。 此种搭配既有对比，又不失和谐。</p><p>下面是使用分裂补色搭配法创建的三个颜色：</p><table><thead><tr><th align="center">颜色</th><th align="center">HEX 颜色码</th></tr></thead><tbody><tr><td align="center">橙色</td><td align="center">#FF7F00</td></tr><tr><td align="center">蓝绿色</td><td align="center">#00FFFF</td></tr><tr><td align="center">树莓红</td><td align="center">#FF007F</td></tr></tbody></table><h2 id="调整颜色的色相"><a href="#调整颜色的色相" class="headerlink" title="调整颜色的色相"></a>调整颜色的色相</h2><p>颜色具有多种特性，包括色相、饱和度和亮度。 CSS3 引入了hsl()函数，作为直接说明这些特征来挑选颜色的替代方法。<br>色相 是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。 以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。 在 hsl() 里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。<br>饱和度 是指色彩的纯度，也就是颜色里灰色的占比。 饱和度越高则灰色占比越少，色彩也就越纯；反之则完全是灰色。 饱和度的取值范围是表示灰色所占百分比的 0 至 100。<br>亮度 决定颜色的明暗程度，也就是颜色里白色或者黑色的占比。 其中，100% 的亮度表示纯白色， 0% 的亮度则表示纯黑色；而 50% 的亮度就表示在色相中选取的颜色。<br>下面是一些使用 hsl() 描述颜色的例子，颜色都为满饱和度，中等亮度:</p><table><thead><tr><th align="center">颜色</th><th align="center">HSL</th></tr></thead><tbody><tr><td align="center">红</td><td align="center">hsl(0, 100%, 50%)</td></tr><tr><td align="center">黄</td><td align="center">hsl(60, 100%, 50%)</td></tr><tr><td align="center">绿</td><td align="center">hsl(120, 100%, 50%)</td></tr><tr><td align="center">蓝绿</td><td align="center">hsl(180, 100%, 50%)</td></tr><tr><td align="center">蓝</td><td align="center">hsl(240, 100%, 50%)</td></tr><tr><td align="center">品红</td><td align="center">hsl(300, 100%, 50%)</td></tr></tbody></table><h2 id="调整颜色的色调"><a href="#调整颜色的色调" class="headerlink" title="调整颜色的色调"></a>调整颜色的色调</h2><p>hsl() 使 CSS 更改颜色色调更加方便。 比如，给一个纯色添加白色可以调出更浅的色调；添加黑色可以创造更深的色调。 另外，还可以通过给纯色添加灰色来同时改变颜色的深浅和明暗。hsl() 里面的 ‘s’ 和 ‘l’ 分别代表饱和度和亮度。 饱和度代表灰色的占比，亮度代表白色和黑色的占比。 这在你想获取一个基准色的变种的情景下会十分有用。</p><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><h3 id="创建一个-CSS-线性渐变"><a href="#创建一个-CSS-线性渐变" class="headerlink" title="创建一个 CSS 线性渐变"></a>创建一个 CSS 线性渐变</h3><p>HTML 元素的背景色并不局限于单色。 CSS 还为我们提供了颜色渐变。 可通过 background 里的 linear-gradient() 实现线性渐变， 以下是它的语法：</p><pre class="language-none"><code class="language-none">background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code></pre><p>第一个参数指定了颜色过渡的方向——它的值是角度，90deg 表示垂直渐变（从左到右），45deg 表示沿对角线渐变（从左下方到右上方）。 其他参数指定了渐变颜色的顺序：<br>例如：</p><pre class="language-none"><code class="language-none">background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code></pre><h3 id="使用-CSS-线性渐变创建条纹元素"><a href="#使用-CSS-线性渐变创建条纹元素" class="headerlink" title="使用 CSS 线性渐变创建条纹元素"></a>使用 CSS 线性渐变创建条纹元素</h3><p>repeating-linear-gradient() 函数和 linear-gradient() 很像，主要区别是前者会重复指定的渐变。 repeating-linear-gradient() 有很多参数，为了便于理解，这里只用到角度值和色标。<br>角度就是渐变的方向。 色标代表渐变颜色及发生渐变的位置，由百分比或者像素值表示。<br>下面的代码可以帮助理解成对的起止渐变颜色值是如何过渡的。</p><pre class="language-none"><code class="language-none">0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code></pre><p>如果每对起止渐变颜色值的颜色都是相同的，由于是在两个相同的颜色间过渡，那么中间的过渡色也为同色，接着就是同色的过渡色和下一个起止颜色，最终产生的效果就是条纹。<br>例子:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>  50 auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>      45deg<span class="token punctuation">,</span>      yellow 0px<span class="token punctuation">,</span>      yellow 40px<span class="token punctuation">,</span>      black 40px<span class="token punctuation">,</span>      black 80px    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="通过添加细微图案作为背景图像来创建纹理"><a href="#通过添加细微图案作为背景图像来创建纹理" class="headerlink" title="通过添加细微图案作为背景图像来创建纹理"></a>通过添加细微图案作为背景图像来创建纹理</h2><p>为了增加背景图的质感，我们可以为它添加一个不那么明显的纹理图案，这样可以让页面更讨喜。 但关键在于，我们需要找到一个平衡点，因为我们不希望背景图抢占了内容的风头，造成喧宾夺主的结果。 background 属性支持使用 url() 函数作为属性值，这让我们可以通过链接的方式引入纹理或样式的图片。 图片链接的地址应写在括号内，一般会用引号包起来。<br>例子:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png<span class="token punctuation">)</span></span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="Transform-scale缩放"><a href="#Transform-scale缩放" class="headerlink" title="Transform scale缩放"></a>Transform scale缩放</h2><h3 id="使用-CSS-Transform-scale-属性可以更改元素的大小"><a href="#使用-CSS-Transform-scale-属性可以更改元素的大小" class="headerlink" title="使用 CSS Transform scale 属性可以更改元素的大小"></a>使用 CSS Transform scale 属性可以更改元素的大小</h3><p>CSS 属性 transform 里面的 scale() 函数可以用来改变元素的显示比例。 下面的例子把页面的段落元素放大到了原来的 2 倍：</p><pre class="language-none"><code class="language-none">p &#123;  transform: scale(2);&#125;</code></pre><h3 id="使用CSS-Transform-scale-属性在悬停时缩放元素"><a href="#使用CSS-Transform-scale-属性在悬停时缩放元素" class="headerlink" title="使用CSS Transform scale 属性在悬停时缩放元素"></a>使用CSS Transform scale 属性在悬停时缩放元素</h3><p>transform 属性有很多函数可以调用，可以对元素进行调整大小、移动、旋转、翻转等操作。 当使用伪类选取元素的指定状态（如 :hover）时，我们可以通过 transform 属性非常方便地给元素添加交互。<br>下面是当用户悬停在段落元素时，段落大小缩放到原始大小 2.1 倍的例子：</p><pre class="language-none"><code class="language-none">p:hover &#123;  transform: scale(2.1);&#125;</code></pre><blockquote><p>注意： 给 div 元素添加 transform 也会影响这个 div 包裹的子元素。</p></blockquote><h2 id="Transform-skex倾斜"><a href="#Transform-skex倾斜" class="headerlink" title="Transform skex倾斜"></a>Transform skex倾斜</h2><h3 id="使用-CSS-Transform-skex-属性沿X轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿X轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿X轴倾斜元素"></a>使用 CSS Transform skex 属性沿X轴倾斜元素</h3><p>接下来要介绍的 transform 属性是 skewX()：它使选择的元素沿着 X 轴（横向）倾斜指定的角度。</p><p>下面的代码沿着 X 轴倾斜段落元素 -32 度。</p><pre class="language-none"><code class="language-none">p &#123;  transform: skewX(-32deg);&#125;</code></pre><h3 id="使用-CSS-Transform-skex-属性沿Y轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿Y轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿Y轴倾斜元素"></a>使用 CSS Transform skex 属性沿Y轴倾斜元素</h3><p>skewX 函数使指定元素沿 X 轴翻转指定的角度，想必你已经猜到了，skewY 属性使指定元素沿 Y 轴（垂直方向）翻转指定角度。<br>下面的代码沿着 Y 轴倾斜段落元素 -32 度。</p><pre class="language-none"><code class="language-none">p &#123;  transform: skewY(-32deg);&#125;</code></pre><h2 id="使用-CSS-创建一个图形"><a href="#使用-CSS-创建一个图形" class="headerlink" title="使用 CSS 创建一个图形"></a>使用 CSS 创建一个图形</h2><p>通过使用不同的选择器和属性，你可以做出有趣的形状， 一个简单的例子是新月形状。<br>首先我们来创建一个圆的、透明的图形，它具有模糊阴影并略微向两边递减。 如你所见，这个阴影其实就是新月形狀。<br>为了创建一个圆形的对象，border-radius 应该被设置成 50%。<br>你应该还记得之前的 box-shadow 属性以及它的依次取值 offset-x、offset-y、blur-radius、spread-radius 和 color 值。 其中 blur-radius 和 spread-radius 是可选的。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.center</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 25px 10px 0px 0px blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-CSS-和-HTML-创建更复杂的形状"><a href="#使用-CSS-和-HTML-创建更复杂的形状" class="headerlink" title="使用 CSS 和 HTML 创建更复杂的形状"></a>使用 CSS 和 HTML 创建更复杂的形状</h2><p>伪元素 ::before 和 ::after。 ::before 创建一个伪元素，它是所选元素的第一个子元素； ::after 创建一个伪元素，它是所选元素的最后一个子元素。 在下面的代码中，::before 伪元素用来给 class 为 heart 的元素添加一个正方形：</p><p>.heart::before {<br>  content: “”;<br>  background-color: yellow;<br>  border-radius: 25%;<br>  position: absolute;<br>  height: 50px;<br>  width: 70px;<br>  top: -50px;<br>  left: 5px;<br>}<br>::before 和 ::after 必须配合 content 来使用。 这个属性通常用来给元素添加内容诸如图片或者文字。 尽管有时 ::before 和 ::after 是用来实现形状而非文字，但 content 属性仍然是必需的，此时它的值可以是空字符串。 在上面的例子里，class 为 heart 元素的 ::before 伪类添加了一个黄色的长方形，长方形的高和宽分别为 50px 和 70px。 这个矩形有圆角，因为它的 border-radius 为 25%，它的位置是绝对位置，位于离元素左边和顶部分别是 5px、50px 的位置。</p><style>  .heart {    position: absolute;    margin: auto;    top: 0;    right: 0;    bottom: 0;    left: 0;    background-color: pink;    height: 50px;    width: 50px;    transform: rotate(-45deg);  }  .heart::after {    background-color: pink;    content: "";    border-radius: 50%;    position: absolute;    width: 50px;    height: 50px;    top: 0px;    left: 25px;  }  .heart::before {    content: "";    background-color: pink;    border-radius: 50%;    position: absolute;    width: 50px;    height: 50px;    top: -25px;    left: 0px;  }</style><div class="heart"></div><h2 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h2><h3 id="了解-CSS-的关键帧和动画是如何工作的"><a href="#了解-CSS-的关键帧和动画是如何工作的" class="headerlink" title="了解 CSS 的关键帧和动画是如何工作的"></a>了解 CSS 的关键帧和动画是如何工作的</h3><p>如果要给元素添加动画，你需要了解 animation 属性以及 @keyframes 规则。 animation 属性控制动画的外观，@keyframes 规则控制动画中各阶段的变化。 总共有 8 个 animation 属性。 为了便于理解，本挑战中我们只会暂时涉及到两个最常用的属性。</p><ol><li>animation-name 用来设置动画的名称，也就是我们稍后要在 @keyframes 里用到的名称</li><li>animation-duration 设置动画所花费的时间。</li></ol><p>@keyframes 可以通过设置特定时间点的行为来创建动画。 为此，我们只需要给持续时间内的特定帧（从 0% 到 100%）加上 CSS 规则。 如果用一部电影来做类比，那么 CSS 里面的 0% 关键帧就像是电影里面的开场镜头；100% 关键帧就像是电影里的片尾，就是那个之后会出现演职人员列表的片尾。 在动画设定的时间内，CSS 会根据关键帧的规则来给元素添加动画效果。 100% 位置的 CSS 属性就是元素最后的样子，相当于电影里的演职员表或者鸣谢镜头。 然后CSS 应用魔法来在给定的时间内转换元素以使其脱离场景。 下面举例说明 @keyframes 和动画属性的用法：</p><p>#anim {<br>  animation-name: colorful;<br>  animation-duration: 3s;<br>}</p><p>@keyframes colorful {<br>  0% {<br>    background-color: blue;<br>  }<br>  100% {<br>    background-color: yellow;<br>  }<br>}<br>id 为 anim 的元素，我们在代码中将它的 animation-name 设置为 colorful，同时设置 animation-duration 为 3 秒。 然后我们把 @keyframes 规则添加到名为 colorful 的动画属性上。 在动画开始时（0%）的背景颜色为蓝色，在动画结束时（100%）的背景颜色为黄色。 注意我们不只可以设置开始和结束，而是从 0% 到 100% 间的任意位置都可以设置。</p><h3 id="使用CSS动画更改按钮的悬停状态"><a href="#使用CSS动画更改按钮的悬停状态" class="headerlink" title="使用CSS动画更改按钮的悬停状态"></a>使用CSS动画更改按钮的悬停状态</h3><p>你可以在按钮悬停时使用 @keyframes 改变按钮的颜色。<br>下面是在图片悬停时改变图片宽度的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">img</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">img:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 500ms<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> width</span> <span class="token punctuation">&#123;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/curriculum/applied-visual-design/google-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">'</span>s Logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="修改动画的填充模式"><a href="#修改动画的填充模式" class="headerlink" title="修改动画的填充模式"></a>修改动画的填充模式</h3><p>注意动画在 500ms 之后重置了，所以按钮又变成了之前的颜色。 而我们想要的效果是按钮在悬停时始终高亮。<br>为此，我们可以通过把 animation-fill-mode 设置成 forwards 来实现。 animation-fill-mode 指定了在动画结束时元素的样式： 你可以这样设置：</p><pre class="language-none"><code class="language-none">animation-fill-mode: forwards;</code></pre><h3 id="使用-CSS-动画创建动画"><a href="#使用-CSS-动画创建动画" class="headerlink" title="使用 CSS 动画创建动画"></a>使用 CSS 动画创建动画</h3><p>在元素的 position 已有指定值（如 fixed 或者 relative）时，CSS 偏移属性 right、left、top、bottom 可以用在动画规则里创建动作。<br>就像下面的例子展示的那样，你可以在 50% keyframe 处设置 top 属性为 50px，在开始（0%）和结束（100%）keyframe 处设置为 0px，以实现元素先向下运动，然后返回的动作效果。</p><pre class="language-none"><code class="language-none">@keyframes rainbow &#123;  0% &#123;    background-color: blue;    top: 0px;  &#125;  50% &#123;    background-color: green;    top: 50px;  &#125;  100% &#123;    background-color: yellow;    top: 0px;  &#125;&#125;</code></pre><h3 id="通过从左到右淡化元素来创建视觉方向"><a href="#通过从左到右淡化元素来创建视觉方向" class="headerlink" title="通过从左到右淡化元素来创建视觉方向"></a>通过从左到右淡化元素来创建视觉方向</h3><p>现在我们需要改变动画元素的 opacity 属性值，使其在到达屏幕右侧时渐隐。<br>在示例动画中，具有渐变背景的圆形元素在 @keyframes 为 50% 的节点向右移动。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#ball</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      35deg<span class="token punctuation">,</span>      #ccffff<span class="token punctuation">,</span>      #ffcccc    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> fade<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 3s<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> fade</span> <span class="token punctuation">&#123;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="使用无限的动画计数制作永不停止的动画"><a href="#使用无限的动画计数制作永不停止的动画" class="headerlink" title="使用无限的动画计数制作永不停止的动画"></a>使用无限的动画计数制作永不停止的动画</h3><p>之前介绍了一些动画属性以及 @keyframes 规则的用法。 还有一个常用的动画属性是 animation-iteration-count，这个属性允许你控制动画循环的次数。 下面是一个例子：</p><pre class="language-none"><code class="language-none">animation-iteration-count: 3;</code></pre><p>在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 infinite。</p><pre class="language-none"><code class="language-none">#ball &#123;    width: 100px;    height: 100px;    margin: 50px auto;    position: relative;    border-radius: 50%;    background: linear-gradient(      35deg,      #ccffff,      #ffcccc    );    animation-name: bounce;    animation-duration: 1s;    animation-iteration-count: 3;  &#125;</code></pre><h3 id="以可变速率来给元素添加动画"><a href="#以可变速率来给元素添加动画" class="headerlink" title="以可变速率来给元素添加动画"></a>以可变速率来给元素添加动画</h3><p>改变相似元素的动画频率的方法有很多。 目前我们接触到的就有 animation-iteration-count 和 @keyframes。<br>举例说明，可以通过改变其中一个元素的 @keyframes 规则以此改变其动画频率。<br>例子:</p><pre class="language-none"><code class="language-none">@keyframes twinkle-1 &#123;    20% &#123;      transform: scale(0.5);      opacity: 0.5;    &#125;  &#125;</code></pre><p>将以上代码改为</p><pre class="language-none"><code class="language-none">@keyframes twinkle-1 &#123;    50% &#123;      transform: scale(0.5);      opacity: 0.5;    &#125;  &#125;</code></pre><h3 id="以可变速率来给多个元素添加动画"><a href="#以可变速率来给多个元素添加动画" class="headerlink" title="以可变速率来给多个元素添加动画"></a>以可变速率来给多个元素添加动画</h3><p>我们通过修改 @keyframes 改变了两个相似动画元素的频率。 你也可以通过改变多个元素的 animation-duration 来达到同样的效果。<br>例子:</p><pre class="language-none"><code class="language-none">.star-1 &#123;    margin-top: 15%;    margin-left: 60%;    animation-duration: 1s;    animation-name: twinkle;  &#125;.star-2 &#123;    margin-top: 25%;    margin-left: 25%;    animation-duration: 0.9s;    animation-name: twinkle;  &#125;.star-3 &#123;    margin-top: 10%;    margin-left: 50%;    animation-duration: 1.1s;    animation-name: twinkle;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-响应式网页设计原则</title>
      <link href="/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>人们可能通过形状和大小不同的设备来访问网页。通过响应式网页设计，你可以设计出能灵活适应不同屏幕大小、方向和分辨率的网页。</p><span id="more"></span><h2 id="创建一个媒体查询"><a href="#创建一个媒体查询" class="headerlink" title="创建一个媒体查询"></a>创建一个媒体查询</h2><p>媒体查询是 CSS3 中引入的一项新技术，它可以根据不同的视口大小调整内容的布局。 视口是指浏览器中，用户可见的网页内容。 视口会随访问网站的设备不同而改变。<br>媒体查询由媒体类型组成，如果媒体类型与展示网页的设备类型匹配，则应用对应的样式。 你可以在媒体查询中使用各种选择器和样式。<br>下面是一个媒体查询的例子，当设备宽度小于或等于 100px 时返回内容：</p><pre class="language-none"><code class="language-none">@media (max-width: 100px) &#123; &#x2F;* CSS Rules *&#x2F; &#125;</code></pre><p>以下定义的媒体查询，是当设备高度大于或等于 350px 时返回内容：</p><pre class="language-none"><code class="language-none">@media (min-height: 350px) &#123; &#x2F;* CSS Rules *&#x2F; &#125;</code></pre><p>注意，只有当媒体类型与所使用的设备的类型匹配时，媒体查询中定义的 CSS 才生效。</p><h2 id="使图片自适应设备尺寸"><a href="#使图片自适应设备尺寸" class="headerlink" title="使图片自适应设备尺寸"></a>使图片自适应设备尺寸</h2><p>用 CSS 来让图片自适应其实很简单。 你只需要给图片添加这些属性:</p><pre class="language-none"><code class="language-none">img &#123;  max-width: 100%;  height: auto;&#125;</code></pre><p>设置 max-width 值为 100% 可确保图片不超出父容器的范围；设置 height 属性为 auto 可以保持图片的原始宽高比。</p><h2 id="针对高分辨率屏幕应使用视网膜图片"><a href="#针对高分辨率屏幕应使用视网膜图片" class="headerlink" title="针对高分辨率屏幕应使用视网膜图片"></a>针对高分辨率屏幕应使用视网膜图片</h2><p>随着联网设备的增加，设备间的区别不仅发生在尺寸和规格上，还发生在用于显示的设备上。 像素密度就是区分不同显示设备的一个指标，它一般会以 PPI（Pixel Per Inch，即每英寸像素）或 DPI（每英寸点数）为计量单位。 最著名的显示器就是 Apple MacBook Pro 笔记本电脑上的“视网膜显示屏”（现亦用于 iMac）。 由于“视网膜显示屏”和“非视网膜显示屏”显示器之间像素密度的不同，某些未考虑高分辨率显示器的图像在高分辨率显示器上渲染时，可能因出现“像素化”而不够清晰。<br>让图像正确出现在高分辨率显示器（例如 MacBook Pros “Revistina display”）上的最简单方式， 是定义它们的 width 和 height 值为原始值的一半。 下面是一个仅使用原始高度和宽度一半的图像示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">img</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coolPic500x500<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A most excellent picture<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="使排版根据设备尺寸自如响应"><a href="#使排版根据设备尺寸自如响应" class="headerlink" title="使排版根据设备尺寸自如响应"></a>使排版根据设备尺寸自如响应</h2><p>除了使用 em 或 px 设置文本大小，你还可以用视窗单位来做响应式排版。 视窗单位和百分比都是相对单位，但它们是基于不同的参照物。 视窗单位是相对于设备的视窗尺寸（宽度或高度），百分比是相对于父级元素的大小。<br>四个不同的视窗单位分别是：<br>vw：如 10vw 的意思是视窗宽度的 10%。<br>vh： 如 3vh 的意思是视窗高度的 3%。<br>vmin： 如 70vmin 的意思是视窗的高度和宽度中较小一个的 70%。<br>vmax： 如 100vmax 的意思是视窗的高度和宽度中较大一个的 100%。<br>下面这个例子是设置 body 标签的宽度为视窗宽度的 30%。</p><pre class="language-none"><code class="language-none">body &#123; width: 30vw; &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-基础CSS</title>
      <link href="/2022/04/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80CSS/"/>
      <url>/2022/04/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80CSS/</url>
      
        <content type="html"><![CDATA[<p>CSS（级联样式表）告诉浏览器如何显示你在 HTML 中写入的文本和其他内容。你可以使用 CSS 控制 HTML 元素的颜色、字体、大小、间距等许多属性。</p><span id="more"></span><h2 id="修改文本的颜色。"><a href="#修改文本的颜色。" class="headerlink" title="修改文本的颜色。"></a>修改文本的颜色。</h2><p>我们通过修改 h2 元素的 style 属性来改变文本颜色。<br>我们需要修改 color 属性值。<br>以下是将 h2 元素设置为蓝色的方法：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>CatPhotoApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>请注意,需要在内联 style 声明末尾加上;</p><h2 id="使用元素选择器来设置元素的样式"><a href="#使用元素选择器来设置元素的样式" class="headerlink" title="使用元素选择器来设置元素的样式"></a>使用元素选择器来设置元素的样式</h2><p>在 CSS 中，页面样式的属性有几百个，你可以用来改变元素在页面上的外观。</p><p>当你输入 <code>&lt;h2 style=&quot;color: red;&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>，就可以用行内 CSS 设置 h2 元素的样式。</p><p>这是指定元素样式的一种方法，但有一个更好的方法来应用 CSS。</p><p>在代码的顶部，创建一个 style 声明区域，如下方所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>在样式声明区域内，可以为所有 h2 元素创建一个 CSS selector。 如果想让所有 h2 元素在变成红色，可以添加下方的样式规则：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>请注意，每个元素的样式规则都应该有开始和结束大括号{和}。 还需要确保元素的样式定义在开始和结束样式标签之间。 你需要确保所有样式规则位于花括号之间，并且每条样式规则都以分号结束。</p><h2 id="使用-class-选择器设置元素的样式"><a href="#使用-class-选择器设置元素的样式" class="headerlink" title="使用 class 选择器设置元素的样式"></a>使用 class 选择器设置元素的样式</h2><p>CSS 的 class 具有可重用性，可应用于各种 HTML 元素。<br>一个 CSS class 声明示例如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.blue-text</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>可以看到，我们在<code>&lt;style&gt;</code>样式声明区域里，创建了一个名为blue-text的class选择器。 你可以这样将 class 应用于 HTML 元素：<code>&lt;h2 class=&quot;blue-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>。 注意在CSS style元素里，class 名以一个句点开头。 在HTML元素的class属性中，class 名的开头没有句点。</p><h2 id="更改元素的字体大小"><a href="#更改元素的字体大小" class="headerlink" title="更改元素的字体大小"></a>更改元素的字体大小</h2><p>字体大小由 font-size 属性控制，如下所示：</p><pre class="language-html" data-language="html"><code class="language-html">h1 &#123;  font-size: 30px;&#125;</code></pre><h2 id="元素的字体族名"><a href="#元素的字体族名" class="headerlink" title="元素的字体族名"></a>元素的字体族名</h2><h3 id="设置元素的字体族名"><a href="#设置元素的字体族名" class="headerlink" title="设置元素的字体族名"></a>设置元素的字体族名</h3><p>通过 font-family 属性，我们可以设置元素里的字体族名。<br>如果你想将 h2 元素的字体设置为 sans-serif，可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html">h2 &#123;  font-family: sans-serif;&#125;</code></pre><h3 id="引入谷歌字体"><a href="#引入谷歌字体" class="headerlink" title="引入谷歌字体"></a>引入谷歌字体</h3><p>在我们的网站上，除了使用系统提供的默认字体以外，我们也可以使用自定义字体。 网络上有很多字体库。 在这个例子中，我们将使用 Google 字体库。<br>Google 字体库是一个免费的 Web 字体库，我们只需要在 CSS 里设置字体的 URL 即可使用。<br>要引入 Google Font，你需要从 Google Fonts 上复制字体的 URL，并粘贴到你的 HTML 里面。 在这个挑战中，我们需要引入 Lobster 字体。 因此，请复制以下代码段，并粘贴到代码编辑器顶部，即放到 style 标签之前。<br><code>&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</code><br>现在可以在 CSS 中使用 Lobster 字体，并像下面一样使用 Lobster 作为 FAMILY_NAME：</p><pre class="language-none"><code class="language-none">font-family: FAMILY_NAME, GENERIC_NAME;</code></pre><p>GENERIC_NAME是可选的，它用来指明在其他字体不可用时的后备字体。<br>字体名区分大小写，并且如果字体名含有空格，则在声明时需要用引号包起来。 例如，使用 “Open Sans” 字体需要添加引号，而Lobster则不需要。</p><h3 id="字体如何优雅降级"><a href="#字体如何优雅降级" class="headerlink" title="字体如何优雅降级"></a>字体如何优雅降级</h3><p>所有浏览器都有几种默认字体， 包括monospace、serif 和sans-serif。<br>在字体不可用的时候，你可以告诉浏览器通过“降级”去使用其他字体。<br>如果你想将一个元素的字体设置成 Helvetica，但当 Helvetica 不可用时，降级使用 sans-serif 字体，那么可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html">p &#123;  font-family: Helvetica, sans-serif;&#125;</code></pre><p>通用字体名不区分大小写。 同时，也不需要使用引号，因为它们是 CSS 中的关键字。</p><h2 id="调整图片的大小"><a href="#调整图片的大小" class="headerlink" title="调整图片的大小"></a>调整图片的大小</h2><p>CSS 的 width 属性可以控制元素的宽度。 和设置文本字号一样，我们会以 px（像素）为单位来设置图片的宽度。<br>例如，如果你想创建一个叫 larger-image 的 CSS class，来控制 HTML 元素的宽度为 500px，就可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.larger-image</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="元素添加边框"><a href="#元素添加边框" class="headerlink" title="元素添加边框"></a>元素添加边框</h2><h3 id="在元素周围添加边框"><a href="#在元素周围添加边框" class="headerlink" title="在元素周围添加边框"></a>在元素周围添加边框</h3><p>CSS 边框具有 style、color、width 属性。<br>假如我们要将一个 HTML 元素边框设置为 5px 的红色实线边框，我们可以这样做：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.thin-red-border</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="用border-radius添加圆角边框"><a href="#用border-radius添加圆角边框" class="headerlink" title="用border-radius添加圆角边框"></a>用border-radius添加圆角边框</h3><p>边框的四个角看起来很尖锐， 我们可以使用border-radius属性来让它变得圆润。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.thick-green-border</span> <span class="token punctuation">&#123;</span><span class="token property">border-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">border-width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="用border-radius制作圆形图片"><a href="#用border-radius制作圆形图片" class="headerlink" title="用border-radius制作圆形图片"></a>用border-radius制作圆形图片</h3><p>除像素外，你也可以使用百分比来指定border-radius的值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.thick-green-border</span> <span class="token punctuation">&#123;</span><span class="token property">border-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">border-width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="给div元素添加背景色"><a href="#给div元素添加背景色" class="headerlink" title="给div元素添加背景色"></a>给div元素添加背景色</h2><p>background-color 属性可以设置元素的背景颜色。<br>如果想将一个元素的背景颜色改为 green，可以在style里面这样写：</p><pre class="language-none"><code class="language-none">.green-background &#123;  background-color: green;&#125;</code></pre><h2 id="元素的id"><a href="#元素的id" class="headerlink" title="元素的id"></a>元素的id</h2><p>除了 class 属性，每一个 HTML 元素都有一个 id 属性。<br>使用 id 有几个好处：你可以通过 id 选择器来改变单个元素的样式。在稍后的课程中，你还会了解到如何在 JavaScript 里面用它来选择和操作元素。<br>根据规范，id 属性应是唯一的。 尽管浏览器并非必须执行这条规范，但这是广泛认可的最佳实践。 因此，请不要给多个元素设置相同的 id。<br>设置 h2 元素的 id 为 cat-photo-app 的代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat-photo-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="使用id属性来设定元素的样式"><a href="#使用id属性来设定元素的样式" class="headerlink" title="使用id属性来设定元素的样式"></a>使用id属性来设定元素的样式</h2><p>通过id属性，你可以做一些很酷的事情。就像class一样，你可以使用CSS来设置他们的样式。<br>不过，id不可以重复，它只能作用于一个元素上。 如果一个元素同时应用了class和id，且两者设置的样式有冲突，会优先应用 id 中所设置的样式。<br>选择id为cat-photo-element的元素，并设置它的背景颜色为绿色。 可以在style标签里这样写：</p><pre class="language-none"><code class="language-none">#cat-photo-element &#123;  background-color: green;&#125;</code></pre><p>注意在 style 标签里，声明 class 的时候必须在名字前插入.符号。同样，在声明 id 的时候，也必须在名字前插入#符号。</p><h2 id="调整元素的内边距"><a href="#调整元素的内边距" class="headerlink" title="调整元素的内边距"></a>调整元素的内边距</h2><p>所有的 HTML 元素都是以矩形为基础。每个 HTML 元素所占有的矩形空间由这三个重要的属性来控制：内边距padding、外边距margin 、边框border。padding用来控制着元素内容与border之间的空隙大小。</p><h3 id="给元素的每一侧添加不同的内边距"><a href="#给元素的每一侧添加不同的内边距" class="headerlink" title="给元素的每一侧添加不同的内边距"></a>给元素的每一侧添加不同的内边距</h3><p>有时候，你会想给一个元素每个方向的 padding 都设置一个特定的值<br>CSS 允许你使用 padding-top、padding-right、padding-bottom、padding-left 属性来设置四个不同方向的 padding 值。</p><h3 id="使用顺时针标记指定元素的内边距"><a href="#使用顺时针标记指定元素的内边距" class="headerlink" title="使用顺时针标记指定元素的内边距"></a>使用顺时针标记指定元素的内边距</h3><p>如果不想每次都要分别声明 padding-top、padding-right、padding-bottom、padding-left 属性，可以把它们汇总在一行里面一并声明，像是这样：</p><pre class="language-none"><code class="language-none">padding: 10px 20px 10px 20px;</code></pre><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的内边距。</p><h2 id="调整元素的外边距"><a href="#调整元素的外边距" class="headerlink" title="调整元素的外边距"></a>调整元素的外边距</h2><p>外边距 margin 用来控制元素的边框与其他元素之间的 border 距离。</p><h3 id="给元素添加负外边距"><a href="#给元素添加负外边距" class="headerlink" title="给元素添加负外边距"></a>给元素添加负外边距</h3><p>元素的 margin（外边距） 用来控制元素 border（边框） 与其周围元素之间的距离大小。<br>如果你把元素的 margin 设置为负值，元素会变得占用更多空间。</p><h3 id="给元素的每一侧添加不同的外边距"><a href="#给元素的每一侧添加不同的外边距" class="headerlink" title="给元素的每一侧添加不同的外边距"></a>给元素的每一侧添加不同的外边距</h3><p>有时候，你会想给一个元素每个方向的 margin 都设置成一个特定的值。<br>CSS 允许你使用 margin-top、margin-right、margin-bottom、margin-left 属性来设置四个不同方向的 margin 值。</p><h3 id="使用顺时针标记指定元素的外边距"><a href="#使用顺时针标记指定元素的外边距" class="headerlink" title="使用顺时针标记指定元素的外边距"></a>使用顺时针标记指定元素的外边距</h3><p>同样，每个方向的外边距值可以在一行里面汇总声明，而无需分别通过 margin-top、margin-right、margin-bottom、margin-left 分别声明，比如：</p><pre class="language-none"><code class="language-none">margin: 10px 20px 10px 20px;</code></pre><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的外边距值。</p><h2 id="使用属性选择器来设置元素的样式"><a href="#使用属性选择器来设置元素的样式" class="headerlink" title="使用属性选择器来设置元素的样式"></a>使用属性选择器来设置元素的样式</h2><p>我们已经通过设置元素的 id 和 class 来显示想要的样式。 这就是 ID 选择器和 Class 选择器。 另外，也还有其他的 CSS 选择器可以让我们给特定的元素设置样式。<br>属性选择器使用特定的属性值来匹配和设置元素样式。 例如，下面的代码会改变所有 type 为 radio 的元素的外边距。</p><pre class="language-none"><code class="language-none">[type&#x3D;&#39;radio&#39;] &#123;  margin: 20px 0px 20px 0px;&#125;</code></pre><h2 id="理解绝对单位与相对单位"><a href="#理解绝对单位与相对单位" class="headerlink" title="理解绝对单位与相对单位"></a>理解绝对单位与相对单位</h2><p>设置元素的内边距和外边距的 px 值，即像素。 像素是一个长度单位，它告诉浏览器应该如何调整元素的大小和位置。 其实除了 px，CSS 也有其他单位供我们使用。<br>单位长度的类型可以分成 2 种：相对和绝对。 绝对单位与长度的物理单位相关。 例如，in 和 mm 分别代表着英寸和毫米。 绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，这就可能会造成误差。<br>相对单位长度，比如 em 和 rem，它们的实际值会依赖其他长度的值而决定。 比如 em 的大小基于元素字体的字体大小。 如果使用它来设置 font-size 值，它的值会跟随父元素的 font-size 值来改变。<br>Note: 有些单位长度选项是相对视窗大小来改变值的， 这种设定符合响应式网页设计的原则。</p><h2 id="给-HTML-的-body-元素添加样式"><a href="#给-HTML-的-body-元素添加样式" class="headerlink" title="给 HTML 的 body 元素添加样式"></a>给 HTML 的 body 元素添加样式</h2><p>每一个 HTML 页面都有一个 body 元素。<br>我们可以通过设置 background-color 的属性值为 黑色，来证明 body 元素的存在。<br>请将以下代码添加到 style 标签里面：</p><pre class="language-none"><code class="language-none">body &#123;  background-color: black;&#125;</code></pre><h2 id="从-body-元素继承样式"><a href="#从-body-元素继承样式" class="headerlink" title="从 body 元素继承样式"></a>从 body 元素继承样式</h2><p>我们已经证明每一个 HTML 页面都含有 body 元素，我们也可以在 body 元素上使用 CSS 样式。<br>设置 body 元素样式的方法跟设置其他 HTML 元素样式的方式一样，并且其他元素也会继承 body 中所设置的样式。</p><h2 id="样式中的优先级"><a href="#样式中的优先级" class="headerlink" title="样式中的优先级"></a>样式中的优先级</h2><p>有时候，HTML 元素的样式会跟其他样式发生冲突。就像 h1 元素不能同时设置绿色和粉色两种颜色。</p><ol><li>Class 选择器的优先级高于继承样式</li><li>ID 选择器优先级高于 Class 选择器</li><li>内联样式的优先级高于 ID 选择器</li><li>Important 的优先级最高,例如<code>color: red !important;</code><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="使用十六进制编码获得指定颜色"><a href="#使用十六进制编码获得指定颜色" class="headerlink" title="使用十六进制编码获得指定颜色"></a>使用十六进制编码获得指定颜色</h3>你知道在 CSS 里面还有其他方式来代表颜色吗？ 其中一个方法叫十六进制编码，简称 hex。<br>日常生活中，我们使用的计数方法一般是 decimals，或十进制，即使用数字 0 到 9 来表示。 而 Hexadecimals（或 hex）基于 16 位数字， 它包括 16 种不同字符。 像十进制一样，0-9 的符号代表 0 到 9 的值。 然后，A、B、C、D、E、F 代表 10 至 15 的值。 总的来说，0 到 F 在十六进制里代表数字，总共有 16 个值。 你可以在此处找到更多关于十六进制信息。<br>在 CSS 里面，我们可以使用 6 个十六进制的数字来代表颜色，每两个数字控制一种颜色，分别是红（R）、绿（G）、蓝（B）。 例如，#000000 代表黑色，同时也是最小的值。 你可以在此处找到更多关于 RGB 颜色系统的信息。<pre class="language-none"><code class="language-none">body &#123;  color: #000000;&#125;</code></pre><h3 id="使用十六进制编码混合颜色"><a href="#使用十六进制编码混合颜色" class="headerlink" title="使用十六进制编码混合颜色"></a>使用十六进制编码混合颜色</h3>十六进制编码使用 6 个十六进制字符来表示颜色，两个字符为一组，分别代表红（R）、绿（G）、蓝（B）。<br>通过三原色（红、绿、蓝），我们可以创建 1600 万种不同颜色。<br>例如，橘色是纯红色混合一些绿色而成，其中没有蓝色。 在十六进制编码里面，它可以写成 #FFA500。<br>0 是十六进制里面最小的数字，表示没有颜色。<br>F 是十六进制里面最大的数字，有最高的亮度。<h3 id="使用缩写的十六进制编码"><a href="#使用缩写的十六进制编码" class="headerlink" title="使用缩写的十六进制编码"></a>使用缩写的十六进制编码</h3>许多人对超过 1600 万种颜色感到不知所措， 并且很难记住十六进制编码。 幸运的是，你可以使用缩写形式。<br>例如，红色的 #FF0000 十六进制编码可以缩写成 #F00。 在这种缩写形式里，三个数字分别代表着红（R）、绿（G）、蓝（B）三原色。<br>这样，颜色的数量减少到了大约 4000 种。 且在浏览器里 #FF0000 和 #F00 是完全相同的颜色。<h3 id="使用-RGB-值为元素上色"><a href="#使用-RGB-值为元素上色" class="headerlink" title="使用 RGB 值为元素上色"></a>使用 RGB 值为元素上色</h3>RGB 值是在 CSS 中表示颜色的另一种方法。<br>黑色的 RGB 值：<code>rgb(0, 0, 0)</code><br>白色的 RGB 值：<code>rgb(255, 255, 255)</code><br>RGB 值与我们之前学到的十六进制编码不同。RGB 值不需要用到 6 位十六进制数字，而只需要指定每种颜色的亮度大小，数值范围从 0 到 255。<br>如果我们稍微计算一下，就不难发现这两种表示方式本质上是等价的。在十六进制编码中，我们用两个十六进制数表示一个颜色；这样，每种颜色都有 16 * 16（即 256）种可能。 所以，RGB 从零开始计算，与十六进制代码的值的数量完全相同。<br>下面是通过使用 RGB 值设置背景颜色为橘色的例子：body。<pre class="language-none"><code class="language-none">body &#123;  background-color: rgb(255, 165, 0);&#125;</code></pre><h3 id="使用-RGB-混合颜色"><a href="#使用-RGB-混合颜色" class="headerlink" title="使用 RGB 混合颜色"></a>使用 RGB 混合颜色</h3>就像使用十六进制编码一样，你可以通过不同值的组合，来混合得到不同的 RGB 颜色。例如:<table><thead><tr><th align="center">颜色</th><th align="center">RGB</th></tr></thead><tbody><tr><td align="center">蓝色</td><td align="center">rgb(0, 0, 255)</td></tr><tr><td align="center">红色</td><td align="center">rgb(255, 0, 0)</td></tr><tr><td align="center">淡紫色</td><td align="center">rgb(218, 112, 214)</td></tr><tr><td align="center">赭黄色</td><td align="center">rgb(160, 82, 45)</td></tr></tbody></table><h2 id="CSS变量"><a href="#CSS变量" class="headerlink" title="CSS变量"></a>CSS变量</h2><h3 id="创建一个自定义的-CSS-变量"><a href="#创建一个自定义的-CSS-变量" class="headerlink" title="创建一个自定义的 CSS 变量"></a>创建一个自定义的 CSS 变量</h3>为创建一个 CSS 变量，你只需要在变量名前添加两个连字符号，并为其赋值即可，例子如下：<pre class="language-none"><code class="language-none">--penguin-skin: gray;</code></pre>这样就会创建一个 –penguin-skin 变量，它的值为 gray。 现在你可以在你的 CSS 中的其他地方使用这个变量来改变其他属性的值为灰色。<h3 id="使用一个自定义的-CSS-变量"><a href="#使用一个自定义的-CSS-变量" class="headerlink" title="使用一个自定义的 CSS 变量"></a>使用一个自定义的 CSS 变量</h3>创建变量后，CSS 属性可以通过调用变量名来使用它对应的值。<pre class="language-none"><code class="language-none">background: var(--penguin-skin);</code></pre>因为引用了 –penguin-skin 变量的值，使用了这个样式的元素背景颜色会是灰色。 请注意，除非变量名称完全匹配，否则将不会应用样式。<h3 id="给-CSS-变量设置备用值"><a href="#给-CSS-变量设置备用值" class="headerlink" title="给 CSS 变量设置备用值"></a>给 CSS 变量设置备用值</h3>使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。<br>注意： 备用值不是用于增强浏览器的兼容性，它也不适用于 IE 浏览器。 相反，它是用来让浏览器在找不到你的变量时可以显示一种颜色。<br>下面是操作方式：<pre class="language-none"><code class="language-none">background: var(--penguin-skin, black);</code></pre>如果你的变量没有设置，这将会把背景设置为 black。 提示：这对调试代码也会很有帮助。<h3 id="继承-CSS-变量"><a href="#继承-CSS-变量" class="headerlink" title="继承 CSS 变量"></a>继承 CSS 变量</h3>当创建一个变量时，变量会在创建变量的选择器里可用。 同时，在这个选择器的后代选择器里也是可用的。 这是因为 CSS 变量是可继承的，和普通的属性一样。<br>CSS 变量经常会定义在 :root 元素内，这样就可被所有选择器继承。<br>:root 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 html 元素。 我们在 :root 里创建变量在全局都可用，即在任何选择器里都生效。<h3 id="更改特定区域的变量"><a href="#更改特定区域的变量" class="headerlink" title="更改特定区域的变量"></a>更改特定区域的变量</h3>当你在 :root 里创建变量时，这些变量的作用域是整个页面。<br>然后，你可以通过在一个特定的选择器中再次设置这些变量来重写这些变量。<h3 id="使用媒体查询更改变量"><a href="#使用媒体查询更改变量" class="headerlink" title="使用媒体查询更改变量"></a>使用媒体查询更改变量</h3>CSS 变量可以简化媒体查询的定义方式。<br>例如，当屏幕小于或大于媒体查询所设置的值，只要我们更新变量的值，那么使用了此变量的元素样式就都会更改。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>    <span class="token property">--penguin-size</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">--penguin-beak</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* 只修改这一行下面的代码 */</span>      <span class="token property">--penguin-size</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>      <span class="token comment">/* 只修改这一行上面的代码 */</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="通过浏览器降级提高兼容性"><a href="#通过浏览器降级提高兼容性" class="headerlink" title="通过浏览器降级提高兼容性"></a>通过浏览器降级提高兼容性</h2>使用 CSS 时可能会遇到浏览器兼容性问题。 提供浏览器降级方案来避免潜在的问题会显得很重要。<br>当浏览器解析页面的 CSS 时，会自动忽视不能识别或者不支持的属性。 举个例子，如果使用 CSS 变量来指定站点的背景色，IE 浏览器由于不支持 CSS 变量而会忽略背景色。 此时，浏览器会尝试使用其它值。 但如果没有找到其它值，则会使用默认值，也就是没有背景色。<br>这意味着如果想提供浏览器降级方案，在声明之前提供另一个更宽泛的值即可。 这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。<br>我们使用了 CSS 变量来定义 .red-box 的背景色。 现在，我们通过在现有的声明之前添加另一个 background 声明，并将它的值设置为 red，来提升浏览器的兼容性。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>    <span class="token property">--red-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.red-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--red-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-基础HTML和HTML5</title>
      <link href="/2022/04/01/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80HTML%E5%92%8CHTML5/"/>
      <url>/2022/04/01/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80HTML%E5%92%8CHTML5/</url>
      
        <content type="html"><![CDATA[<p>HTML 是一种标记语言，使用特殊的语法或标记来向浏览器描述网页的结构。HTML 元素由开始和结束标签构成，标签之间是文本内容。 不同的标签可以让文本内容以标题、段落、列表等形式展现。</p><span id="more"></span><p>大部分 HTML 元素都有一个开始标签和一个结束标签。<br>开始标签像这样：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></code></pre><p>结束标签像这样：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>开始标签和结束标签的唯一区别就是结束标签多了一个斜杠。</p><h2 id="标题标签-h1-h6"><a href="#标题标签-h1-h6" class="headerlink" title="标题标签: h1~h6"></a>标题标签: h1~h6</h2><p>这些元素用来告诉浏览器网站的结构是什么样子。 h1 元素通常被用作主标题，h2 元素通常被用作副标题， 还有 h3、h4、h5、h6 元素，它们分别用作不同级别的标题。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><h2 id="段落标签-p"><a href="#段落标签-p" class="headerlink" title="段落标签: p"></a>段落标签: p</h2><p>p 元素是网站上段落文本的首选元素。 p 是“paragraph（段落）”的缩写。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签:"></a>注释标签:</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--注释文本--></span></code></pre><h2 id="图片标签-img"><a href="#图片标签-img" class="headerlink" title="图片标签: img"></a>图片标签: img</h2><p>你可以使用 img 元素来为你的网站添加图片，其中 src 属性指向图片的地址。<br>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecatphotoapp.com/your-image.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>注意：img 元素是没有结束标签的。所有的 img 元素 必须 有 alt 属性。 alt 的属性值有两个作用，第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；另一个作用是当图片无法加载时，页面需要显示的替代文本。</p><blockquote><p>注意： 如果图片是纯装饰性的，把 alt 的属性值设置为空是最佳实践。理想情况下，alt 属性不应该包含特殊字符，除非有特殊需要。</p></blockquote><h2 id="超链接标签-a"><a href="#超链接标签-a" class="headerlink" title="超链接标签: a"></a>超链接标签: a</h2><h3 id="网页间的跳转"><a href="#网页间的跳转" class="headerlink" title="网页间的跳转"></a>网页间的跳转</h3><p>你可以用 a（Anchor，简写为 a）来实现网页间的跳转。</p><p>a 需要一个 href 属性指向跳转的目的地。 同时，它还应有内容。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this links to freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>浏览器将显示文本 this links to freecodecamp.org，这是一个可点击的链接。 你可以通过这个链接访问 <a href="https://www.freecodecamp.org./">https://www.freecodecamp.org。</a></p><h3 id="网页内部的跳转"><a href="#网页内部的跳转" class="headerlink" title="网页内部的跳转"></a>网页内部的跳转</h3><p>a（anchor）元素也可以用于创建内部链接，跳转到网页内的各个不同部分。<br>要创建内部链接，你需要将链接的 href 属性值设置为一个哈希符号 # 加上你想内部链接到的元素的 id，通常是在网页下方的元素。 然后你需要将相同的 id 属性添加到你链接到的元素中。 id 是描述网页元素的一个属性，它的值在整个页面中唯一。<br>例如当用户点击了 Contacts 链接，页面就会跳转到网页的 Contacts 区域。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#contacts-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contacts-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>当用户点击 Contacts 链接时，他们将被带到带有 Contacts 标题元素的网页部分。</p><h3 id="将a标签嵌套在段落中"><a href="#将a标签嵌套在段落中" class="headerlink" title="将a标签嵌套在段落中"></a>将a标签嵌套在段落中</h3><p>你可以在其他文本元素内嵌套链接。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  Here's a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> link to www.freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> for you to follow.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>让我们来拆解一下这个例子。 通常，文本是被包裹在 p 元素内：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> Here's a ... for you to follow. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>接下来是锚点元素 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>（它需要结束标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>）：```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>target 是锚点元素的一个属性，它用来指定链接的打开方式。 属性值 _blank 表示链接会在新标签页打开。 href 是锚点元素的另一个属性，它用来指定链接的 URL：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>a 元素内的文本 link to <a href="http://www.freecodecamp.org/">www.freecodecamp.org</a> 叫作锚文本，会显示为一个可以点击的链接：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> ... <span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link to freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>此示例的最终输出结果是这样：<br>Here’s a link to <a href="http://www.freecodecamp.org/">www.freecodecamp.org</a> for you to follow.</p><h3 id="链接占位符"><a href="#链接占位符" class="headerlink" title="链接占位符#"></a>链接占位符#</h3><p>有时你想为网站添加一个 a 元素，但还不确定要将它链接到哪里。 可以将 href 属性的值替换为#，以此来创建链接占位符。例如: </p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h3 id="给图片添加链接"><a href="#给图片添加链接" class="headerlink" title="给图片添加链接"></a>给图片添加链接</h3><p>你可以通过把元素嵌套进 a 里使其变成一个链接。如果我们要把图片嵌套进 a 元素， 可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Three kittens running towards the camera.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>如果把 a 的 href 属性值设置为 #，创建的是一个死链接（不跳转到其他画面）。</p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>HTML 有一个特定的元素用于创建无序列表。<br>无序列表以ul开始，中间包含一个或多个li元素， 最后以&#x2F;ul结束。<br>例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>会创建一个要点列表，包括 milk 和 cheese。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>HTML 中有用于创建有序列表的特定元素。<br>有序列表以ol开始，中间包含一个或多个li元素。 最后以&#x2F;ol结束。<br>例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Garfield<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Sylvester<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>将创建一个包含 Garfield 和 Sylvester 的编号列表。</p><h2 id="输入框标签"><a href="#输入框标签" class="headerlink" title="输入框标签"></a>输入框标签</h2><p>input 输入框可以让你轻松获得用户的输入。你可以像这样创建一个文本输入框：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意 input 输入框是没有结束标签的。</p></blockquote><h2 id="给输入框添加占位符文本"><a href="#给输入框添加占位符文本" class="headerlink" title="给输入框添加占位符文本"></a>给输入框添加占位符文本</h2><p>占位符文本是用户在 input 输入框中输入任何东西前的预定义文本。你可以像这样创建一个占位符：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>this is placeholder text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： 别忘了 input 元素是 “自闭和标签”，即不需要结束标签。</p></blockquote><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="创建表单"><a href="#创建表单" class="headerlink" title="创建表单"></a>创建表单</h3><p>我们可以只通过 HTML 来实现发送数据给服务器的表单， 只需要给 form 元素添加 action 属性即可。例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url-where-you-want-to-submit-form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="给表单添加提交按钮"><a href="#给表单添加提交按钮" class="headerlink" title="给表单添加提交按钮"></a>给表单添加提交按钮</h3><p>给表单添加一个 submit（提交）按钮。 点击提交按钮时，表单中的数据将会被发送到 action 属性指定的 URL 上。例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this button submits the form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="给表单添加一个必填字段"><a href="#给表单添加一个必填字段" class="headerlink" title="给表单添加一个必填字段"></a>给表单添加一个必填字段</h3><p>当你设计表单时，你可以指定某些字段为必填项（required），只有当用户填写了该字段后，才可以提交表单。<br>如果你想把文本输入框设置为必填项，在 input 元素中加上 required 属性就可以了，例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span></code></pre><h2 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h2><h3 id="创建一组单选按钮"><a href="#创建一组单选按钮" class="headerlink" title="创建一组单选按钮"></a>创建一组单选按钮</h3><p>单选按钮是 input 选择框的一种类型。<br>每一个单选按钮都应该嵌套在它自己的 label（标签）元素中。 这样，我们相当于给 input 元素和包裹它的 label 元素建立起了对应关系。<br>所有关联的单选按钮应该拥有相同的 name 属性。 创建一组单选按钮，选中其中一个按钮，其他按钮即显示为未选中，以确保用户只提供一个答案。<br>下面是一个单选按钮的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>最佳实践是在 label 元素上设置 for 属性，让其值与相关联的 input 单选按钮的 id 属性值相同。 这使得辅助技术能够在标签和相关的 input 元素之间建立关联关系。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>我们也可以在 label 标签中嵌入 input 元素：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><h3 id="创建一组复选框"><a href="#创建一组复选框" class="headerlink" title="创建一组复选框"></a>创建一组复选框</h3><p>复选框是 input 选择框的一种类型。<br>每一个复选框都应该嵌套在它自己的 label（标签）元素中。这样我们相当于给 input 元素和包裹它的 label 元素建立起了对应关系。所有关联的复选框应该拥有相同的 name 属性。<br>使得 input 与 label 关联的最佳实践是在 label 元素上设置 for 属性，让其值与相关联的 input 复选框的 id 属性值相同。<br>下面是一个复选框的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loving<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loving<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>personality<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Loving<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><h3 id="使用单选框和复选框的value属性"><a href="#使用单选框和复选框的value属性" class="headerlink" title="使用单选框和复选框的value属性"></a>使用单选框和复选框的value属性</h3><p>提交表单时，所选项的值会发送给服务端。 radio 和 checkbox 的 value 属性值决定了发送到服务端的实际内容。<br>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Outdoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>这里有两个 radio 单选框。 当用户提交表单时，如果 indoor 选项被选中，表单数据会包含：indoor-outdoor&#x3D;indoor。 也就是所选项的 name 和 value 属性值。<br>如果没有指明 value 属性值，则会使用默认值做为表单数据提交，也就是 on。 在这种情况下，如果用户选中 “indoor” 选项然后提交表单，表单数据则会包含 indoor-outdoor&#x3D;on。 这样的表单数据看起来不够直观，因此最好将 value 属性值设置为一些有意义的内容。</p><h3 id="给单选按钮和复选框添加默认选中项"><a href="#给单选按钮和复选框添加默认选中项" class="headerlink" title="给单选按钮和复选框添加默认选中项"></a>给单选按钮和复选框添加默认选中项</h3><p>用 checked 属性把第一个复选框和单选按钮都设置为默认选中。<br>为此，只需将单词 checked 添加到 input 元素的内部。 例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-name<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span></code></pre><h2 id="元素嵌套"><a href="#元素嵌套" class="headerlink" title="元素嵌套"></a>元素嵌套</h2><p>div 元素也叫内容划分元素，是一个包裹其他元素的通用容器。<br>它也是 HTML 中出现频率最高的元素。<br>和其他普通元素一样，你可以用<div>来标记一个 div 元素的开始，用 </div> 来标记一个 div 元素的结束。</p><h2 id="声明HTML的文档类型"><a href="#声明HTML的文档类型" class="headerlink" title="声明HTML的文档类型"></a>声明HTML的文档类型</h2><p>在文档的顶部，我们需要告诉浏览器网页所使用的 HTML 的版本。 HTML 是一个在不停发展的语言，大部分浏览器都支持 HTML 的最新标准，也就是 HTML5。 大部分主流浏览器都支持最新的 HTML5 规范。 但是一些陈旧的网页可能使用的是老版本的 HTML。<br>你可以通过 <!DOCTYPE ...> 来告诉浏览器页面上使用的 HTML 版本，”…” 部分就是版本号。 <!DOCTYPE html> 对应的就是 HTML5。<br>! 和大写的 DOCTYPE 是很重要的，尤其是对那些老的浏览器。 但 html 无论大写小写都可以。<br>所有的 HTML 代码都必须位于 html 标签中。 其中 <html> 位于 <!DOCTYPE html> 之后，</html> 位于网页的结尾。<br>这是一个网页结构的列子。 你的 HTML 代码会在两个 html 标签之间。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="定义HTML文档的head和body"><a href="#定义HTML文档的head和body" class="headerlink" title="定义HTML文档的head和body"></a>定义HTML文档的head和body</h2><p>html 的结构主要分为两大部分：head 和 body。 网页的描述应放入 head 标签， 网页的内容（向用户展示的）则应放入 body 标签。<br>比如 link、meta、title 和 style 都应放入 head 标签。<br>这是网页布局的一个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2022/03/21/hello-world/"/>
      <url>/2022/03/21/hello-world/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中部署django</title>
      <link href="/2022/03/18/%E5%9C%A8Ubuntu%E4%B8%AD%E9%83%A8%E7%BD%B2django/"/>
      <url>/2022/03/18/%E5%9C%A8Ubuntu%E4%B8%AD%E9%83%A8%E7%BD%B2django/</url>
      
        <content type="html"><![CDATA[<p>这是作者本人在Ubuntu中部署django中遇到的一些问题</p><span id="more"></span><p><strong>在Ubuntu中部署django本人是参考的django中文网的</strong><br><a href="https://www.django.cn/article/show-22.html">Ubuntu部署Django项目方法详解</a></p><p>在部署过程中本人遇到了以下问题,特此记录一下:</p><h2 id="Ubuntu中安装nginx报错"><a href="#Ubuntu中安装nginx报错" class="headerlink" title="Ubuntu中安装nginx报错"></a>Ubuntu中安装nginx报错</h2><h3 id="‘struct-crypt-data’-has-no-member-named-‘current-salt’"><a href="#‘struct-crypt-data’-has-no-member-named-‘current-salt’" class="headerlink" title="‘struct crypt_data’ has no member named ‘current_salt’"></a>‘struct crypt_data’ has no member named ‘current_salt’</h3><p>本人在按照上面的部署教程部署到第八步安装nginx并配置中的sudo make报错</p><p><img src="https://img-blog.csdnimg.cn/2020071712094293.png" loading="lazy"></p><p>问题原因: nginx的版本高或者服务器版本高的问题</p><p>解决方法: 在nginx安装目录下找到src&#x2F;os&#x2F;unix&#x2F;ngx_user.c文件,使用vim打开,将cd.current_salt[0] &#x3D; ~salt[0]:这行注释就行了</p><p><img src="https://img-blog.csdnimg.cn/20200717121206221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bWFueXI=,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>在执行完上面的操作后,又出现了新的报错</p><h3 id="make-1-objs-x2F-src-x2F-core-x2F-ngx-murmurhash-o-Error-1"><a href="#make-1-objs-x2F-src-x2F-core-x2F-ngx-murmurhash-o-Error-1" class="headerlink" title="make[1]: *** [objs&#x2F;src&#x2F;core&#x2F;ngx_murmurhash.o] Error 1"></a>make[1]: *** [objs&#x2F;src&#x2F;core&#x2F;ngx_murmurhash.o] Error 1</h3><p>问题原因: Werror它要求GCC将所有的警告当成错误进行处理 所有导致错误输出 并不能进行下一步</p><p>解决方法: 使用vim打开&#x2F;nginx-1.10.3&#x2F;objs&#x2F;Makefile找到 -Werror并去掉在重新make即可</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
