<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2022/05/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/05/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式，常常缩写为 “regex” 或 “regexp”，是帮助程序员匹配、搜索和替换文本的模式。正则表达式非常强大，但可能难以阅读，因为它们使用特殊字符来做更复杂更灵活的匹配。</p><span id="more"></span><h2 id="使用测试方法"><a href="#使用测试方法" class="headerlink" title="使用测试方法"></a>使用测试方法</h2><p>在编程语言中，正则表达式用于匹配指定的字符串。 通过正则表达式创建匹配模式（规则）可以帮你完成指定匹配。</p><p>如果想要在字符串 The dog chased the cat 中匹配到 the 这个单词，可以使用如下正则表达式：&#x2F;the&#x2F;。 注意，正则表达式中不需要引号。</p><p>JavaScript 中有多种使用正则表达式的方法。 测试正则表达式的一种方法是使用 .test() 方法。 .test() 方法会把编写的正则表达式和字符串（即括号内的内容）匹配，如果成功匹配到字符，则返回 true，反之，返回 false。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> testStr <span class="token operator">=</span> <span class="token string">"freeCodeCamp"</span><span class="token punctuation">;</span><span class="token keyword">let</span> testRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Code</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>testRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>test 方法会返回 true。</p><h2 id="匹配文字字符串"><a href="#匹配文字字符串" class="headerlink" title="匹配文字字符串"></a>匹配文字字符串</h2><p>在上一节中，使用正则表达式 &#x2F;Hello&#x2F; 搜索到了字符串 Hello。 那个正则表达式在字符串中搜寻 Hello 的文字匹配。 下面是另一个在字符串中搜寻 Kevin 的示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> testStr <span class="token operator">=</span> <span class="token string">"Hello, my name is Kevin."</span><span class="token punctuation">;</span><span class="token keyword">let</span> testRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Kevin</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>testRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>test 方法会返回 true。</p><p>任何其他形式的 Kevin 都不会被匹配。 例如，正则表达式 &#x2F;Kevin&#x2F; 不会匹配 kevin 或者KEVIN。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> wrongRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">kevin</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>wrongRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>testStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>此 test 调用将返回 false。</p><h2 id="同时用多种模式匹配文字字符串"><a href="#同时用多种模式匹配文字字符串" class="headerlink" title="同时用多种模式匹配文字字符串"></a>同时用多种模式匹配文字字符串</h2><p>使用正则表达式&#x2F;coding&#x2F;，你可以在其他字符串中查找coding。</p><p>这对于搜寻单个字符串非常有用，但仅限于一种匹配模式。 你可以使用 alternation 或 OR 操作符搜索多个模式： |</p><p>此操作符匹配操作符前面或后面的字符。 例如，如果你想匹配 yes 或 no，你需要的正则表达式是 &#x2F;yes|no&#x2F;。</p><p>你还可以匹配多个规则，这可以通过添加更多的匹配模式来实现。 这些匹配模式将包含更多的 OR 操作符来分隔它们，比如&#x2F;yes|no|maybe&#x2F;。</p><h2 id="匹配时忽略大小写"><a href="#匹配时忽略大小写" class="headerlink" title="匹配时忽略大小写"></a>匹配时忽略大小写</h2><p>到目前为止，已经了解了如何用正则表达式来执行字符串的匹配。 但有时候，并不关注匹配字母的大小写。</p><p>大小写即大写字母和小写字母。 大写字母如 A、B 和 C。 小写字母如 a、b 和 c。</p><p>可以使用标志（flag）来匹配这两种情况。 标志有很多，不过这里我们只关注忽略大小写的标志——i。 可以通过将它附加到正则表达式之后来使用它。 这里给出使用该标志的一个实例 &#x2F;ignorecase&#x2F;i。 这个字符串可以匹配字符串 ignorecase、igNoreCase 和 IgnoreCase。</p><h2 id="提取匹配项"><a href="#提取匹配项" class="headerlink" title="提取匹配项"></a>提取匹配项</h2><p>到目前为止，只是检查了一个匹配模式是否存在于字符串中。 还可以使用 .match() 方法来提取找到的实际匹配项。</p><p>可以使用字符串来调用 .match() 方法，并在括号内传入正则表达式。</p><p>请看下面的举例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token string">"Hello, World!"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourStr <span class="token operator">=</span> <span class="token string">"Regular expressions"</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">expressions</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>ourStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ourRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里第一个 match 将返回 [“Hello”] 第二个将返回 [“expressions”]。</p><blockquote><p>请注意， .match 语法是目前为止一直使用的 .test 方法中的“反向”：</p></blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token string">'string'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="提取匹配项-1"><a href="#提取匹配项-1" class="headerlink" title="提取匹配项"></a>提取匹配项</h2><p>到目前为止，只是检查了一个匹配模式是否存在于字符串中。 还可以使用 .match() 方法来提取找到的实际匹配项。</p><p>可以使用字符串来调用 .match() 方法，并在括号内传入正则表达式。</p><p>请看下面的举例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token string">"Hello, World!"</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourStr <span class="token operator">=</span> <span class="token string">"Regular expressions"</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">expressions</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>ourStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ourRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里第一个 match 将返回 [“Hello”] 第二个将返回 [“expressions”]。</p><blockquote><p>请注意， .match 语法是目前为止一直使用的 .test 方法中的“反向”：</p></blockquote><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token string">'string'</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">regex</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="全局匹配"><a href="#全局匹配" class="headerlink" title="全局匹配"></a>全局匹配</h2><p>到目前为止，只能提取或搜寻一次模式匹配。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> testStr <span class="token operator">=</span> <span class="token string">"Repeat, Repeat, Repeat"</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Repeat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>testStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>ourRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这里 match 将返回 [“Repeat”]。</p><p>若要多次搜寻或提取模式匹配，可以使用 g 标志。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> repeatRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Repeat</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>testStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>repeatRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里 match 返回值 [“Repeat”, “Repeat”, “Repeat”]</p><h2 id="用通配符匹配任何内容"><a href="#用通配符匹配任何内容" class="headerlink" title="用通配符匹配任何内容"></a>用通配符匹配任何内容</h2><p>有时不（或不需要）知道匹配模式中的确切字符。 如果要精确匹配到完整的单词，那出现一个拼写错误就会匹配不到。 幸运的是，可以使用通配符 . 来处理这种情况。</p><p>通配符 . 将匹配任何一个字符。 通配符也叫 dot 或 period。 可以像使用正则表达式中任何其他字符一样使用通配符。 例如，如果想匹配 hug、huh、hut 和 hum，可以使用正则表达式 &#x2F;hu.&#x2F; 匹配以上四个单词。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> humStr <span class="token operator">=</span> <span class="token string">"I'll hum a song"</span><span class="token punctuation">;</span><span class="token keyword">let</span> hugStr <span class="token operator">=</span> <span class="token string">"Bear hug"</span><span class="token punctuation">;</span><span class="token keyword">let</span> huRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hu.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>huRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>humStr<span class="token punctuation">)</span><span class="token punctuation">;</span>huRegex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hugStr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的 test 都会返回 true。</p><h2 id="将单个字符与多种可能性匹配"><a href="#将单个字符与多种可能性匹配" class="headerlink" title="将单个字符与多种可能性匹配"></a>将单个字符与多种可能性匹配</h2><p>已经了解了文字匹配模式（&#x2F;literal&#x2F;）和通配符（&#x2F;.&#x2F;）。 这是正则表达式的两种极端情况，一种是精确匹配，而另一种则是匹配所有。 在这两种极端情况之间有一个平衡选项。</p><p>可以使用字符集 （character classes）更灵活的匹配字符。 可以把字符集放在方括号（[ 和 ]）之间来定义一组需要匹配的字符串。</p><p>例如，如果想要匹配 bag、big 和 bug，但是不想匹配 bog。 可以创建正则表达式 &#x2F;b[aiu]g&#x2F; 来执行此操作。 [aiu] 是只匹配字符 a、i 或者 u 的字符集。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> bigStr <span class="token operator">=</span> <span class="token string">"big"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bagStr <span class="token operator">=</span> <span class="token string">"bag"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bugStr <span class="token operator">=</span> <span class="token string">"bug"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bogStr <span class="token operator">=</span> <span class="token string">"bog"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bgRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">b[aiu]g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>bigStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>bagStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>bugStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>bogStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>按顺序排列，四次 match 调用将返回值 [“big”]、[“bag”]、[“bug”] 和 null。</p><h2 id="匹配字母表中的字母"><a href="#匹配字母表中的字母" class="headerlink" title="匹配字母表中的字母"></a>匹配字母表中的字母</h2><p>了解了如何使用字符集（character sets）来指定要匹配的一组字符串，但是有时需要匹配大量字符（例如，字母表中的每个字母）。 有一种写法可以让实现这个功能变得简短。</p><p>在字符集中，可以使用连字符（-）来定义要匹配的字符范围。</p><p>例如，要匹配小写字母 a 到 e，你可以使用 [a-e]。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> catStr <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span><span class="token keyword">let</span> batStr <span class="token operator">=</span> <span class="token string">"bat"</span><span class="token punctuation">;</span><span class="token keyword">let</span> matStr <span class="token operator">=</span> <span class="token string">"mat"</span><span class="token punctuation">;</span><span class="token keyword">let</span> bgRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-e]at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>catStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>batStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>matStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>bgRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>按顺序排列，三次 match 调用将返回值 [“cat”]，[“bat”] 和 null。</p><h2 id="匹配字母表中的数字和字母"><a href="#匹配字母表中的数字和字母" class="headerlink" title="匹配字母表中的数字和字母"></a>匹配字母表中的数字和字母</h2><p>使用连字符（-）匹配字符范围并不仅限于字母。 它还可以匹配一系列数字。</p><p>例如，&#x2F;[0-5]&#x2F; 匹配 0 和 5 之间的任意数字，包含 0 和 5。</p><p>此外，还可以在单个字符集中组合一系列字母和数字。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> jennyStr <span class="token operator">=</span> <span class="token string">"Jenny8675309"</span><span class="token punctuation">;</span><span class="token keyword">let</span> myRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">;</span>jennyStr<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>myRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="匹配单个未指定的字符"><a href="#匹配单个未指定的字符" class="headerlink" title="匹配单个未指定的字符"></a>匹配单个未指定的字符</h2><p>到目前为止，已经创建了一个想要匹配的字符集合，但也可以创建一个不想匹配的字符集合。 这些类型的字符集称为否定字符集（ negated character sets）。</p><p>要创建否定字符集，需要在开始括号后面和不想匹配的字符前面放置脱字符（即^）。</p><p>例如，&#x2F;[^aeiou]&#x2F;gi 匹配所有非元音字符。 注意，字符 .、!、[、@、&#x2F; 和空白字符等也会被匹配，该否定字符集仅排除元音字符。</p><h2 id="匹配出现一次或多次的字符"><a href="#匹配出现一次或多次的字符" class="headerlink" title="匹配出现一次或多次的字符"></a>匹配出现一次或多次的字符</h2><p>有时，需要匹配出现一次或者连续多次的的字符（或字符组）。 这意味着它至少出现一次，并且可能重复出现。</p><p>可以使用 + 符号来检查情况是否如此。 记住，字符或匹配模式必须一个接一个地连续出现。 这就是说，字符必须一个接一个地重复。</p><p>例如，&#x2F;a+&#x2F;g 会在 abc 中匹配到一个匹配项，并且返回 [“a”]。 因为 + 的存在，它也会在 aabc 中匹配到一个匹配项，然后返回 [“aa”]。</p><p>如果它是检查字符串 abab，它将匹配到两个匹配项并且返回[“a”, “a”]，因为a字符不连续，在它们之间有一个b字符。 最后，因为在字符串 bcd 中没有 a，因此找不到匹配项。</p><h2 id="匹配出现零次或多次的字符"><a href="#匹配出现零次或多次的字符" class="headerlink" title="匹配出现零次或多次的字符"></a>匹配出现零次或多次的字符</h2><p>上一节中使用了加号 + 来查找出现一次或多次的字符。 还有一个选项可以匹配出现零次或多次的字符。</p><p>执行该操作的字符叫做星号，即*。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> soccerWord <span class="token operator">=</span> <span class="token string">"gooooooooal!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> gPhrase <span class="token operator">=</span> <span class="token string">"gut feeling"</span><span class="token punctuation">;</span><span class="token keyword">let</span> oPhrase <span class="token operator">=</span> <span class="token string">"over the moon"</span><span class="token punctuation">;</span><span class="token keyword">let</span> goRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">go*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>soccerWord<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>goRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>gPhrase<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>goRegex<span class="token punctuation">)</span><span class="token punctuation">;</span>oPhrase<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>goRegex<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>按顺序排列，三次 match 调用将返回值 [“goooooooo”]，[“g”] 和 null。</p><h2 id="用惰性匹配来查找字符"><a href="#用惰性匹配来查找字符" class="headerlink" title="用惰性匹配来查找字符"></a>用惰性匹配来查找字符</h2><p>在正则表达式中，贪婪（greedy）匹配会匹配到符合正则表达式匹配模式的字符串的最长可能部分，并将其作为匹配项返回。 另一种方案称为懒惰（lazy）匹配，它会匹配到满足正则表达式的字符串的最小可能部分。</p><p>可以将正则表达式 &#x2F;t[a-z]*i&#x2F; 应用于字符串 “titanic”。 这个正则表达式是一个以 t 开始，以 i 结束，并且中间有一些字母的匹配模式。</p><p>正则表达式默认是贪婪匹配，因此匹配返回为 [“titani”]。 它会匹配到适合该匹配模式的最大子字符串。</p><p>但是，你可以使用 ? 字符来将其变成懒惰匹配。 调整后的正则表达式 &#x2F;t[a-z]*?i&#x2F; 匹配字符串 “titanic” 返回 [“ti”]。</p><blockquote><p><strong>注意</strong>：应该避免使用正则表达式解析 HTML，但是可以用正则表达式匹配 HTML 字符串。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2022/05/05/ES6/"/>
      <url>/2022/05/05/ES6/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript（ES）是 JavaScript 的标准。因为所有主流浏览器都遵循此规范，所以 ECMAScript 和 JavaScript 是可以互换的。</p><span id="more"></span><h2 id="比较-var-和-let-关键字的作用域"><a href="#比较-var-和-let-关键字的作用域" class="headerlink" title="比较 var 和 let 关键字的作用域"></a>比较 var 和 let 关键字的作用域</h2><p>如果你不熟悉 let，请查看 这个挑战。</p><p>使用 var 关键字声明变量时，它是全局声明的，如果在函数内部声明则是局部声明的。</p><p>let 关键字的行为类似，但有一些额外的功能。 在代码块、语句或表达式中使用 let 关键字声明变量时，其作用域仅限于该代码块、语句或表达式。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  numArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numArray<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>此处控制台将显示值 [0, 1, 2] 和 3。</p><p>使用 var 关键字，i 是全局声明的。 所以当 i++ 被执行时，它会更新全局变量。 此代码类似于以下内容：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> numArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  numArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numArray<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>此处控制台将显示值 [0, 1, 2] 和 3。</p><p>如果你创建一个函数，将它存储起来，稍后在使用 i 变量的 for 循环中使用。这么做可能会出现问题。 这是因为存储的函数将始终引用更新后的全局 i 变量的值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> printNumTwo<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">printNumTwo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printNumTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>此处控制台将显示值 3。</p><p>可以看到，printNumTwo() 打印了 3 而不是 2。 这是因为赋值给 i 的值已经更新，printNumTwo() 返回全局的 i，而不是在 for 循环中创建函数时 i 的值。 let 关键字就不会出现这种现象：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> printNumTwo<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">printNumTwo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printNumTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这里控制台将显示值 2 和一个错误提示 i is not defined。</p><p>i 未定义，因为它没有在全局范围内声明。 它只在 for 循环语句中被声明。 printNumTwo() 返回了正确的值，因为 let 关键字创建了三个具有唯一值（0、1 和 2）的不同 i 变量在循环语句中。</p><h2 id="改变一个用-const-声明的数组"><a href="#改变一个用-const-声明的数组" class="headerlink" title="改变一个用 const 声明的数组"></a>改变一个用 const 声明的数组</h2><p>const 声明在现代 JavaScript 中有很多用例。</p><p>默认情况下，一些开发人员更喜欢使用 const 分配所有变量，除非他们知道需要重新分配值。 只有在这种情况下，他们才使用 let。</p><p>但是，重要的是要了解使用 const 分配给变量的对象（包括数组和函数）仍然是可变的。 使用 const 声明只能防止变量标识符的重新分配。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>s &#x3D; [1, 2, 3] 将导致错误。 console.log 将显示值 [5, 6, 45]。</p><p>如你所见，你可以改变对象 [5, 6, 7] 本身，变量 s 仍将指向更改后的数组 [5, 6, 45]。 像所有数组一样，s 中的数组元素是可变的，但是因为使用了 const，所以不能使用变量标识符 s 来指向一个使用赋值运算符的不同数组。</p><h2 id="防止对象改变"><a href="#防止对象改变" class="headerlink" title="防止对象改变"></a>防止对象改变</h2><p>通过之前的挑战可以看出，const 声明并不会真的保护数据不被改变。 为了确保数据不被改变，JavaScript 提供了一个函数 Object.freeze。</p><p>任何更改对象的尝试都将被拒绝，如果脚本在严格模式下运行，将抛出错误。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"FreeCodeCamp"</span><span class="token punctuation">,</span>  <span class="token literal-property property">review</span><span class="token operator">:</span><span class="token string">"Awesome"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>review <span class="token operator">=</span> <span class="token string">"bad"</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>newProp <span class="token operator">=</span> <span class="token string">"Test"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>obj.review 和 obj.newProp 赋值将导致错误，因为我们的编辑器默认在严格模式下运行，控制台将显示值 { name: “FreeCodeCamp”, review: “Awesome” }。</p><h2 id="使用箭头函数编写简洁的匿名函数"><a href="#使用箭头函数编写简洁的匿名函数" class="headerlink" title="使用箭头函数编写简洁的匿名函数"></a>使用箭头函数编写简洁的匿名函数</h2><p>在 JavaScript 里，我们会经常遇到不需要给函数命名的情况，尤其是在需要将一个函数作为参数传给另外一个函数的时候。 这时，我们会创建匿名函数。 因为这些函数不会在其他地方复用，所以我们不需要给它们命名。</p><p>这种情况下，我们通常会使用以下语法：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> myVar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ES6 提供了其他写匿名函数的方式的语法糖。 你可以使用箭头函数：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> myVar <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> myVar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当不需要函数体，只返回一个值的时候，箭头函数允许你省略 return 关键字和外面的大括号。 这样就可以将一个简单的函数简化成一个单行语句。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"value"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这段代码默认会返回字符串 value。</p><h2 id="编写带参数的箭头函数"><a href="#编写带参数的箭头函数" class="headerlink" title="编写带参数的箭头函数"></a>编写带参数的箭头函数</h2><p>和一般的函数一样，你也可以给箭头函数传递参数。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">doubler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">doubler</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>doubler(4) 将返回 8。</p><p>如果箭头函数只有一个参数，则可以省略参数外面的括号。</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">const doubler &#x3D; item &#x3D;&gt; item * 2;</code></pre><p>可以给箭头函数传递多个参数。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">multiplier</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> multi</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">*</span> multi<span class="token punctuation">;</span><span class="token function">multiplier</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>multiplier(4, 2) 将返回 8。</p><h2 id="设置函数的默认参数"><a href="#设置函数的默认参数" class="headerlink" title="设置函数的默认参数"></a>设置函数的默认参数</h2><p>ES6 里允许给函数传入默认参数，来构建更加灵活的函数。</p><p>请看以下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"Anonymous"</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示字符串 Hello John 和 Hello Anonymous。</p><p>默认参数会在参数没有被指定（值为 undefined）的时候起作用。 在上面的例子中，参数 name 会在没有得到新的值的时候，默认使用值 Anonymous。 你还可以给多个参数赋予默认值。</p><h2 id="将-rest-操作符与函数参数一起使用"><a href="#将-rest-操作符与函数参数一起使用" class="headerlink" title="将 rest 操作符与函数参数一起使用"></a>将 rest 操作符与函数参数一起使用</h2><p>ES6 推出了用于函数参数的 rest 操作符帮助我们创建更加灵活的函数。 rest 操作符可以用于创建有一个变量来接受多个参数的函数。 这些参数被储存在一个可以在函数内部读取的数组中。</p><p>请看以下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">howMany</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"You have passed "</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">" arguments."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">howMany</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">howMany</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示字符串 You have passed 3 arguments. 和 You have passed 4 arguments.。</p><p>使用 rest 参数，就不需要查看 args 数组，并且允许我们在参数数组上使用 map()、filter() 和 reduce()。</p><h2 id="使用-spread-运算符展开数组项"><a href="#使用-spread-运算符展开数组项" class="headerlink" title="使用 spread 运算符展开数组项"></a>使用 spread 运算符展开数组项</h2><p>ES6 引入了展开操作符，可以展开数组以及需要多个参数或元素的表达式。</p><p>下面的 ES5 代码使用了 apply() 来计算数组的最大值：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> maximus <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>maximus 的值为 89。</p><p>我们必须使用 Math.max.apply(null, arr)，因为 Math.max(arr) 返回 NaN。 Math.max() 函数中需要传入的是一系列由逗号分隔的参数，而不是一个数组。 展开操作符可以提升代码的可读性，使代码易于维护。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> maximus <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>maximus 的值应该是 89。</p><p>…arr 返回一个解压的数组。 也就是说，它展开数组。 然而，展开操作符只能够在函数的参数中或者数组中使用。 下面的代码将会报错：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> spreaded <span class="token operator">=</span> <span class="token operator">...</span>arr<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="使用解构赋值来获取对象的值"><a href="#使用解构赋值来获取对象的值" class="headerlink" title="使用解构赋值来获取对象的值"></a>使用解构赋值来获取对象的值</h3><p>解构赋值是 ES6 引入的新语法，用来从数组和对象中提取值，并优雅地对变量进行赋值。</p><p>有如下 ES5 代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Doe'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> name <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> user<span class="token punctuation">.</span>age<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>下面是使用 ES6 解构赋值语句，实现相同效果：</p><script>const { name, age } = user;</script><p>同样，name 的值应该是字符串 John Doe， age 的值应该是数字 34。</p><p>在这里，自动创建 name 和 age 变量，并将 user 对象相应属性的值赋值给它们。 这个方法简洁多了。</p><p>你可以从对象中提取尽可能多或很少的值。</p><h3 id="使用解构赋值从对象中分配变量"><a href="#使用解构赋值从对象中分配变量" class="headerlink" title="使用解构赋值从对象中分配变量"></a>使用解构赋值从对象中分配变量</h3><p>可以给解构的值赋予一个新的变量名， 通过在赋值的时候将新的变量名放在冒号后面来实现。</p><p>还是以上个例子的对象来举例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'John Doe'</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这是指定新的变量名的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> userName<span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> userAge <span class="token punctuation">&#125;</span> <span class="token operator">=</span> user<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>你可以这么理解这段代码：获取 user.name 的值，将它赋给一个新的变量 userName，等等。 userName 的值将是字符串 John Doe，userAge 的值将是数字 34。</p><h3 id="使用解构赋值从嵌套对象中分配变量"><a href="#使用解构赋值从嵌套对象中分配变量" class="headerlink" title="使用解构赋值从嵌套对象中分配变量"></a>使用解构赋值从嵌套对象中分配变量</h3><p>你可以使用前两节课程中相同的原则来解构嵌套对象中的值。</p><p>使用与前面的例子中类似的对象：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">johnDoe</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token literal-property property">email</span><span class="token operator">:</span> <span class="token string">'johnDoe@freeCodeCamp.com'</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这是解构对象的属性值赋值给具有相同名字的变量：</p><script>const { johnDoe: { age, email }} = user;</script><p>这是将对象的属性值赋值给具有不同名字的变量：</p><script>const { johnDoe: { age: userAge, email: userEmail }} = user;</script><h3 id="使用解构赋值从数组中分配变量"><a href="#使用解构赋值从数组中分配变量" class="headerlink" title="使用解构赋值从数组中分配变量"></a>使用解构赋值从数组中分配变量</h3><p>在 ES6 里面，解构数组可以如同解构对象一样简单。</p><p>与数组解构不同，数组的扩展运算会将数组里的所有内容分解成一个由逗号分隔的列表。 所以，你不能选择哪个元素来给变量赋值。</p><p>而对数组进行解构却可以让我们做到这一点：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示 a 和 b 的值为 1, 2。</p><p>数组的第一个值被赋值给变量 a，数组的第二个值被赋值给变量 b。 我们甚至能在数组解构中使用逗号分隔符，来获取任意一个想要的值：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示 a、b 和 c 的值为 1, 2, 5。</p><h3 id="使用解构赋值配合-rest-操作符来重新分配数组元素"><a href="#使用解构赋值配合-rest-操作符来重新分配数组元素" class="headerlink" title="使用解构赋值配合 rest 操作符来重新分配数组元素"></a>使用解构赋值配合 rest 操作符来重新分配数组元素</h3><p>在解构数组的某些情况下，我们可能希望将剩下的元素放进另一个数组里面。</p><p>以下代码的结果与使用 Array.prototype.slice() 类似：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>arr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示 1, 2 和 [3, 4, 5, 7]。</p><p>变量 a 和 b 分别接收数组的第一个和第二个值。 之后，因为 rest 操作符的存在，arr 获取了原数组剩余的元素的值。 rest 操作符只能对数组列表最后的元素起作用。 这意味着你不能使用 rest 操作符来截取原数组中间的元素作为子数组。</p><h3 id="使用解构赋值将对象作为函数的参数传递"><a href="#使用解构赋值将对象作为函数的参数传递" class="headerlink" title="使用解构赋值将对象作为函数的参数传递"></a>使用解构赋值将对象作为函数的参数传递</h3><p>在某些情况下，你可以在函数的参数里直接解构对象。</p><p>请看以下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">profileUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">profileData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> nationality<span class="token punctuation">,</span> location <span class="token punctuation">&#125;</span> <span class="token operator">=</span> profileData<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的操作解构了传给函数的对象。 这样的操作也可以直接在参数里完成：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">profileUpdate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> nationality<span class="token punctuation">,</span> location <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当 profileData 被传递到上面的函数时，从函数参数中解构出值以在函数内使用。</p><h2 id="使用模板字面量创建字符串"><a href="#使用模板字面量创建字符串" class="headerlink" title="使用模板字面量创建字符串"></a>使用模板字面量创建字符串</h2><p>模板字符串是 ES6 的另外一项新的功能。 这是一种可以轻松构建复杂字符串的方法。</p><p>模板字符串可以使用多行字符串和字符串插值功能。</p><p>请看以下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Zodiac Hasbro"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">56</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>person<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">!I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>person<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示字符串 Hello, my name is Zodiac Hasbro! 和 I am 56 years old.。</p><p>这里发生了许多事情。 首先，这个例子使用反引号（&#96;），而不是引号（’ 或者 “）将字符串括起来。 其次，注意代码和输出中的字符串都是多行的。 不需要在字符串中插入 \n。 上面使用的 ${variable} 语法是一个占位符。 这样一来，你将不再需要使用 + 运算符来连接字符串。 当需要在字符串里增加变量的时候，你只需要在变量的外面括上 ${ 和 }，并将其放在模板字符串里就可以了。 同样，你可以在字符串中包含其他表达式，例如 ${a + b}。 这个新的方式使你可以更灵活地创建复杂的字符串。</p><h2 id="使用简单字段编写简洁的对象字面量声明"><a href="#使用简单字段编写简洁的对象字面量声明" class="headerlink" title="使用简单字段编写简洁的对象字面量声明"></a>使用简单字段编写简洁的对象字面量声明</h2><p>ES6 添加了一些很棒的功能，用于更方便地定义对象。</p><p>请看以下代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">x</span><span class="token operator">:</span> x<span class="token punctuation">,</span>  <span class="token literal-property property">y</span><span class="token operator">:</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>getMousePosition 简单的函数，返回拥有两个属性的对象。 ES6 提供了一个语法糖，消除了类似 x: x 这种冗余的写法。 你可以只写一次 x，解释器会自动将其转换成 x: x（或效果相同的内容）。 下面是使用这种语法重写的同样的函数：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getMousePosition</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> x<span class="token punctuation">,</span> y <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="用-ES6-编写简洁的函数声明"><a href="#用-ES6-编写简洁的函数声明" class="headerlink" title="用 ES6 编写简洁的函数声明"></a>用 ES6 编写简洁的函数声明</h2><p>在 ES5 中，当我们需要在对象中定义一个函数的时候，必须像这样使用 function 关键字：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Taylor"</span><span class="token punctuation">,</span>  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello! My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>用 ES6 的语法在对象中定义函数的时候，可以删除 function 关键词和冒号。 请看以下例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Taylor"</span><span class="token punctuation">,</span>  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello! My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-class-语法定义构造函数"><a href="#使用-class-语法定义构造函数" class="headerlink" title="使用 class 语法定义构造函数"></a>使用 class 语法定义构造函数</h2><p>ES6 提供了一个新的创建对象的语法，使用关键字 class。</p><p>值得注意的是，class 只是一个语法糖，它并不像 Java、Python 或者 Ruby 这一类的语言一样，严格履行了面向对象的开发规范。</p><p>在 ES5 里面，我们通常会定义一个构造函数 constructor，然后使用 new 关键字来实例化一个对象：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">SpaceShuttle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">targetPlanet</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>targetPlanet <span class="token operator">=</span> targetPlanet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> zeus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpaceShuttle</span><span class="token punctuation">(</span><span class="token string">'Jupiter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>class 语法只是简单地替换了构造函数 constructor 的写法：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">class</span> <span class="token class-name">SpaceShuttle</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">targetPlanet</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>targetPlanet <span class="token operator">=</span> targetPlanet<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> zeus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpaceShuttle</span><span class="token punctuation">(</span><span class="token string">'Jupiter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>应该注意 class 关键字声明了一个新的函数，里面添加了一个构造函数。 当用 new 创建一个新的对象时，构造函数会被调用。</p><p><strong>注意</strong>：首字母大写驼峰命名法 UpperCamelCase 是 ES6 class 命名的惯例，就像上面的 SpaceShuttle。</p><p>constructor 方法是一个特殊方法，用于创建和初始化 class 创建的对象。 在 JavaScript 算法和数据结构认证的面向对象编程章节里会更深入介绍它。</p><h2 id="使用-getter-和-setter-来控制对象的访问"><a href="#使用-getter-和-setter-来控制对象的访问" class="headerlink" title="使用 getter 和 setter 来控制对象的访问"></a>使用 getter 和 setter 来控制对象的访问</h2><p>你可以从对象中获得一个值，也可以给对象的属性赋值。</p><p>这些操作通常被称为 getters 以及 setters。</p><p>Getter 函数的作用是可以让对象返回一个私有变量，而不需要直接去访问私有变量。</p><p>Setter 函数的作用是可以基于传进的参数来修改对象中私有变量。 这些修改可以是计算，或者是直接替换之前的值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">class</span> <span class="token class-name">Book</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">author</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_author <span class="token operator">=</span> author<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// getter</span>  <span class="token keyword">get</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_author<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// setter</span>  <span class="token keyword">set</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token parameter">updatedAuthor</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_author <span class="token operator">=</span> updatedAuthor<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> novel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token string">'anonymous'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>novel<span class="token punctuation">.</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span>novel<span class="token punctuation">.</span>writer <span class="token operator">=</span> <span class="token string">'newAuthor'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>novel<span class="token punctuation">.</span>writer<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>控制台将显示字符串 anonymous 和 newAuthor。</p><p>请注意用于调用 getter 和 setter 的语法。 它们甚至看起来不像是函数。 getter 和 setter 非常重要，因为它们隐藏了内部的实现细节。</p><p><strong>注意</strong>： 通常会在私有变量前添加下划线（_）。 然而，这种做法本身并不是将变量变成私有的。</p><h2 id="创建一个模块脚本"><a href="#创建一个模块脚本" class="headerlink" title="创建一个模块脚本"></a>创建一个模块脚本</h2><p>起初，JavaScript 几乎只在 HTML web 扮演一个很小的角色。 今天，一切不同了，很多网站几乎全是用 JavaScript 所写。 为了让 JavaScript 更模块化、更整洁以及更易于维护，ES6 引入了在多个 JavaScript 文件之间共享代码的机制。 它可以导出文件的一部分供其它文件使用，然后在需要它的地方按需导入。 为了使用这一功能， 需要在 HTML 文档里创建一个 type 为 module 的脚本。 例子如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filename.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>使用了 module 类型的脚本可以使用 import 和 export 特性（接下来的挑战会介绍）。</p><h2 id="用-export-来重用代码块"><a href="#用-export-来重用代码块" class="headerlink" title="用 export 来重用代码块"></a>用 export 来重用代码块</h2><p>假设有一个文件 math_functions.js，该文件包含了数学运算相关的一些函数。 其中一个存储在变量 add 里，该函数接受两个数字作为参数返回它们的和。 你想在几个不同的 JavaScript 文件中使用这个函数。 要实现这个目的，就需要 export 它。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面是导出单个函数常用方法，还可以这样导出：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>导出变量和函数后，就可以在其它文件里导入使用从而避免了代码冗余。 重复第一个例子的代码可以导出多个对象或函数，在第二个例子里面的导出语句中添加更多值也可以导出多项，例子如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="通过-import-复用-JavaScript-代码"><a href="#通过-import-复用-JavaScript-代码" class="headerlink" title="通过 import 复用 JavaScript 代码"></a>通过 import 复用 JavaScript 代码</h2><p>import 可以导入文件或模块的一部分。 在之前的课程里，例子从 math_functions.js 文件里导出了 add。 下面看一下如何在其它文件导入它：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> add <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./math_functions.js'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这里，import 会在 math_functions.js 里找到 add，只导入这个函数，忽略剩余的部分。 .&#x2F; 告诉程序在当前文件的相同目录寻找 math_functions.js 文件。 用这种方式导入时，相对路径（.&#x2F;）和文件扩展名（.js）都是必需的。</p><p>通过在 import 语句里添加项目，可以从文件里导入多个项目，如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> add<span class="token punctuation">,</span> subtract <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./math_functions.js'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="用-从文件中导入所有内容"><a href="#用-从文件中导入所有内容" class="headerlink" title="用 * 从文件中导入所有内容"></a>用 * 从文件中导入所有内容</h2><p>假设你有一个文件，你希望将其所有内容导入到当前文件中。 可以用 import * as 语法来实现。 下面是一个从同目录下的 math_functions.js 文件中导入所有内容的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myMathModule <span class="token keyword">from</span> <span class="token string">"./math_functions.js"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的 import 语句会创建一个叫作 myMathModule 的对象。 这只是一个变量名，可以随便命名。 对象包含 math_functions.js 文件里的所有导出，可以像访问对象的属性那样访问里面的函数。 下面是使用导入的 add 和 subtract 函数的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">myMathModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myMathModule<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="用-export-default-创建一个默认导出"><a href="#用-export-default-创建一个默认导出" class="headerlink" title="用 export default 创建一个默认导出"></a>用 export default 创建一个默认导出</h2><p>还需要了解另外一种被称为默认导出的 export 的语法。 在文件中只有一个值需要导出的时候，通常会使用这种语法。 它也常常用于给文件或者模块创建返回值。</p><p>下面是使用 export default 的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>第一个是命名函数，第二个是匿名函数。</p><p>export default 用于为模块或文件声明一个返回值，在每个文件或者模块中应当只默认导出一个值。 此外，你不能将 export default 与 var、let 或 const 同时使用。</p><h2 id="导入一个默认的导出"><a href="#导入一个默认的导出" class="headerlink" title="导入一个默认的导出"></a>导入一个默认的导出</h2><p>在上一个挑战里，学习了 export default 的用法。 还需要一种 import 的语法来导入默认的导出。 在下面的例子里，add 是 math_functions.js 文件的默认导出。 以下是如何导入它：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">"./math_functions.js"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这个语法有一处特别的地方， 被导入的 add 值没有被花括号（{}）所包围。 add 只是一个变量的名字，对应 math_functions.js 文件的任何默认导出值。 在导入默认导出时，可以使用任何名字。</p><h2 id="创建一个-JavaScript-Promise"><a href="#创建一个-JavaScript-Promise" class="headerlink" title="创建一个 JavaScript Promise"></a>创建一个 JavaScript Promise</h2><p>Promise 是异步编程的一种解决方案 - 它在未来的某时会生成一个值。 任务完成，分执行成功和执行失败两种情况。 Promise 是构造器函数，需要通过 new 关键字来创建。 构造器参数是一个函数，该函数有两个参数 - resolve 和 reject。 通过它们来判断 promise 的执行结果。 用法如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="通过-resolve-和-reject-完成-Promise"><a href="#通过-resolve-和-reject-完成-Promise" class="headerlink" title="通过 resolve 和 reject 完成 Promise"></a>通过 resolve 和 reject 完成 Promise</h2><p>Promise 有三个状态：pending、fulfilled 和 rejected。 上一个挑战里创建的 promise 一直阻塞在 pending 状态里，因为没有调用 promise 的完成方法。 Promise 提供的 resolve 和 reject 参数就是用来结束 promise 的。 Promise 成功时调用 resolve，promise 执行失败时调用 reject， 如下文所述，这些方法需要有一个参数。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> myPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>condition here<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Promise was fulfilled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"Promise was rejected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的示例使用字符串作为这些函数的参数，但参数实际上可以是任何格式。 通常，它可能是一个包含数据的对象，你可以将它放在网站或其他地方。</p><h2 id="用-then-处理-Promise-完成的情况"><a href="#用-then-处理-Promise-完成的情况" class="headerlink" title="用 then 处理 Promise 完成的情况"></a>用 then 处理 Promise 完成的情况</h2><p>当程序需要花费未知的时间才能完成时（比如一些异步操作），一般是服务器请求，promise 很有用。 服务器请求会花费一些时间，当结束时，需要根据服务器的响应执行一些操作。 这可以用 then 方法来实现， 当 promise 完成 resolve 时会触发 then 方法。 例子如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">myPromise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>result 即传入 resolve 方法的参数。</p><h2 id="使用-catch-处理-Promise-失败的情况"><a href="#使用-catch-处理-Promise-失败的情况" class="headerlink" title="使用 catch 处理 Promise 失败的情况"></a>使用 catch 处理 Promise 失败的情况</h2><p>当 promise 失败时会调用 catch 方法。 当 promise 的 reject 方法执行时会直接调用。 用法如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">myPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>error 是传入 reject 方法的参数。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础JavaScript</title>
      <link href="/2022/04/29/%E5%9F%BA%E7%A1%80JavaScript/"/>
      <url>/2022/04/29/%E5%9F%BA%E7%A1%80JavaScript/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 是一种用于网页交互的脚本语言。它和 HTML 和 CSS 一样，是网站的核心技术之一。所有现代浏览器都支持 JavaScript。</p><span id="more"></span><h2 id="给代码添加注释"><a href="#给代码添加注释" class="headerlink" title="给代码添加注释"></a>给代码添加注释</h2><p>被注释的代码块在 JavaScript 之中是不会执行的。 在代码中写注释，是一个可以让你自己和以后的其他人理解代码作用的好方法。</p><p>JavaScript有两种写注释的方法。</p><p>使用 &#x2F;&#x2F; 注释掉当前行的代码。 这是一个行内注释：</p><p>&#x2F;&#x2F; This is an in-line comment.<br>你也可以使用多行注释来注释你的代码，使用 &#x2F;* 开始， *&#x2F; 结束。 这是一个多行注释：</p><p>&#x2F;* This is a<br>multi-line comment *&#x2F;</p><blockquote><p><strong>最佳实践</strong>当你写代码的时候，你应该时不时的添加注释来解释你写的代码的作用。 适当的注释能让别人和你未来的自己更容易看懂代码。</p></blockquote><h2 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h2><p>在计算机科学中，数据就是一切，它对于计算机意义重大。 JavaScript 提供八种不同的数据类型，它们是 undefined（未定义）、null（空）、boolean（布尔型）、string（字符串）、symbol、number（数字）、bigint（可以表示任意大的整数）和 object（对象）。</p><p>例如，计算机区分数字，例如 12，和由字符组成的字符串 strings，例如 “12”、”dog” 或 “123 cats”。 计算机可以对数字执行数学运算，但不能对字符串执行数学运算。</p><p>变量允许计算机以一种动态的形式来存储和操作数据， 即通过操作指向数据的指针而不是数据本身来实现。 以上八种数据类型中的任何一种都可以存储到一个变量中。</p><p>变量非常类似于你在数学中使用的 x、y 变量，都是以一个简单命名的名称来代替我们赋值给它的数据。 计算机中的变量与数学中的变量不同的是，计算机可以在不同的时间存储不同类型的变量。</p><p>通过在变量前面使用关键字 var，声明一个变量，例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> ourName<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面代码的意思是创建一个名为 ourName 的变量。 在 JavaScript 中我们以分号结束语句。 </p><blockquote><p>注意: 变量名称可以由数字、字母、美元符号 $ 或者下划线 _ 组成，但是不能包含空格或者以数字为开头。</p></blockquote><h2 id="使用赋值运算符存储值"><a href="#使用赋值运算符存储值" class="headerlink" title="使用赋值运算符存储值"></a>使用赋值运算符存储值</h2><p>在 JavaScript 中，你可以使用赋值（assignment）运算符 （&#x3D;）将值存储在变量中。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">myVariable <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这条语句把 Number 类型的值 5 赋给变量 myVariable。</p><p>在将值赋给运算符左侧的变量之前，将先执行 &#x3D; 运算符右侧的所有运算。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> myVar<span class="token punctuation">;</span>myVar <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>首先，此代码创建一个名为 myVar 的变量。 然后，数值 5 被赋给变量 myVar。 现在，如果 myVar 再次出现在代码中，程序将会将它视为 5。</p><h2 id="使用赋值运算符存储值-1"><a href="#使用赋值运算符存储值-1" class="headerlink" title="使用赋值运算符存储值"></a>使用赋值运算符存储值</h2><p>在 JavaScript 中，你可以使用赋值（assignment）运算符 （&#x3D;）将值存储在变量中。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">myVariable <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这条语句把 Number 类型的值 5 赋给变量 myVariable。</p><p>在将值赋给运算符左侧的变量之前，将先执行 &#x3D; 运算符右侧的所有运算。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> myVar<span class="token punctuation">;</span>myVar <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>首先，此代码创建一个名为 myVar 的变量。 然后，数值 5 被赋给变量 myVar。 现在，如果 myVar 再次出现在代码中，程序将会将它视为 5。</p><h2 id="使用赋值运算符初始化变量"><a href="#使用赋值运算符初始化变量" class="headerlink" title="使用赋值运算符初始化变量"></a>使用赋值运算符初始化变量</h2><p>通常在声明变量的时候会给变量初始化一个初始值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> myVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>创建一个名为 myVar 的变量，并指定其初始值为 0。</p><h2 id="声明字符串变量"><a href="#声明字符串变量" class="headerlink" title="声明字符串变量"></a>声明字符串变量</h2><p>之前，你使用以下代码声明变量：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> myName<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>但是你也可以像这样声明一个字符串变量：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> myName <span class="token operator">=</span> <span class="token string">"your name"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>“your name” 被称为 string literal。 字符串文字或字符串是用单引号或双引号括起来的一系列零个或多个字符。</p><h2 id="理解未初始化的变量"><a href="#理解未初始化的变量" class="headerlink" title="理解未初始化的变量"></a>理解未初始化的变量</h2><p>当 JavaScript 中的变量被声明的时候，程序内部会给它一个初始值 undefined。 当你对一个值为 undefined 的变量进行运算操作的时候，算出来的结果将会是 NaN，它的意思是 “Not a Number”。 如果你用 undefined 变量连接一个字符串，你将得到一个 undefined 的 字符串。</p><h2 id="了解变量名区分大小写"><a href="#了解变量名区分大小写" class="headerlink" title="了解变量名区分大小写"></a>了解变量名区分大小写</h2><p>在 JavaScript 中所有的变量和函数名都是大小写敏感的。 要区别对待大写字母和小写字母。</p><p>MYVAR 与 MyVar 和 myvar 是不同的变量。 这有可能导致出现多个相似名字的变量。 所以强烈地建议你，为了保持代码清晰不要使用这一特性。</p><p>使用驼峰命名法（camelCase）来书写一个 Javascript 变量。 在驼峰命名法（camelCase）中，变量名的第一个单词的首写字母小写，后面的单词的第一个字母大写</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> someVariable<span class="token punctuation">;</span><span class="token keyword">var</span> anotherVariableName<span class="token punctuation">;</span><span class="token keyword">var</span> thisVariableNameIsSoLong<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="探索-var-和-let-关键字之间的差异"><a href="#探索-var-和-let-关键字之间的差异" class="headerlink" title="探索 var 和 let 关键字之间的差异"></a>探索 var 和 let 关键字之间的差异</h2><p>使用 var 关键字声明变量的最大问题之一是你可以轻松覆盖变量声明：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> camper <span class="token operator">=</span> <span class="token string">"James"</span><span class="token punctuation">;</span><span class="token keyword">var</span> camper <span class="token operator">=</span> <span class="token string">"David"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>camper<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在上面的代码中，camper 变量最初声明为 James，然后被覆盖为 David。 然后控制台显示字符串 David。</p><p>在小型应用程序中，你可能不会遇到此类问题。 但是随着你的代码库变大，你可能会意外地覆盖一个你不打算覆盖的变量。 由于此行为不会引发错误，因此搜索和修复错误变得更加困难。</p><p>ES6 中引入了一个名为 let 的关键字，这是对 JavaScript 的一次重大更新，以解决与 var 关键字有关的潜在问题。</p><p>如果将上面代码中的 var 替换为 let ，则会导致错误：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> camper <span class="token operator">=</span> <span class="token string">"James"</span><span class="token punctuation">;</span><span class="token keyword">let</span> camper <span class="token operator">=</span> <span class="token string">"David"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>该错误可以在你的浏览器控制台中看到。</p><p>所以不像 var，当你使用 let 时，同名的变量只能声明一次。</p><h2 id="使用-const-关键字声明只读变量"><a href="#使用-const-关键字声明只读变量" class="headerlink" title="使用 const 关键字声明只读变量"></a>使用 const 关键字声明只读变量</h2><p>关键字 let 并不是声明变量的唯一新方法。 在 ES6 中，你还可以使用 const 关键字声明变量。</p><p>const 具有 let 的所有出色功能，另外还有一个额外的好处，即使用 const 声明的变量是只读的。 它们是一个常量值，这意味着一旦一个变量被赋值为 const，它就不能被重新赋值：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> <span class="token constant">FAV_PET</span> <span class="token operator">=</span> <span class="token string">"Cats"</span><span class="token punctuation">;</span><span class="token constant">FAV_PET</span> <span class="token operator">=</span> <span class="token string">"Dogs"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>由于重新分配 FAV_PET 的值，控制台将显示错误。</p><p>你应该始终使用 const 关键字命名不想重新分配的变量。 这有助于避免给一个常量进行额外的再次赋值。</p><blockquote><p>注意： 通常，开发者会用大写字母作为常量标识符，用小写字母或者驼峰命名作为变量（对象或数组）标识符。</p></blockquote><h2 id="数字递增"><a href="#数字递增" class="headerlink" title="数字递增"></a>数字递增</h2><p>使用 ++，我们可以很容易地对变量进行自增或者 +1 运算。</p><p>i++;<br>等效于：</p><p>i &#x3D; i + 1;</p><blockquote><p>注意：i++; 这种写法省去了书写等号的必要。</p></blockquote><h2 id="数字递减"><a href="#数字递减" class="headerlink" title="数字递减"></a>数字递减</h2><p>使用自减符号 –，你可以很方便地对一个变量执行自减或者 -1 运算。</p><p>i–;<br>等效于：</p><p>i &#x3D; i - 1;</p><blockquote><p>注意：i–; 这种写法省去了书写等号的必要。</p></blockquote><h2 id="转义字符串中的引号"><a href="#转义字符串中的引号" class="headerlink" title="转义字符串中的引号"></a>转义字符串中的引号</h2><p>定义一个字符串必须要用单引号或双引号来包裹它。 那么当你的字符串里面包含引号 “ 或者 ‘ 时该怎么办呢?</p><p>在 JavaScript 中，可以通过在引号前面使用反斜杠（\）来转义引号。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> sampleStr <span class="token operator">=</span> <span class="token string">"Alan said, \"Peter is learning JavaScript\"."</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>有了转义符号，JavaScript 就知道这个单引号或双引号并不是字符串的结尾，而是字符串内的字符。 所以，上面的字符串打印到控制台的结果为：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Alan said<span class="token punctuation">,</span> <span class="token string">"Peter is learning JavaScript"</span><span class="token punctuation">.</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="用单引号引用字符串"><a href="#用单引号引用字符串" class="headerlink" title="用单引号引用字符串"></a>用单引号引用字符串</h2><p>JavaScript 中的字符串可以使用开始和结束都是同类型的单引号或双引号表示。 与其他一些编程语言不同的是，单引号和双引号的功能在 JavaScript 中是相同的。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> doubleQuoteStr <span class="token operator">=</span> <span class="token string">"This is a string"</span><span class="token punctuation">;</span> <span class="token keyword">const</span> singleQuoteStr <span class="token operator">=</span> <span class="token string">'This is also a string'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>当你需要在一个字符串中使用多个引号的时候，你可以使用单引号包裹双引号或者相反。 常见的场景比如在字符串中包含对话的句子需要用引号包裹。 另外比如在一个包含有 <a> 标签的字符串中，标签的属性值需要用引号包裹。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> conversation <span class="token operator">=</span> <span class="token string">'Finn exclaims to Jake, "Algebraic!"'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然而，如果你需要在其中使用外面的引号，这就成为一个问题。 记住，一个字符串在开头和结尾处有相同的引号。 要知道，字符串在开头和结尾都有相同的引号，如果在中间使用了相同的引号，字符串会提前中止并抛出错误。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> goodStr <span class="token operator">=</span> <span class="token string">'Jake asks Finn, "Hey, let\'s go on an adventure?"'</span><span class="token punctuation">;</span> <span class="token keyword">const</span> badStr <span class="token operator">=</span> <span class="token string">'Finn responds, "Let'</span>s go<span class="token operator">!</span>"'<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这里 badStr 会产生一个错误。</p><p>在上面的 goodStr 中，通过使用反斜杠 \ 转义字符可以安全地使用两种引号。</p><blockquote><p>提示： 不要混淆反斜杠 \ 和斜杠 &#x2F;。 它们不是一回事。</p></blockquote><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>引号不是字符串中唯一可以被转义（escaped）的字符。 使用转义字符有两个原因：</p><p>首先是可以让你使用无法输入的字符，例如退格。<br>其次是可以让你在一个字符串中表示多个引号，而不会出错。<br>我们在之前的挑战中学到了这个。</p><table><thead><tr><th align="center">代码</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\n</td><td align="center">换行符</td></tr><tr><td align="center">\r</td><td align="center">回车符</td></tr><tr><td align="center">\t</td><td align="center">制表符</td></tr><tr><td align="center">\b</td><td align="center">退格</td></tr><tr><td align="center">\f</td><td align="center">换页符</td></tr></tbody></table><blockquote><p>请注意，必须对反斜杠本身进行转义，它才能显示为反斜杠。</p></blockquote><h2 id="用加号运算符连接字符串"><a href="#用加号运算符连接字符串" class="headerlink" title="用加号运算符连接字符串"></a>用加号运算符连接字符串</h2><p>在 JavaScript 中，当 + 操作符被用于一个 String 类型的值的时候，它被称作拼接操作符。 你可以通过拼接其他字符串来创建一个新的字符串。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html">'My name is Alan,' + ' I concatenate.'</code></pre><p>提示： 注意空格。 拼接操作不会在两个字符串之间添加空格。所以，如果想加上空格的话，你需要自己在字符串里面添加。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourStr <span class="token operator">=</span> <span class="token string">"I come first. "</span> <span class="token operator">+</span> <span class="token string">"I come second."</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>字符串 I come first. I come second. 将显示在控制台中。</p><h2 id="用-x3D-运算符连接字符串"><a href="#用-x3D-运算符连接字符串" class="headerlink" title="用 +&#x3D; 运算符连接字符串"></a>用 +&#x3D; 运算符连接字符串</h2><p>我们还可以使用 +&#x3D; 运算符来拼接字符串到现有字符串变量的结尾。 对于那些被分割成几段的长的字符串来说，这一操作是非常有用的。</p><p>提示： 注意空格。 拼接操作不会在两个字符串之间添加空格，所以，如果想要加上空格的话，你需要自己在字符串里面添加。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> ourStr <span class="token operator">=</span> <span class="token string">"I come first. "</span><span class="token punctuation">;</span>ourStr <span class="token operator">+=</span> <span class="token string">"I come second."</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourStr 的值为字符串 I come first. I come second.</p><h2 id="用变量构造字符串"><a href="#用变量构造字符串" class="headerlink" title="用变量构造字符串"></a>用变量构造字符串</h2><p>有时候你需要创建一个类似 Mad Libs（填词游戏）风格的字符串。 通过使用连接运算符（+），你可以插入一个或多个变量来组成一个字符串。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourName <span class="token operator">=</span> <span class="token string">"freeCodeCamp"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ourStr <span class="token operator">=</span> <span class="token string">"Hello, our name is "</span> <span class="token operator">+</span> ourName <span class="token operator">+</span> <span class="token string">", how are you?"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourStr 值为 Hello, our name is freeCodeCamp, how are you?</p><h2 id="将变量追加到字符串"><a href="#将变量追加到字符串" class="headerlink" title="将变量追加到字符串"></a>将变量追加到字符串</h2><p>就像我们可以用多行字符串字面量构建单个字符串一样，我们还可以使用加且赋值（+&#x3D;）运算符将字符串追加到字符串的末尾。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> anAdjective <span class="token operator">=</span> <span class="token string">"awesome!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> ourStr <span class="token operator">=</span> <span class="token string">"freeCodeCamp is "</span><span class="token punctuation">;</span>ourStr <span class="token operator">+=</span> anAdjective<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourStr 值为 freeCodeCamp is awesome!。</p><h2 id="查找字符串的长度"><a href="#查找字符串的长度" class="headerlink" title="查找字符串的长度"></a>查找字符串的长度</h2><p>你可以通过在字符串变量或字符串后面写上 .length 来获得 String 的长度。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Alan Peter"</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>字符串 10 将会出现在控制台中。</p><p>例如，如果我们创建了一个变量 const firstName &#x3D; “Ada”，我们可以通过使用 firstName.length 找出字符串 Ada 的长度属性。</p><h2 id="使用方括号查找字符串中的字符"><a href="#使用方括号查找字符串中的字符" class="headerlink" title="使用方括号查找字符串中的字符"></a>使用方括号查找字符串中的字符</h2><p>方括号表示法（Bracket notation）是一种在字符串中的特定 index（索引）处获取字符的方法。</p><p>大多数现代编程语言，如 JavaScript，不同于人类从 1 开始计数。 它们是从 0 开始计数。 这被称为基于零（Zero-based）的索引。</p><p>例如，单词 Charles 的索引 0 的字符是 C。 所以如果 const firstName &#x3D; “Charles”，你可以通过 firstName[0] 得到字符串第一个字母的值。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token string">"Charles"</span><span class="token punctuation">;</span><span class="token keyword">const</span> firstLetter <span class="token operator">=</span> firstName<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>firstLetter 值为字符串 C 。</p><h2 id="了解字符串的不变性"><a href="#了解字符串的不变性" class="headerlink" title="了解字符串的不变性"></a>了解字符串的不变性</h2><p>在 JavaScript 中，字符串（String）的值是不可变的（immutable），这意味着一旦字符串被创建就不能被改变。</p><p>例如，下面的代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> myStr <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span>myStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"J"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>是不会把变量 myStr 的值改变成 Job 的，因为变量 myStr 是不可变的。 注意，这并不意味着 myStr 永远不能被改变，只是字符串字面量 string literal 的各个字符不能被改变。 改变 myStr 的唯一方法是重新给它赋一个值，例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> myStr <span class="token operator">=</span> <span class="token string">"Bob"</span><span class="token punctuation">;</span>myStr <span class="token operator">=</span> <span class="token string">"Job"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-JavaScript-数组将多个值存储在一个变量中"><a href="#使用-JavaScript-数组将多个值存储在一个变量中" class="headerlink" title="使用 JavaScript 数组将多个值存储在一个变量中"></a>使用 JavaScript 数组将多个值存储在一个变量中</h2><p>使用数组（array），我们可以在一个地方存储多个数据。</p><p>以左方括号开始定义一个数组，以右方括号结束，里面每个元素之间用逗号隔开，例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> sandwich <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"peanut butter"</span><span class="token punctuation">,</span> <span class="token string">"jelly"</span><span class="token punctuation">,</span> <span class="token string">"bread"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="将一个数组嵌套在另一个数组中"><a href="#将一个数组嵌套在另一个数组中" class="headerlink" title="将一个数组嵌套在另一个数组中"></a>将一个数组嵌套在另一个数组中</h2><p>您也可以在其他数组中嵌套数组，如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> teams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Bulls"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"White Sox"</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这也叫做多维数组（multi-dimensional array）。</p><h2 id="通过索引访问数组中的数据"><a href="#通过索引访问数组中的数据" class="headerlink" title="通过索引访问数组中的数据"></a>通过索引访问数组中的数据</h2><p>我们可以使用索引（indexes）来访问数组中的数据。</p><p>数组索引与字符串一样使用方括号来表示，不同的是，它们不是指定字符，而是指定数组中的一个条目。 数组索引与字符串索引一样是从 0 开始（zero-based）的，所以数组中第一个元素的索引编号是 0。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> data <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>现在 array[0] 的值是 50， data 的值为 60.</p><blockquote><p><strong>注意</strong>:数组名与方括号之间不应该有任何空格，比如array [0] 。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p></blockquote><h2 id="通过索引修改数组中的数据"><a href="#通过索引修改数组中的数据" class="headerlink" title="通过索引修改数组中的数据"></a>通过索引修改数组中的数据</h2><p>与字符串不同，数组的条目是 可变的 并且可以自由更改，即使数组是用 const 声明的。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ourArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourArray 值为 [15, 40, 30]。</p><h2 id="使用索引访问多维数组"><a href="#使用索引访问多维数组" class="headerlink" title="使用索引访问多维数组"></a>使用索引访问多维数组</h2><p>我们可以把多维数组看作成是数组中的数组。 使用方括号表示法访问数组时，第一个方括号访问的是数组的最外层（第一层），第二个方括号访问的是数组的第二层，以此类推。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>arr[3] 为 [[10, 11, 12], 13, 14]，arr[3][0] 为 [10, 11, 12]，并且 arr[3][0][1] 为 11。</p><p>注意： 数组名与方括号之间不应该有任何空格，比如 array [0][0] 甚至是 array [0] [0] 都是不允许的。 尽管 JavaScript 能够正确处理这种情况，但是当其他程序员阅读你写的代码时，这可能让他们感到困惑。</p><h2 id="使用-push-操作数组"><a href="#使用-push-操作数组" class="headerlink" title="使用 push() 操作数组"></a>使用 push() 操作数组</h2><p>一个将数据添加到数组末尾的简单方法是 push() 函数。</p><p>.push() 接受一个或多个参数（parameters），并把它压入到数组的末尾。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Stimpson"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"happy"</span><span class="token punctuation">,</span> <span class="token string">"joy"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>arr1 现在值为 [1, 2, 3, 4]，arr2 值为 [“Stimpson”, “J”, “cat”, [“happy”, “joy”]]。</p><h2 id="使用-pop-操作数组"><a href="#使用-pop-操作数组" class="headerlink" title="使用 pop() 操作数组"></a>使用 pop() 操作数组</h2><p>改变数组中数据的另一种方法是用 .pop() 函数。</p><p>.pop() 函数用来弹出一个数组末尾的值。 我们可以把这个弹出的值赋给一个变量存储起来。 换句话说就是 .pop() 函数移除数组末尾的元素并返回这个元素。</p><p>数组中任何类型的元素（数值，字符串，甚至是数组）都可以被弹出来 。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> threeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> oneDown <span class="token operator">=</span> threeArr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oneDown<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>threeArr<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>第一个 console.log 将显示值 6，第二个将显示值 [1, 4]。</p><h2 id="使用-shift-操作数组"><a href="#使用-shift-操作数组" class="headerlink" title="使用 shift() 操作数组"></a>使用 shift() 操作数组</h2><p>pop() 函数用来移出数组中最后一个元素。 如果想要移出第一个元素要怎么办呢？</p><p>这时候我们就需要 .shift() 了。 它的工作原理就像 .pop()，但它移除的是第一个元素，而不是最后一个。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Stimpson"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> removedFromOurArray <span class="token operator">=</span> ourArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>removedFromOurArray 值为 Stimpson，ourArray 值为 [“J”, [“cat”]]</p><h2 id="使用-unshift-操作数组"><a href="#使用-unshift-操作数组" class="headerlink" title="使用 unshift() 操作数组"></a>使用 unshift() 操作数组</h2><p>不仅可以 shift（移出）数组中的第一个元素，也可以 unshift（移入）一个元素到数组的头部。</p><p>.unshift() 函数用起来就像 .push() 函数一样，但不是在数组的末尾添加元素，unshift() 在数组的头部添加元素。</p><p>示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Stimpson"</span><span class="token punctuation">,</span> <span class="token string">"J"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ourArray<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ourArray<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">"Happy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在 shift、ourArray 后值为 [“J”, “cat”]。 在 unshift、ourArray 后值为 [“Happy”, “J”, “cat”]。</p><h2 id="用函数编写可重用代码"><a href="#用函数编写可重用代码" class="headerlink" title="用函数编写可重用代码"></a>用函数编写可重用代码</h2><p>在 JavaScript 中，我们可以把代码的重复部分抽取出来，放到一个函数 （functions）中。</p><p>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">functionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>你可以通过函数名加上后面的小括号来调用（invoke）这个函数，就像这样： functionName(); 每次调用函数时，它都会在控制台上打印消息 Hello World。 每次调用函数时，大括号之间的所有代码都将被执行。</p><h2 id="将值传递给带有参数的函数"><a href="#将值传递给带有参数的函数" class="headerlink" title="将值传递给带有参数的函数"></a>将值传递给带有参数的函数</h2><p>函数的参数 （parameters）在函数调用中充当传入函数的输入占位符（也叫形参）。 函数调用时，参数可以为一个或多个。 调用函数时输入（或传递 “passed”）的实际值被称为参数（arguments）。</p><p>这是带有两个参数的函数，param1 和 param2：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">testFun</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>param1<span class="token punctuation">,</span> param2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后我们可以调用 testFun，就像这样： testFun(“Hello”, “World”);。 我们传入了两个字符串参数， Hello 和 World。 在函数中，param1 等于字符串 Hello 以及 param2 等于字符串 World。 请注意，testFun 函数可以多次调用，每次调用时传递的参数会决定参数的实际值。</p><h2 id="使用-return-给函数返回值"><a href="#使用-return-给函数返回值" class="headerlink" title="使用 return 给函数返回值"></a>使用 return 给函数返回值</h2><p>我们可以通过函数的参数（arguments）把值传入函数， 也可以使用 return 语句把数据从一个函数中传出来。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">plusThree</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token function">plusThree</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>answer 的值为 8。</p><p>plusThree 带有一个参数（argument）num，并返回（return）一个等于 num + 3 的值。</p><h2 id="全局作用域和函数"><a href="#全局作用域和函数" class="headerlink" title="全局作用域和函数"></a>全局作用域和函数</h2><p>在 JavaScript 中，作用域涉及到变量的作用范围。 在函数外定义的变量具有<strong>全局</strong>作用域。 这意味着，具有全局作用域的变量可以在代码的任何地方被调用。</p><p>未使用 let 或 const 关键字声明的变量会在 global 范围内自动创建。 当在代码其他地方无意间定义了一个变量，刚好变量名与全局变量相同，这时会产生意想不到的后果。 你应该总是用 let 或 const 声明你的变量。</p><h2 id="局部作用域和函数"><a href="#局部作用域和函数" class="headerlink" title="局部作用域和函数"></a>局部作用域和函数</h2><p>在一个函数内声明的变量，以及该函数的参数都具有局部（local）作用域。 这意味着它们只在该函数内可见。</p><p>这是在函数 myTest 内声明局部变量 loc 的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> loc <span class="token operator">=</span> <span class="token string">"foo"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">myTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>loc<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>myTest() 函数调用将在控制台中显示字符串 foo。 console.log(loc) 行（在 myTest 函数之外）将抛出错误，因为 loc 未在函数之外定义。</p><h2 id="函数中的全局作用域和局部作用域"><a href="#函数中的全局作用域和局部作用域" class="headerlink" title="函数中的全局作用域和局部作用域"></a>函数中的全局作用域和局部作用域</h2><p>一个程序中有可能具有相同名称的局部变量 和全局变量。 在这种情况下，局部变量将会优先于全局变量。</p><p>下面为例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token string">"Hat"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> someVar <span class="token operator">=</span> <span class="token string">"Head"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> someVar<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>函数 myFun 将会返回字符串 Head，因为局部变量的优先级更高。</p><h2 id="函数也可以返回-undefined"><a href="#函数也可以返回-undefined" class="headerlink" title="函数也可以返回 undefined"></a>函数也可以返回 undefined</h2><p>函数一般用 return 语句来返回值，但这不是必须的。 在函数没有 return 语句的情况下，当你调用它时，该函数会执行内部代码，返回的值是 undefined。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">addSum</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  sum <span class="token operator">=</span> sum <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>addSum(3);<br>addSum 是一个没有 return 语句的函数。 该函数将更改全局变量 sum，函数的返回值为 undefined。</p><h2 id="使用返回值赋值"><a href="#使用返回值赋值" class="headerlink" title="使用返回值赋值"></a>使用返回值赋值</h2><p>如果你还记得我们在使用赋值运算符存储值中的讨论的话，等号右侧的所有操作都会在赋值之前完成。 这意味着我们可以获取函数的返回值，并将其赋值给一个变量。</p><p>假设我们有一个预先定义的函数 sum ，它将两个数相加，然后：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">ourSum <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>将调用 sum 函数，该函数返回 17 的值并将其分配给 ourSum 变量。</p><h2 id="排队"><a href="#排队" class="headerlink" title="排队"></a>排队</h2><p>在计算机科学中队列（queue）是一个抽象的数据结构（Data Structure），队列中的条目都是有秩序的。 新的条目会被加到队列的末尾，旧的条目会从队列的头部被移出。<br>例子:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">nextInLine</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只修改这一行下面的代码</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  a <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> b<span class="token punctuation">;</span>  <span class="token comment">// 只修改这一行上面的代码</span><span class="token punctuation">&#125;</span><span class="token comment">// 设置</span><span class="token keyword">const</span> testArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 显示代码</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Before: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">nextInLine</span><span class="token punctuation">(</span>testArr<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"After: "</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>testArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="理解布尔值"><a href="#理解布尔值" class="headerlink" title="理解布尔值"></a>理解布尔值</h2><p>另一种数据类型是布尔（Boolean）。 布尔值只能是两个值中的一个：true 或者 false。 它非常像电路开关，true 是 “开”，false 是 “关”。 这两种状态是互斥的。</p><blockquote><p>注意： 布尔值是不带引号的。 字符串 “true” 和 “false” 不是布尔值，在 JavaScript 中也没有特殊含义。</p></blockquote><h2 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等"></a>严格相等</h2><h3 id="严格相等运算符"><a href="#严格相等运算符" class="headerlink" title="严格相等运算符"></a>严格相等运算符</h3><p>严格相等运算符（&#x3D;&#x3D;&#x3D;）是相对相等操作符（&#x3D;&#x3D;）的另一种比较操作符。 与相等操作符转换数据两类型不同，严格相等运算符不会做类型转换。</p><p>如果比较的值类型不同，那么在严格相等运算符比较下它们是不相等的，会返回 false 。</p><p>示例</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">3 &#x3D;&#x3D;&#x3D;  3  &#x2F;&#x2F; true3 &#x3D;&#x3D;&#x3D; &#39;3&#39; &#x2F;&#x2F; false</code></pre><p>在第二个例子中，3 是一个 Number 类型，而 ‘3’ 是一个 String 类型。</p><h3 id="严格不等运算符"><a href="#严格不等运算符" class="headerlink" title="严格不等运算符"></a>严格不等运算符</h3><p>严格不相等运算符（!&#x3D;&#x3D;）与全等运算符是相反的。 这意味着严格不相等并返回 false 的地方，用严格相等运算符会返回 true，反之亦然。 严格不相等运算符不会转换值的数据类型。</p><p>示例</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">3 !&#x3D;&#x3D;  3  &#x2F;&#x2F; false3 !&#x3D;&#x3D; &#39;3&#39; &#x2F;&#x2F; true4 !&#x3D;&#x3D;  3  &#x2F;&#x2F; true</code></pre><h2 id="比较不同值"><a href="#比较不同值" class="headerlink" title="比较不同值"></a>比较不同值</h2><p>相等运算符 (&#x3D;&#x3D;) 和严格相等运算符 (&#x3D;&#x3D;&#x3D;),如果要比较的值不是同一类型，相等运算符会先执行数据类型转换，然后比较值。 而严格相等运算符只比较值，不会进行数据类型转换。</p><p>示例</p><p>3 &#x3D;&#x3D; ‘3’ 返回 true ，因为 JavaScript 执行了从字符串到数字类型的转换。 3 &#x3D;&#x3D;&#x3D; ‘3’ 返回 false，因为类型不同且类型转换没有执行。</p><p>提示 在 JavaScript 中，你可以使用 typeof 运算符确定变量或值的类型，如下所示：</p><pre class="language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">typeof 3typeof &#39;3&#39;</code></pre><p>typeof 3 返回字符串 number，typeof ‘3’ 返回字符串 string。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><h3 id="逻辑与运算符"><a href="#逻辑与运算符" class="headerlink" title="逻辑与运算符"></a>逻辑与运算符</h3><p>有时你需要在一次判断中做多个操作。 当且仅当运算符的左边和右边都是 true，逻辑与运算符（&amp;&amp;）才会返回 true。</p><p>同样的效果可以通过 if 语句的嵌套来实现：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">"No"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>只有当 num 的值大于 5 并且小于10 时才会返回 Yes。 相同的逻辑可被写为：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">"No"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="逻辑或运算符"><a href="#逻辑或运算符" class="headerlink" title="逻辑或运算符"></a>逻辑或运算符</h3><p>只要逻辑或运算符（||）两边的任何一个运算的结果是 true，则返回 true。 否则，返回 false。</p><p>逻辑或运算符由两个竖线（||）组成。 这个按键位于退格键和回车键之间。</p><p>下面这样的语句你应该很熟悉：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"No"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"No"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>只有当 num 大于等于 5 或小于等于 10 时，函数才返回 Yes。 相同的逻辑可以简写成：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">||</span> num <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">"No"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token string">"Yes"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="分支语句if与else"><a href="#分支语句if与else" class="headerlink" title="分支语句if与else"></a>分支语句if与else</h2><h3 id="用-if-语句来表达条件逻辑"><a href="#用-if-语句来表达条件逻辑" class="headerlink" title="用 if 语句来表达条件逻辑"></a>用 if 语句来表达条件逻辑</h3><p>if 语句用于在代码中做出决定。 关键字 if 告诉 JavaScript 在小括号中的条件为真的情况下去执行定义在大括号里面的代码。 这种条件被称为 Boolean 条件，因为他们只可能是 true（真）或 false（假）。</p><p>当条件的计算结果为 true，程序执行大括号内的语句。 当布尔条件的计算结果为 false，大括号内的代码将不会执行。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token parameter">myCondition</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>myCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"It was true"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token string">"It was false"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>test(true) 返回字符串 It was true，test(false) 返回字符串 It was false。</p><p>当 test 被调用，并且传递进来的参数值为 true 时，if 语句会计算 myCondition 的结果，看它是否为 true。 如果条件为 true，函数会返回 It was true。 当 test 被调用，并且传递进来的参数值为 false 时，myCondition 不 为 true，并且不执行大括号后面的语句，函数返回 It was false。</p><h3 id="if-else-语句中的逻辑顺序"><a href="#if-else-语句中的逻辑顺序" class="headerlink" title="if else 语句中的逻辑顺序"></a>if else 语句中的逻辑顺序</h3><p>if、else if 语句中的代码顺序是很重要的。</p><p>在条件判断语句中，代码的执行顺序是从上到下，所以你需要考虑清楚先执行哪一句，后执行哪一句。</p><p>这有两个例子。</p><p>第一个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Less than one"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Less than two"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Greater than or equal to two"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>第二个例子更改了代码的执行顺序：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Less than two"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Less than one"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Greater than or equal to two"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这两个函数看起来几乎一模一样，我们传一个值进去看看它们有什么区别。</p><p>foo(0)<br>bar(0)<br>foo(0) 将返回字符串 Less than one，bar(0) 将返回字符串 Less than two。</p><h2 id="分支语句switch"><a href="#分支语句switch" class="headerlink" title="分支语句switch"></a>分支语句switch</h2><h3 id="使用-Switch-语句从许多选项中进行选择"><a href="#使用-Switch-语句从许多选项中进行选择" class="headerlink" title="使用 Switch 语句从许多选项中进行选择"></a>使用 Switch 语句从许多选项中进行选择</h3><p>如果你有非常多的选项需要选择，可以使用 switch 语句。 switch 评估一个表达式，将表达式的值与 case 子句匹配。 从第一个匹配的 case 值执行语句，直到遇到 break。</p><p>这是 switch 语句的示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>lowercaseLetter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token string">"a"</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"b"</span><span class="token operator">:</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>测试 case 值使用严格相等（&#x3D;&#x3D;&#x3D;）运算符进行比较。 break 告诉 JavaScript 停止执行 switch 语句。 如果遗漏了 break ，下一个语句将会被执行。</p><h3 id="在-switch-语句中添加默认选项"><a href="#在-switch-语句中添加默认选项" class="headerlink" title="在 switch 语句中添加默认选项"></a>在 switch 语句中添加默认选项</h3><p>在 switch 语句中，你可能无法用 case 枚举出所有可能的值。 相反，你可以添加 default 语句，它会在找不到相匹配的 case 语句之后执行。 你可以把它看作是 if&#x2F;else 链中最后的那个 else 语句。</p><p>default 语句应该被放到最后。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>    statement1<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>    statement2<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">...</span>  <span class="token keyword">default</span><span class="token operator">:</span>    defaultStatement<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="在-Switch-语句添加多个相同选项"><a href="#在-Switch-语句添加多个相同选项" class="headerlink" title="在 Switch 语句添加多个相同选项"></a>在 Switch 语句添加多个相同选项</h3><p>如果你忘了给 switch 的每一条 case 添加 break，那么后续的 case 会一直执行，直到遇见 break 为止。 如果你想为 switch 中的多个不同的输入设置相同的结果，可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    result <span class="token operator">=</span> <span class="token string">"1, 2, or 3"</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    result <span class="token operator">=</span> <span class="token string">"4 alone"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这样，1、2、3 都会有相同的结果。</p><h3 id="用一个-Switch-语句来替代多个-if-else-语句"><a href="#用一个-Switch-语句来替代多个-if-else-语句" class="headerlink" title="用一个 Switch 语句来替代多个 if else 语句"></a>用一个 Switch 语句来替代多个 if else 语句</h3><p>如果你有多个选项需要选择，switch 语句写起来会比多个串联的 if&#x2F;else if 语句容易些。 譬如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  answer <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  answer <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  answer <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>可以被下面替代：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">switch</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    answer <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    answer <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    answer <span class="token operator">=</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="从函数返回布尔值"><a href="#从函数返回布尔值" class="headerlink" title="从函数返回布尔值"></a>从函数返回布尔值</h2><p>你应该还记得相等运算符这道挑战题。 在那里我们提到，所有比较操作符都会返回 boolean：要么是 true 要么是 false。</p><p>有时人们通过 if&#x2F;else 语句来做比较，像这样。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>但有更好的方式来达到相同的效果。 既然 &#x3D;&#x3D;&#x3D; 返回 true 或 false 我们可以直接返回比较结果：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">isEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">===</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="函数执行到-return-语句就结束"><a href="#函数执行到-return-语句就结束" class="headerlink" title="函数执行到 return 语句就结束"></a>函数执行到 return 语句就结束</h2><p>当代码执行到 return 语句时，函数返回一个结果就结束运行了，return 后面的语句不会执行。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token string">"World"</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"byebye"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上将在控制台中显示字符串 Hello 并返回字符串 World。 字符串 byebye 将永远不会在控制台中显示，因为函数在 return 语句处就退出了。</p><h2 id="创建-JavaScript-对象"><a href="#创建-JavaScript-对象" class="headerlink" title="创建 JavaScript 对象"></a>创建 JavaScript 对象</h2><p>你之前可能听过 object 这个词。</p><p>对象和 arrays 类似，区别在于数组使用索引来访问和修改数据，而对象中的数据是通过 properties 访问的。</p><p>对象非常适合用来存储结构化数据，可以表示真实世界中的物体，比如一只猫。</p><p>这里是一个猫对象的样本：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> cat <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Whiskers"</span><span class="token punctuation">,</span>  <span class="token string-property property">"legs"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token string-property property">"tails"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">"enemies"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Water"</span><span class="token punctuation">,</span> <span class="token string">"Dogs"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在此示例中，所有属性都存储为字符串，例如 name、legs 和 tails。 然而，你也可以使用数字作为属性。 你甚至可以省略单字字符串属性中的引号，如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> anotherObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">make</span><span class="token operator">:</span> <span class="token string">"Ford"</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token operator">:</span> <span class="token string">"five"</span><span class="token punctuation">,</span>  <span class="token string-property property">"model"</span><span class="token operator">:</span> <span class="token string">"focus"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然而，如果你的对象有非字符串属性的话，JavaScript 会自动将它们转为字符串。</p><h2 id="通过点号表示法访问对象属性"><a href="#通过点号表示法访问对象属性" class="headerlink" title="通过点号表示法访问对象属性"></a>通过点号表示法访问对象属性</h2><p>和访问数组类似，访问对象属性有两种方式：点号表示法（.）和方括号表示法（[]）。</p><p>如果我们已经提前知道要访问的属性名，使用点号表示法是最方便的。</p><p>这里是一个用点符号（.）读取对象属性的示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">prop1</span><span class="token operator">:</span> <span class="token string">"val1"</span><span class="token punctuation">,</span>  <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token string">"val2"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> prop1val <span class="token operator">=</span> myObj<span class="token punctuation">.</span>prop1<span class="token punctuation">;</span><span class="token keyword">const</span> prop2val <span class="token operator">=</span> myObj<span class="token punctuation">.</span>prop2<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>prop1val 的值将为字符串 val1，并且prop2val 的值将为字符串 val2。</p><h2 id="使用方括号表示法访问对象属性"><a href="#使用方括号表示法访问对象属性" class="headerlink" title="使用方括号表示法访问对象属性"></a>使用方括号表示法访问对象属性</h2><p>访问对象属性的第二种方式是方括号表示法（[]）。 如果你想访问的属性名中包含空格，就必须使用方括号表示法来获取它的属性值。</p><p>当然，如果属性名不包含空格，也可以使用方括号表示法。</p><p>这是一个使用方括号表示法读取对象属性的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"Space Name"</span><span class="token operator">:</span> <span class="token string">"Kirk"</span><span class="token punctuation">,</span>  <span class="token string-property property">"More Space"</span><span class="token operator">:</span> <span class="token string">"Spock"</span><span class="token punctuation">,</span>  <span class="token string-property property">"NoSpace"</span><span class="token operator">:</span> <span class="token string">"USS Enterprise"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>myObj<span class="token punctuation">[</span><span class="token string">"Space Name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myObj<span class="token punctuation">[</span><span class="token string">'More Space'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>myObj<span class="token punctuation">[</span><span class="token string">"NoSpace"</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>myObj[“Space Name”] 将会是字符串 Kirk，myObj[‘More Space’] 将会是字符串 Spock，并且myObj[“NoSpace”] 将会是字符串 USS Enterprise。</p><blockquote><p><strong>注意</strong>，如果属性名中包含空格，就必须使用引号（单引号或双引号）将它们包裹起来。</p></blockquote><h2 id="通过变量访问对象属性"><a href="#通过变量访问对象属性" class="headerlink" title="通过变量访问对象属性"></a>通过变量访问对象属性</h2><p>对对象上使用方括号表示法，还可以访问对象上作为变量值存储的属性。 当你需要遍历对象的所有属性，或者根据一个变量的值查找对应的属性值时，这种写法尤其适用。</p><p>以下是一个使用变量来访问属性的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> dogs <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">Fido</span><span class="token operator">:</span> <span class="token string">"Mutt"</span><span class="token punctuation">,</span>  <span class="token literal-property property">Hunter</span><span class="token operator">:</span> <span class="token string">"Doberman"</span><span class="token punctuation">,</span>  <span class="token literal-property property">Snoopie</span><span class="token operator">:</span> <span class="token string">"Beagle"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> myDog <span class="token operator">=</span> <span class="token string">"Hunter"</span><span class="token punctuation">;</span><span class="token keyword">const</span> myBreed <span class="token operator">=</span> dogs<span class="token punctuation">[</span>myDog<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myBreed<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>字符串 Doberman 将会出现在控制台中。</p><p>使用这一概念的另一种情况是：属性的名字是在程序运行期间动态收集得到的。如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> someObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">propName</span><span class="token operator">:</span> <span class="token string">"John"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">propPrefix</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token string">"prop"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> s <span class="token operator">+</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> someProp <span class="token operator">=</span> <span class="token function">propPrefix</span><span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someObj<span class="token punctuation">[</span>someProp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>someProp 的值将为字符串 propName，并且字符串 John 将会出现在控制台中。</p><p>注意，当使用变量名访问属性时，我们没有使用引号包裹它，因为我们正在使用的是变量的值，而不是变量的名字。</p><h2 id="更新对象属性"><a href="#更新对象属性" class="headerlink" title="更新对象属性"></a>更新对象属性</h2><p>在你创建了 JavaScript 对象后，你可以随时更新它的属性，就像更新任何其他变量那样。 你可以使用点或中括号操作符来更新。</p><p>举个例子，让我们看看 ourDog：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourDog <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Camper"</span><span class="token punctuation">,</span>  <span class="token string-property property">"legs"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token string-property property">"tails"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"everything!"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>既然他是一个特别愉快的狗，让我们将他的名字更改为字符串 Happy Camper。 这有两种方式来更新对象的 name 属性： ourDog.name &#x3D; “Happy Camper”; 或 ourDog[“name”] &#x3D; “Happy Camper”;。更新后，ourDog.name 的值就不再是 Camper，而是 Happy Camper。</p><h2 id="给-JavaScript-对象添加新属性"><a href="#给-JavaScript-对象添加新属性" class="headerlink" title="给 JavaScript 对象添加新属性"></a>给 JavaScript 对象添加新属性</h2><p>你也可以像更改属性一样给 JavaScript 对象添加属性。</p><p>这里展示了如何给 ourDog 添加一个属性 bark：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">ourDog<span class="token punctuation">.</span>bark <span class="token operator">=</span> <span class="token string">"bow-wow"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>或者</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">ourDog<span class="token punctuation">[</span><span class="token string">"bark"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bow-wow"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>现在，当我们执行 ourDog.bark 时，就能得到他的叫声，bow-wow。</p><p>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourDog <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Camper"</span><span class="token punctuation">,</span>  <span class="token string-property property">"legs"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token string-property property">"tails"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"everything!"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourDog.bark &#x3D; “bow-wow”;</p><h2 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h2><p>我们同样可以删除对象的属性，例如：</p><p>delete ourDog.bark;<br>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourDog <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Camper"</span><span class="token punctuation">,</span>  <span class="token string-property property">"legs"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token string-property property">"tails"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"everything!"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"bark"</span><span class="token operator">:</span> <span class="token string">"bow-wow"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>delete ourDog.bark;<br>在上面代码的最后一行中，ourDog 是这样的：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"Camper"</span><span class="token punctuation">,</span>  <span class="token string-property property">"legs"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token string-property property">"tails"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string-property property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"everything!"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用对象进行查找"><a href="#使用对象进行查找" class="headerlink" title="使用对象进行查找"></a>使用对象进行查找</h2><p>对象和字典一样，可以用来存储键&#x2F;值对。 如果数据是扁平的，你可以用对象来查找你想要的值，而不是链式使用 switch 或 if&#x2F;else 语句。 当你知道你的输入数据在某个范围时，这种查找方式极为有效。</p><p>这是简单的反向字母表：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> alpha <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token number">1</span><span class="token operator">:</span><span class="token string">"Z"</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">:</span><span class="token string">"Y"</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token operator">:</span><span class="token string">"X"</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token operator">:</span><span class="token string">"W"</span><span class="token punctuation">,</span>  <span class="token operator">...</span>  <span class="token number">24</span><span class="token operator">:</span><span class="token string">"C"</span><span class="token punctuation">,</span>  <span class="token number">25</span><span class="token operator">:</span><span class="token string">"B"</span><span class="token punctuation">,</span>  <span class="token number">26</span><span class="token operator">:</span><span class="token string">"A"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>alpha<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>alpha<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>alpha<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>alpha[2] 是字符串 Y，alpha[24] 是字符串 C，alpha[value] 是字符串 Y。</p><h2 id="测试对象的属性"><a href="#测试对象的属性" class="headerlink" title="测试对象的属性"></a>测试对象的属性</h2><p>有时检查一个对象属性是否存在是非常有用的。 我们可以用对象的 .hasOwnProperty(propname) 方法来检查对象是否有指定的属性。 .hasOwnProperty() 找到该属性时返回 true，找不到该属性时返回 false。</p><p>示例</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token string">"hat"</span><span class="token punctuation">,</span>  <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token string">"pants"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"top"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myObj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"middle"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>第一个 hasOwnProperty 返回 true，第二个返回 false。</p><h2 id="操作复杂对象"><a href="#操作复杂对象" class="headerlink" title="操作复杂对象"></a>操作复杂对象</h2><p>有时你可能希望将数据存储在一个灵活的数据结构（Data Structure）中。 JavaScript 对象是一种灵活的数据结构。 它可以储存字符串（strings）、数字（numbers）、布尔值（booleans）、数组（arrays）、函数（functions）和对象（objects）以及这些值的任意组合。</p><p>这是一个复杂数据结构的示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourMusic <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token string-property property">"artist"</span><span class="token operator">:</span> <span class="token string">"Daft Punk"</span><span class="token punctuation">,</span>    <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token string">"Homework"</span><span class="token punctuation">,</span>    <span class="token string-property property">"release_year"</span><span class="token operator">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>    <span class="token string-property property">"formats"</span><span class="token operator">:</span> <span class="token punctuation">[</span>       <span class="token string">"CD"</span><span class="token punctuation">,</span>       <span class="token string">"Cassette"</span><span class="token punctuation">,</span>       <span class="token string">"LP"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"gold"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这是一个包含一个对象的数组。 该对象有关于专辑的各种元数据（metadata）。 它也有一个嵌套的 formats 数组。 可以将专辑添加到顶级数组来增加更多的专辑记录。 对象将数据以一种键 - 值对的形式保存。 在上面的示例中，”artist”: “Daft Punk” 有一个键为 artist 值为 Daft Punk 的属性。 JavaScript Object Notation 简称 JSON 是可以用于存储数据的数据交换格式。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"artist"</span><span class="token operator">:</span> <span class="token string">"Daft Punk"</span><span class="token punctuation">,</span>  <span class="token string-property property">"title"</span><span class="token operator">:</span> <span class="token string">"Homework"</span><span class="token punctuation">,</span>  <span class="token string-property property">"release_year"</span><span class="token operator">:</span> <span class="token number">1997</span><span class="token punctuation">,</span>  <span class="token string-property property">"formats"</span><span class="token operator">:</span> <span class="token punctuation">[</span>     <span class="token string">"CD"</span><span class="token punctuation">,</span>    <span class="token string">"Cassette"</span><span class="token punctuation">,</span>    <span class="token string">"LP"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string-property property">"gold"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><blockquote><p><strong>提示</strong>：数组中有多个 JSON 对象的时候，对象与对象之间要用逗号隔开。</p></blockquote><h2 id="访问嵌套对象"><a href="#访问嵌套对象" class="headerlink" title="访问嵌套对象"></a>访问嵌套对象</h2><p>我们可以通过连续使用点号表示法和方括号表示法来访问对象的嵌套属性。</p><p>这是一个嵌套对象：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourStorage <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"desk"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"drawer"</span><span class="token operator">:</span> <span class="token string">"stapler"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"cabinet"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"top drawer"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>       <span class="token string-property property">"folder1"</span><span class="token operator">:</span> <span class="token string">"a file"</span><span class="token punctuation">,</span>      <span class="token string-property property">"folder2"</span><span class="token operator">:</span> <span class="token string">"secrets"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">"bottom drawer"</span><span class="token operator">:</span> <span class="token string">"soda"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>ourStorage<span class="token punctuation">.</span>cabinet<span class="token punctuation">[</span><span class="token string">"top drawer"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>folder2<span class="token punctuation">;</span>ourStorage<span class="token punctuation">.</span>desk<span class="token punctuation">.</span>drawer<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourStorage.cabinet[“top drawer”].folder2 将会是字符串 secrets，并且 ourStorage.desk.drawer 将会是字符串 stapler。</p><h2 id="访问嵌套数组"><a href="#访问嵌套数组" class="headerlink" title="访问嵌套数组"></a>访问嵌套数组</h2><p>在之前的挑战中，我们学习了在对象中嵌套对象和数组。 与访问嵌套对象类似，数组的方括号可以用来对嵌套数组进行链式访问。</p><p>下面是访问嵌套数组的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourPets <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">animalType</span><span class="token operator">:</span> <span class="token string">"cat"</span><span class="token punctuation">,</span>    <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"Meowzer"</span><span class="token punctuation">,</span>      <span class="token string">"Fluffy"</span><span class="token punctuation">,</span>      <span class="token string">"Kit-Cat"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">animalType</span><span class="token operator">:</span> <span class="token string">"dog"</span><span class="token punctuation">,</span>    <span class="token literal-property property">names</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"Spot"</span><span class="token punctuation">,</span>      <span class="token string">"Bowser"</span><span class="token punctuation">,</span>      <span class="token string">"Frankie"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ourPets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ourPets<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourPets[0].names[1] 应该是字符串 Fluffy， 并且 ourPets[1].names[0] 应该是字符串 Spot。</p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>你可以使用循环多次执行相同的代码。</p><p>我们将学习的第一种类型的循环称为 while 循环，当 while 指定的条件为真，循环才会执行，反之不执行。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ourArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在上面的代码里，while 循环执行 5 次把 0 到 4 的数字添加到 ourArray 数组里。</p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>你可以使用循环多次执行相同的代码。</p><p>JavaScript 中最常见的循环就是 for，它可以循环指定次数。</p><p>for 循环中的可选三个表达式用分号隔开：</p><p>for (a; b; c)，其中a为初始化语句，b为条件语句，c 是最终的表达式。</p><p>初始化语句只会在执行循环开始之前执行一次。 它通常用于定义和设置你的循环变量。</p><p>循环条件语句会在每一轮循环的开始前执行，只要条件判断为 true 就会继续执行循环。 当条件为 false 的时候，循环将停止执行。 这意味着，如果条件在一开始就为 false，这个循环将不会执行。</p><p>终止循环表达式在每次循环迭代结束， 在下一个条件检查之前时执行，通常用来递增或递减循环计数。</p><p>在下面的例子中，先初始化 i &#x3D; 0，条件 i &lt; 5 为 true 时，进入循环。 每次循环后 i 的值增加 1，然后执行终止循环条件表达式 i++。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ourArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>ourArray 现在的值为 [0, 1, 2, 3, 4]。</p><h2 id="使用-For-循环遍历数组"><a href="#使用-For-循环遍历数组" class="headerlink" title="使用 For 循环遍历数组"></a>使用 For 循环遍历数组</h2><p>JavaScript 中的一个常见任务是遍历数组的内容。 一种方法是使用 for 循环。 下面的代码将输出数组 arr 的每个元素到控制台：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>记住数组的索引从零开始的，这意味着数组的最后一个元素的下标是：length - 1（数组的长度 -1）。 我们这个循环的条件是 i &lt; arr.length，当 i 的值为 length 的时候循环就停止了。 在这个例子中，最后一个循环是 i &#x3D;&#x3D;&#x3D; 4，也就是说，当 i 的值等于 arr.length - 1 时，结果输出 6。 然后 i 增加到 5，循环会终止，因为 i &lt; arr.length 是 false。</p><h2 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h2><p>如果你有一个二维数组，可以使用相同的逻辑，先遍历外面的数组，再遍历里面的子数组。 下面是一个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这里一次输出了 arr 中的每个子元素。 提示，对于内部循环，我们可以通过 arr[i] 的 .length 来获得子数组的长度，因为 arr[i] 本身就是一个数组。</p><h2 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h2><p>下一种循环叫作 do…while 循环。 它被称为 do…while 循环，是因为不论什么情况，它都会首先 do（运行）循环里的第一部分代码，然后 while（当）规定的条件被评估为 true（真）的时候，它会继续运行循环。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  ourArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上面的示例行为类似于其他类型的循环，由此产生的数组将看起来像 [0, 1, 2, 3, 4]。 然而，do…while 不同于其他循环的地方，是第一次循环检查失败时的行为。 让我们看看代码中的区别：这里是一个常规的 while 循环，只要 i &lt; 5，就会在循环中运行代码：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  ourArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这个例子中，定义了一个空数组 ourArray 以及一个值为 5 的 i 。 当执行 while 循环时，因为 i 不小于 5，所以循环条件为 false，循环内的代码将不会执行。 ourArray 最终没有添加任何内容，因此示例中的所有代码执行完时，ourArray 仍然是[]。 现在，看一下 do…while 循环。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> ourArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>  ourArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>在这里，和使用 while 循环一样，将 i 的值初始化为 5。 执行下一行时，没有执行循环检查，直接执行花括号内的代码。 数组会添加一个元素，并在进行条件检查之前递增 i。 然后，在条件检查时因为 i 等于 6 不符合条件 i &lt; 5，所以退出循环。 最终 ourArray 的值是 [5]。 本质上，do…while 循环确保循环内的代码至少运行一次。 让我们通过 do…while 循环将值添加到数组中。</p><h2 id="使用递归代替循环"><a href="#使用递归代替循环" class="headerlink" title="使用递归代替循环"></a>使用递归代替循环</h2><p>递归是函数调用自身的操作。 为了便于理解，有如下任务：计算数组内元素前 n 的元素乘积。 使用 for 循环， 可以这样做：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      product <span class="token operator">*=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> product<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>下面是递归写法，注意代码里的 multiply(arr, n) &#x3D;&#x3D; multiply(arr, n - 1) * arr[n - 1]。 这意味着可以重写 multiply 以调用自身而无需依赖循环。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">multiply</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>递归版本的 multiply 详述如下。 在 base case 里，也就是 n &lt;&#x3D; 0 时，返回 1。 在 n 比 0 大的情况里，函数会调用自身，参数 n 的值为 n - 1。 函数以相同的方式持续调用 multiply，直到 n &lt;&#x3D; 0 为止。 所以，所有函数都可以返回，原始的 multiply 返回结果。</p><blockquote><p><strong>注意</strong>： 递归函数在没有函数调用时（在这个例子是，是当 n &lt;&#x3D; 0 时）必需有一个跳出结构，否则永远不会执行完毕。</p></blockquote><h2 id="使用-JavaScript-生成随机整数"><a href="#使用-JavaScript-生成随机整数" class="headerlink" title="使用 JavaScript 生成随机整数"></a>使用 JavaScript 生成随机整数</h2><p>生成随机小数很棒，但随机数更有用的地方在于生成随机整数。</p><p>用 Math.random() 生成一个随机小数。<br>把这个随机小数乘以 20。<br>用 Math.floor() 向下取整，获得它最近的整数。<br>记住 Math.random() 永远不会返回 1。同时因为我们是在向下取整，所以最终我们获得的结果不可能有 20。 这确保了我们获得了一个在 0 到 19 之间的整数。</p><p>把操作连缀起来，代码类似于下面：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>我们先调用 Math.random()，把它的结果乘以 20，然后把上一步的结果传给 Math.floor()，最终通过向下取整获得最近的整数。</p><h2 id="生成某个范围内的随机整数"><a href="#生成某个范围内的随机整数" class="headerlink" title="生成某个范围内的随机整数"></a>生成某个范围内的随机整数</h2><p>我们之前生成的随机数是在 0 到某个数之间，现在我们要生成的随机数是在两个指定的数之间。</p><p>我们需要定义一个最小值 min 和一个最大值 max。</p><p>下面是我们将要使用的方法， 仔细看看并尝试理解这行代码到底在干嘛：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-parseInt-函数"><a href="#使用-parseInt-函数" class="headerlink" title="使用 parseInt 函数"></a>使用 parseInt 函数</h2><p>parseInt() 函数解析一个字符串返回一个整数。 下面是一个示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"007"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>上述函数将字符串 007 转换为整数 7。 如果字符串中的第一个字符不能转换为数字，则返回 NaN。</p><h2 id="使用-parseInt-函数并传入一个基数"><a href="#使用-parseInt-函数并传入一个基数" class="headerlink" title="使用 parseInt 函数并传入一个基数"></a>使用 parseInt 函数并传入一个基数</h2><p>parseInt() 函数解析一个字符串并返回一个整数。 它还可以传入第二个参数，指定了字符串中数字的基数。 基数可以是 2 到 36 之间的整数。</p><p>函数调用如下所示：</p><p>parseInt(string, radix);<br>这是一个示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>变量 radix 表示 11 是在二进制系统中。 这个示例将字符串 11 转换为整数 3。</p><h2 id="使用三元运算符"><a href="#使用三元运算符" class="headerlink" title="使用三元运算符"></a>使用三元运算符</h2><p>条件运算符（ conditional operator,）（也称为三元运算符（ ternary operator））的就像写成一行的 if-else 表达式</p><p>语法是：a ? b : c, where a 是条件，当条件返回 true 的时候运行代码 b，当条件返回 false 的时候运行代码 c。</p><p>以下函数使用 if&#x2F;else 语句来检查条件：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">findGreater</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"a is greater"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"b is greater or equal"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>这可以使用三元运算符重写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">findGreater</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> a <span class="token operator">></span> b <span class="token operator">?</span> <span class="token string">"a is greater"</span> <span class="token operator">:</span> <span class="token string">"b is greater or equal"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用多个三元运算符"><a href="#使用多个三元运算符" class="headerlink" title="使用多个三元运算符"></a>使用多个三元运算符</h2><p>你也可以将多个运算符串联在一起以检查多种条件。</p><p>下面的函数使用 if，else if 和 else 语句来检查多个条件：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">findGreaterOrEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"a and b are equal"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"a is greater"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"b is greater"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上函数可以使用多个三元运算符重写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">findGreaterOrEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a and b are equal"</span>     <span class="token operator">:</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a is greater"</span>     <span class="token operator">:</span> <span class="token string">"b is greater"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>如上文所示，对多个三元运算符进行每个条件都是单独一行的格式化被认为是最佳做法。 使用多个三元运算符而没有适当的缩进可能会使您的代码难以理解。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">findGreaterOrEqual</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a and b are equal"</span> <span class="token operator">:</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"a is greater"</span> <span class="token operator">:</span> <span class="token string">"b is greater"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用递归创建一个倒计时"><a href="#使用递归创建一个倒计时" class="headerlink" title="使用递归创建一个倒计时"></a>使用递归创建一个倒计时</h2><p>现在来学习一个更复杂的函数，函数返回一个从 1 到传递给函数的指定数字的连续数字数组。</p><p>会有一个 base case。 base case 告诉递归函数什么时候不再需要调用其自身。 这是简单 情况，返回得到的值。 还有 recursive call，继续用不同的参数调用自身。 如果函数无误，一直执行直到 base case 为止。</p><p>比如，如果想写一个递归函数，返回一个数字 1 到 n 的连续数组。 这个函数需要接收一个参数 n 代表最终数字。 然后会持续的调用自身，传入一个比 n 更小的值一直到传入的值是 1 为止。 函数如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">function</span> <span class="token function">countup</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> countArray <span class="token operator">=</span> <span class="token function">countup</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    countArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> countArray<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">countup</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>值 [1, 2, 3, 4, 5] 将显示在控制台中。</p><p>起初，这似乎是违反直觉的，因为 n 的值递减，但是最终数组中的值却递增。 之所以发生这种情况，是因为在递归调用返回之后，才调用 push。 在将 n pushed 进数组时，countup(n - 1) 已经调用赋值成功并返回了 [1, 2, …, n - 1]。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript算法和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计项目</title>
      <link href="/2022/04/16/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/04/16/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>CSS 网格是一个较新的标准，用于构建复杂的响应布局。它通过把 HTML 元素转换为具有行和列的网格容器，以便将子元素放置在所需要的位置。</p><span id="more"></span><h2 id="制作一个致敬页"><a href="#制作一个致敬页" class="headerlink" title="制作一个致敬页"></a>制作一个致敬页</h2><p>目标： 在 CodePen.io 上创建一个与这个功能类似的 app：<a href="https://codepen.io/freeCodeCamp/full/zNqgVx%E3%80%82">https://codepen.io/freeCodeCamp/full/zNqgVx。</a></p><p>在满足以下 需求 并能通过所有测试的前提下， 你可以根据自己的喜好来美化你的 app。</p><p>你可以使用 HTML、JavaScript 以及 CSS 来完成项目。 由于目前你只学到了 CSS 课程，所以我们建议你只使用 CSS 来完成这个项目，同时巩固一下你之前所学的内容。 你也可以使用 Bootstrap 或者 SASS。</p><p>需求 1： 此 app 中应存在一个 id&#x3D;”main” 的元素，页面上的所有元素都应置于这个元素中。</p><p>需求 2： 此 app 中应存在一个 id&#x3D;”title” 的元素，其中包含描述致敬页主题的字符串文本，如 “Dr. Norman Borlaug”。</p><p>需求 3： 此 app 中应存在一个 id&#x3D;”img-div” 的 figure 或 div 元素。</p><p>需求 4： 在 img-div 元素内，应存在一个 id&#x3D;”image” 的 img 元素。</p><p>需求 5： 在 img-div 元素内，应存在一个相应的 id&#x3D;”img-caption” 的元素，其中包含对 img-div 中图像的描述文本。</p><p>需求 6： 此 app 中应存在一个 id&#x3D;”tribute-info” 的元素，其中应包含描述致敬页主题的内容文本。</p><p>需求 7： 此 app 中应存在一个 id&#x3D;”tribute-link” 的 a 元素，它应链接到一个包含有关致敬页主题额外信息的外部网页。 提示：你必须为 a 元素提供 target 属性，并将其属性值设置为 _blank（即 target&#x3D;”_blank”），这样才可以在新选项卡中打开链接。</p><p>需求 8： img 元素应相对于其父元素的宽度自动调整大小，但不超过图片的原始大小。</p><p>需求 9： img 应在其父元素内居中。</p><p>代码:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>致敬页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#img-div</span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*#title&#123;*/</span><span class="token comment">/*text-align: center;*/</span><span class="token comment">/*padding: 20px 0 0 0;*/</span><span class="token comment">/*margin: 10px 0 0 0;*/</span><span class="token comment">/*&#125;*/</span><span class="token selector">h1</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 20px 0 10px 0<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 20px 0 0 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#img-caption</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">ul</span><span class="token punctuation">&#123;</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span> 0 auto 20px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">footer div</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>艾萨克·牛顿<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://ts1.cn.mm.bing.net/th?id=OIP-C.ib7d1lCwRHAND480o0Z_2gAAAA&amp;w=146&amp;h=159&amp;c=8&amp;rs=1&amp;qlt=90&amp;o=6&amp;dpr=1.25&amp;pid=3.1&amp;rm=2<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛顿图片<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img-caption<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>艾萨克·牛顿爵士,是一位英格兰物理学家、数学家、天文学家、自然哲学家和炼金术士。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tribute-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这里是一些他的生平事迹:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1643年1月4日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,艾萨克·牛顿出生于英国英格兰东米德兰林肯郡南凯斯蒂文科尔斯沃斯村畔伍尔索普的伍尔索普庄园。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1661年6月<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>，他进入了剑桥大学的三一学院。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1665年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,他发现了广义二项式定理，并开始发展一套新的数学理论，也就是后来为世人所熟知的微积分学。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>同年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿获得了学位,而大学为了预防伦敦大瘟疫而关闭了。在此后两年里，牛顿在家中继续研究微积分学、光学和万有引力定律。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1667年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿获得奖学金，作为研究生重返剑桥大学三一学院。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1669年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿被授予卢卡斯数学教授席位。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1696年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿通过当时的财政大臣查尔斯·孟塔古的提携迁到伦敦作皇家铸币厂的监管，一直到去世。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1703年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿成为皇家学会会长和法国科学院的会员。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>1727年3月31日<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>,牛顿在伦敦睡梦中辞世，享寿八十四岁。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>如果你有时间，你应该在他的维基百科条目上阅读关于这个不可思议的人的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tribute-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://zh.wikipedia.org/wiki/%E8%89%BE%E8%90%A8%E5%85%8B%C2%B7%E7%89%9B%E9%A1%BF<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更多信息.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="制作一个调查表格"><a href="#制作一个调查表格" class="headerlink" title="制作一个调查表格"></a>制作一个调查表格</h2><p>目标： 在 CodePen.io 上创建一个与这个功能类似的 app：<a href="https://codepen.io/freeCodeCamp/full/VPaoNP%E3%80%82">https://codepen.io/freeCodeCamp/full/VPaoNP。</a></p><p>在满足以下 需求 并能通过所有测试的前提下， 你可以根据自己的喜好来美化你的 app。</p><p>你可以使用 HTML、JavaScript 以及 CSS 来完成项目。 由于目前你只学到了 CSS 课程，所以我们建议你只使用 CSS 来完成这个项目，同时巩固一下你之前所学的内容。 你也可以使用 Bootstrap 或者 SASS。</p><p>需求 1： 此 app 中应存在一个 id&#x3D;”title” 的大小为 H1 的标题。</p><p>需求 2： 此 app 中应存在一段 id&#x3D;”description” 的大小为 P 的短小的描述。</p><p>需求 3： 此 app 中应存在一个 id&#x3D;”survey-form” 的 form 元素。</p><p>需求 4： 在表单元素内，应存在 id&#x3D;”name” 的输入框（必填项），以便用户输入姓名。</p><p>需求 5： 在表单元素内，应存在 id&#x3D;”email” 的输入框（必填项），以便用户输入邮箱。</p><p>需求 6： 如果用户输入了格式不正确的邮箱，则应出现来自 HTML5 表单数据校验的错误信息。</p><p>需求 7： 在表单内，用户应可以在 id&#x3D;”number” 的输入框中输入数字。</p><p>需求 8： 如果用户在数字输入框内输入非数字内容，则应出现来自 HTML5 表单数据校验的错误信息。</p><p>需求 9： 如果用户输入的数字超出了使用 min 和 max 属性定义的范围，则应出现来自 HTML5 表单数据校验的错误信息。</p><p>需求 10： 表单中的姓名、邮箱和数字输入框需有对应的包含描述输入框用途的标签。这些标签的 id 应分别为 id&#x3D;”name-label”、id&#x3D;”email-label” 和 id&#x3D;”number-label”。</p><p>需求 11： 表单中的姓名、邮箱和数字输入框需有对应的描述文字作为占位符。</p><p>需求 12： 在表单元素内，应存在一个 id&#x3D;”dropdown” 的下拉列表，用户可以从中选取一个选项。</p><p>需求 13： 在表单元素内，应至少存在一组单选按钮，用户可以从中选取一个选项。 每组应使用 name 属性进行分组。</p><p>需求 14： 在表单元素内，应存在几个复选框，且每个复选框都应有 value 属性。</p><p>需求 15： 在表单元素的最后，应存在一个 textarea 元素，以便用户输入额外的批注。</p><p>需求 16： 在表单元素内，应存在一个 id&#x3D;”submit” 的按钮，以便用户提交表单。</p><p>代码:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>调查表格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"https://tse4-mm.cn.bing.net/th/id/OIP-C.VhIblAtfCEDml3nFKzhSSAHaFL?w=257&amp;h=180&amp;c=7&amp;r=0&amp;o=5&amp;dpr=1.12&amp;pid=1.7"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">form</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>42<span class="token punctuation">,</span>42<span class="token punctuation">,</span>72<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 650px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#one label</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">fieldset</span><span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#one input</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0.375rem<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#head</span><span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#title</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 -5px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">select</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid white<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">textarea</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">button</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>freeCodeCamp调查问卷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>感谢您花时间帮助我们改进平台<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>survey-form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.html<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年龄:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>年龄<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>哪个选项最能描述您目前的角色?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">selected</span> <span class="token attr-name">value</span><span class="token punctuation">></span></span>选择当前角色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>全职工作者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>learner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>半工半学<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preferNo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>还是不说为好<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>其他<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>你会向家人朋友推荐freeCodeCamp吗?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        肯定                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maybe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        也许                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Not-sure<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        不确定                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>four<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>您希望看到哪些方面的改进?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Front-end<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>前端项目<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        前端项目                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Back-end<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>后端项目<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        后端项目                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Data-Visualization<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>数据可视化<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        数据可视化                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Challenges<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>挑战<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        挑战                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Open-Community<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开源社区<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        开源社区                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gitter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>git帮助房间<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        git帮助房间                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>City<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>城市聚会<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        城市聚会                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Wiki<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>维基<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        维基                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>five<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>您有什么意见或建议吗?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在这里留下您的评论<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>six<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="制作一个产品登录页"><a href="#制作一个产品登录页" class="headerlink" title="制作一个产品登录页"></a>制作一个产品登录页</h2><p>目标： 在 CodePen.io 上创建一个与这个功能类似的 app：<a href="https://codepen.io/freeCodeCamp/full/RKRbwL%E3%80%82">https://codepen.io/freeCodeCamp/full/RKRbwL。</a></p><p>你可以使用 HTML、JavaScript 以及 CSS 来完成项目。 由于目前你只学到了 CSS 课程，所以我们建议你只使用 CSS 来完成这个项目，同时巩固一下你之前所学的内容。 你也可以使用 Bootstrap 或者 SASS。 </p><p>需求 1： 产品登录页应存在 id&#x3D;”header” 的 header 元素。</p><p>需求 2： 在 header 元素内应存在 id&#x3D;”header-img” 的图像， 这里通常用来放置公司的 logo。</p><p>需求 3： 在 #header 元素内，应存在一个 id&#x3D;”nav-bar” 的 nav 元素。</p><p>需求 4： nav 元素中应至少包含三个 class 为 nav-link 且可点击的元素。</p><p>需求 5： 当点击 nav 内的 .nav-link 按钮时，应滚动到产品主页上相应的部分。</p><p>需求 6： 页面上应存在 id&#x3D;”video” 的嵌入式视频播放区域。</p><p>需求 7： 产品登陆页应存在一个 id&#x3D;”form” 的 form 元素。</p><p>需求 8： 在表单中，应存在一个 id&#x3D;”email” 的 input 输入框供用户填写邮箱。</p><p>需求 9： #email 输入框内应存在描述该区域用途的占位符文字。</p><p>需求 10： #email 输入框应使用 HTML5 验证来确认输入的内容是否为邮箱。</p><p>需求 11： 在表单中，应存在一个 id&#x3D;”submit” 的 input 提交按钮。</p><p>需求 12： 当点击 #submit 元素时，应将邮箱信息提交到一个静态页面（请使用这个模拟的 URL：<a href="https://www.freecodecamp.com/email-submit%EF%BC%89%E3%80%82">https://www.freecodecamp.com/email-submit）。</a></p><p>需求 13： navbar 应保持在视口（viewport）的顶部。</p><p>需求 14： 在此 app 中，应至少使用一次媒体查询。</p><p>需求 15： 在此 app 中，应至少使用一次 CSS 的 flexbox 布局。</p><p>代码:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>产品登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">header</span><span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">min-height</span><span class="token punctuation">:</span> 45px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0 20px 0 0<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightsteelblue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.logo</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60vw<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.logo > img</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">nav > ul</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 35vw<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hero</span><span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#email</span><span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#submit</span><span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 33px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#features</span><span class="token punctuation">&#123;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#features .desc</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80vw<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 0 500px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*视频样式*/</span>        <span class="token selector">#how-it-works > iframe</span><span class="token punctuation">&#123;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 100px 0 0 500px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*定价样式*/</span>        <span class="token selector">#pricing</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.product</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.level</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightsteelblue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#pricing ol</span><span class="token punctuation">&#123;</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0 0 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">ol li</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0 0 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.btn</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0 15px 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>241<span class="token punctuation">,</span>196<span class="token punctuation">,</span>15<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid white<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">h2</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 0 0 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">footer div</span><span class="token punctuation">&#123;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 65%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> lightsteelblue<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 20px 0 0 270px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*导航栏链接样式*/</span>        <span class="token selector">.nav-link</span><span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.nav-link:link</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.nav-link:hover</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.nav-link:visited</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-img<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/testable-projects-fcc/images/product-landing-page-logo.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#hero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>特性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#video<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>它是如何工作的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#pricing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>定价<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>您可以使用邮箱来订阅我们的产品以获取最新消息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.com/email-submit<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>在此处输入您的邮箱<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>订阅<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>features<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>优质的材料<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我们的长号使用本地采购的最闪亮的铜管。这将增加您购买的寿命。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>快速航运<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我们保证一做好长号您就能收到。如果您不满意，我们还提供免费退货。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>质量保证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>对于您的每一次购买，我们将确保没有损坏或故障，我们将检查和测试您的乐器的音高。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>how-it-works<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>315<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.youtube-nocookie.com/embed/y8Yv4pnO7qc?rel=0&amp;controls=0&amp;showinfo=0<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">allowfullscreen</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pricing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tenor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高音长号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum dolor.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>订购<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高音长号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>900<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum dolor.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>订购<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>高音长号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>1200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum dolor.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Lorem ipsum.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>订购<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Copyright 2016, Original Trombones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="制作一个技术文档页面"><a href="#制作一个技术文档页面" class="headerlink" title="制作一个技术文档页面"></a>制作一个技术文档页面</h2><p>目标： 在 CodePen.io 上创建一个与这个功能类似的 app：<a href="https://codepen.io/freeCodeCamp/full/NdrKKL%E3%80%82">https://codepen.io/freeCodeCamp/full/NdrKKL。</a></p><p>在满足以下 需求 并能通过所有测试的前提下， 你可以根据自己的喜好来美化你的 app。</p><p>你可以使用 HTML、JavaScript 以及 CSS 来完成项目。 由于目前你只学到了 CSS 课程，所以我们建议你只使用 CSS 来完成这个项目，同时巩固一下你之前所学的内容。 你也可以使用 Bootstrap 或者 SASS。 我们不推荐你在这个项目中使用其他技术（比如 jQuery、React、Angular 或 Vue）。 在后续的其他项目中，你将有机会使用像是 React 等其他技术栈。 我们会接受并尝试修复你在使用推荐技术栈创建项目时报告的问题。 祝你编码愉快！</p><p>需求 1： 此 app 中应存在一个 id&#x3D;”main-doc” 的 main 元素，它包含页面的主要内容（技术文档）。</p><p>需求 2： 在 #main-doc 元素内，应有一些 section 元素，每个元素的 class 都应为 main-section。 应存在至少 5 个这样的元素。</p><p>需求 3： 每个 .main-section 内的第一个元素应为 header 元素，其中包含描述该部分主题的内容文本。</p><p>需求 4： 类名为 main-section 的每个 section 元素都应有一个与包含在其中的每个 header 的文本相对应的 id， 所有空格都应该被替换为下划线（例如，包含标题 “JavaScript and Java” 的 section 应有一个相应的 id&#x3D;”JavaScript_and_Java”）。</p><p>需求 5： 所有 .main-section 元素内总计应有至少 10 个 p 元素。</p><p>需求 6： 所有 .main-section 元素内总计应有至少 5 个 code 元素。</p><p>需求 7： 所有 .main-section 元素内总计应有至少 5 个 li 元素。</p><p>需求 8： 此 app 中应存在一个 id&#x3D;”navbar” 的 nav 元素。</p><p>需求 9： navbar 元素内应有一个 header 元素，其中包含描述技术文档主题的内容文本。</p><p>需求 10： 此外，navbar 元素应包含 class 为 nav-link 的 a 元素， 每个 class 为 main-section 的元素都需要有一个。</p><p>需求 11： navbar 中的 header 元素应置于 navbar 中所有 a 元素之前。</p><p>需求 12： 所有 class 为 nav-link 的元素都需要包含与 section 中 header 相应的内容文本。例如，对于一个文本为 “Hello world” 的一节或标题，你的 navbar 中也应存在一个内容文本为 “Hello world” 的元素。</p><p>需求 13： 当点击 navbar 中一个元素时，页面应滚动到 main-doc 中的相应部分。例如，点击文本为 “Hello world” 的 nav-link 元素的时候，页面应滚动到包含相同内容的 header 和 id 所处的 section 元素。</p><p>需求 14： 在常规尺寸的设备上（如笔记本电脑和台式机），id&#x3D;”navbar” 的元素应显示在屏幕左侧，且始终对用户可见。</p><p>需求 15： 在此 app 中，应至少使用一次媒体查询。</p><p>代码;</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>技术文档<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#main-doc header</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 0 0 305px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">section article</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #4d4e53<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 15px 0 0 320px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 0.96em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">code</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 2.5<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navbar</span><span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">min-width</span><span class="token punctuation">:</span> 290px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>            <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 0.4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navbar header</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.2em<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navbar ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 88%<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navbar li</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #4d4e53<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">nav</span><span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">main</span><span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.link</span><span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.link:link</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.link:hover</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> powderblue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.link:visited</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>JS Documentation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#Introduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Introduction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#What_you_should_already_know<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What you should already know<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#JavaScript_and_Java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JavaScript and Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#Hello_world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#Variables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#Declaring_variables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Declaring variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>link<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#Variable_scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Variable scope<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-doc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Introduction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Introduction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>JavaScript is a cross-platform, object-oriented scripting language.                    It is a small and lightweight language.                    Inside a host environment (for example, a web browser),                    JavaScript can be connected to the objects of its environment to                    provide programmatic control over them.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>JavaScript contains a standard library of objects,                    such as Array, Date, and Math, and a core set of language elements such as operators, control structures,                    and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>What_you_should_already_know<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>What you should already know<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This guide assumes you have the following basic background:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>A general understanding of the Internet and the World Wide Web (WWW).<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Good working knowledge of HyperText Markup Language (HTML).<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about JavaScript.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavaScript_and_Java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>JavaScript and Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                    JavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                    In contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>                    JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello_world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>function greetMe(yourName) &#123; alert("Hello " + yourName); &#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>                greetMe("World");<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Select the code in the pad and hit Ctrl+R to watch it unfold in your browser!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Variables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers. You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, and _name.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Declaring_variables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Declaring variables<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You can declare a variable in three ways:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>With the keyword var. For example,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>var x = 42.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This syntax can be used to declare both local and global variables.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>By simply assigning it a value. For example,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>x = 42.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This always declares a global variable. It generates a strict JavaScript warning. You shouldn't use this variant.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>With the keyword let. For example,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>let y = 13.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This syntax can be used to declare a block scope local variable. See Variable scope below.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-section<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Variable_scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Variable scope<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>JavaScript before ECMAScript 2015 does not have block statement scope; rather, a variable declared within a block is local to the function (or global scope) that the block resides within. For example the following code will log 5, because the scope of x is the function (or global context) within which x is declared, not the block, which in this case is an if statement.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>if (true) &#123; var x = 5; &#125; console.log(x); // 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This behavior changes, when using the let declaration introduced in ECMAScript 2015.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>if (true) &#123; let y = 5; &#125; console.log(y); // ReferenceError: y is not                    defined<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="制作一个个人作品集展示页"><a href="#制作一个个人作品集展示页" class="headerlink" title="制作一个个人作品集展示页"></a>制作一个个人作品集展示页</h2><p>目标： 在 CodePen.io 上创建一个与这个功能类似的 app：<a href="https://codepen.io/freeCodeCamp/full/zNBOYG%E3%80%82">https://codepen.io/freeCodeCamp/full/zNBOYG。</a></p><p>在满足以下需求并能通过所有测试的前提下， 你可以根据自己的喜好来美化你的 app。</p><p>你可以使用 HTML、JavaScript 以及 CSS 来完成项目。 由于目前你只学到了 CSS 课程，所以我们建议你只使用 CSS 来完成这个项目，同时巩固一下你之前所学的内容。 你也可以使用 Bootstrap 或者 SASS。 </p><p>需求 1： 此 app 中应存在一个 id 为 welcome-section 的欢迎区。</p><p>需求 2： 欢迎区内应存在一个包含标题文本的 h1 元素。</p><p>需求 3： 此 app 中应存在一个 id 为 projects 的项目展示区。</p><p>需求 4： 项目展示区应至少包含一个 class 为 project-tile 的元素来展示项目。</p><p>需求 5： 项目展示区应至少包含一个链接到项目的超链接元素。</p><p>需求 6： 此 app 中应存在一个 id 为 navbar 的导航栏。</p><p>需求 7： 导航栏中应包含一个可以滚动到本页面不同区域的链接。</p><p>需求 8： 此 app 中应包含一个 id 为 profile-link 的链接。 点击这个链接时，它应在浏览器的新标签页内打开我的 GitHub 或者 FCC 作品集页面。</p><p>需求 9： 在此 app 中，应至少使用一次媒体查询。</p><p>需求 10： 欢迎区的高度应该与视口的高度保持一致。</p><p>需求 11： 导航栏应始终保持在视口顶部。</p><p>代码:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>个人作品集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>            <span class="token property">--main-white</span><span class="token punctuation">:</span> #f0f0f0<span class="token punctuation">;</span>            <span class="token property">--main-red</span><span class="token punctuation">:</span> #be3144<span class="token punctuation">;</span>            <span class="token property">--main-blue</span><span class="token punctuation">:</span> #45567d<span class="token punctuation">;</span>            <span class="token property">--main-gray</span><span class="token punctuation">:</span> #303841<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*导航栏样式*/</span>        <span class="token selector">#navbar</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.nav-list</span><span class="token punctuation">&#123;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.nav-list a</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 1.8rem<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 15px 40px 0 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*链接样式*/</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*欢迎区样式*/</span>        <span class="token selector">#welcome-section</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-gray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#welcome-section h1</span><span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#welcome-section p</span><span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-red<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*项目区样式*/</span>        <span class="token selector">#projects</span><span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10rem 2rem<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-blue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.projects-section-header</span> <span class="token punctuation">&#123;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto 8rem auto<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 0.4rem solid <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.projects-grid</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>320px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">grid-gap</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 1280px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.project-image</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid black<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.projects-grid div</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> -5px 0 0 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.code</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*联系区样式*/</span>        <span class="token selector">#contact</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80vh<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0 2rem<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-gray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.contact-header</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-white<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.contact-link ul</span><span class="token punctuation">&#123;</span>           <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.contact-link li</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px 30px 0 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#welcome-section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>关于我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#projects<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作品集<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>welcome-section<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>嘿,我是last embryo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>一个开发者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>projects<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>projects-section-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这些是我的项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>projects-grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://codepen.io/last-embryo/details/MWrqEKN<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project project-tile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/testable-projects-fcc/images/tribute.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>致敬页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://codepen.io/last-embryo/pen/eYyoLEN<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project project-tile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/testable-projects-fcc/images/random-quote-machine.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>调查问卷<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://codepen.io/last-embryo/pen/eYywdRa<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project project-tile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/testable-projects-fcc/images/calc.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>project-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>产品页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>让我们一起工作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contact-link<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>github<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://twitter.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>twitter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mailto:example@example.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>send a email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-CSS网格</title>
      <link href="/2022/04/14/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-CSS%E7%BD%91%E6%A0%BC/"/>
      <url>/2022/04/14/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-CSS%E7%BD%91%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>CSS 网格是一个较新的标准，用于构建复杂的响应布局。它通过把 HTML 元素转换为具有行和列的网格容器，以便将子元素放置在所需要的位置。</p><span id="more"></span><h2 id="创建你的第一个-CSS-网格"><a href="#创建你的第一个-CSS-网格" class="headerlink" title="创建你的第一个 CSS 网格"></a>创建你的第一个 CSS 网格</h2><p>通过将属性 display 的值设为 grid，HTML 元素就可以变为网格容器。 通过前面的操作，你可以对该容器使用与 CSS 网格（CSS Grid）相关的属性。</p><blockquote><p>注意： 在 CSS 网格中，父元素称为容器（container），它的子元素称为项（items）。</p></blockquote><h2 id="使用-grid-template-columns-添加多列"><a href="#使用-grid-template-columns-添加多列" class="headerlink" title="使用 grid-template-columns 添加多列"></a>使用 grid-template-columns 添加多列</h2><p>简单地添加一个网格元素并不会有任何明显的效果。 你还需要明确网格的结构。 在一个网格容器中使用 grid-template-columns 属性可以添加一些列，示例如下：</p><pre class="language-none"><code class="language-none">.container &#123;  display: grid;  grid-template-columns: 50px 50px;&#125;</code></pre><p>上面的代码会在网格容器中添加两列，宽度均为 50px。 grid-template-columns 属性值的个数表示网格的列数，每个值表示相应的列宽度。</p><h2 id="使用-grid-template-rows-添加多行"><a href="#使用-grid-template-rows-添加多行" class="headerlink" title="使用 grid-template-rows 添加多行"></a>使用 grid-template-rows 添加多行</h2><p>在上面的示例中，你创建的网格会自动设置行数。 要手动调整行，请使用 grid-template-rows 属性，就像在上一个挑战中使用 grid-template-columns 属性一样。</p><h2 id="使用-CSS-网格单位来更改列和行的大小"><a href="#使用-CSS-网格单位来更改列和行的大小" class="headerlink" title="使用 CSS 网格单位来更改列和行的大小"></a>使用 CSS 网格单位来更改列和行的大小</h2><p>在 CSS 网格中，可以使用绝对单位（如 px）或相对单位（如 em）来定义行或列的大小。 下面的单位也可以使用：</p><ul><li>fr：设置列或行占剩余空间的比例，</li><li>auto：设置列宽或行高自动等于它的内容的宽度或高度，</li><li>%：将列或行调整为它的容器宽度或高度的百分比，<br>以下代码为右侧预览区中的效果：<pre class="language-none"><code class="language-none">grid-template-columns: auto 50px 10% 2fr 1fr;</code></pre>这段代码添加了五个列。 第一列的宽与它的内容宽度相等；第二列宽 50px；第三列宽是它容器的 10%；最后两列，将剩余的宽度平均分成三份，第四列占两份，第五列占一份。<h2 id="使用-grid-column-gap-创建多列之间的间距"><a href="#使用-grid-column-gap-创建多列之间的间距" class="headerlink" title="使用 grid-column-gap 创建多列之间的间距"></a>使用 grid-column-gap 创建多列之间的间距</h2>目前为止，在你所创建的网格中，每列都相互紧挨着。 有时候你想要列之间有一个间距。 如果需要在列与列之间添加一些间距，我们可以使用 grid-column-gap：<pre class="language-none"><code class="language-none">grid-column-gap: 10px;</code></pre>这会为我们创建的所有列之间都添加 10px 的空白间距。<h2 id="使用-grid-row-gap-创建多行之间的间距"><a href="#使用-grid-row-gap-创建多行之间的间距" class="headerlink" title="使用 grid-row-gap 创建多行之间的间距"></a>使用 grid-row-gap 创建多行之间的间距</h2>和上个挑战在两列之间添加间距一样，我们还可以用 grid-row-gap 设置行间距。<h2 id="使用-grid-gap-为网格添加间距"><a href="#使用-grid-gap-为网格添加间距" class="headerlink" title="使用 grid-gap 为网格添加间距"></a>使用 grid-gap 为网格添加间距</h2>grid-gap 属性是前两个挑战中出现的 grid-row-gap 和 grid-column-gap 的简写属性，它更方便使用。 如果 grid-gap 只有一个值，那么这个值表示行与行之间、列与列之间的间距均为这个值。 如果有两个值，那么第一个值表示行间距，第二个值表示列间距。</li></ul><h2 id="使用-grid-column-来控制空间大小"><a href="#使用-grid-column-来控制空间大小" class="headerlink" title="使用 grid-column 来控制空间大小"></a>使用 grid-column 来控制空间大小</h2><p>到目前为止，所有的讨论都是围绕网格容器的。 grid-column 属性是我们要讨论的，第一个用于网格项本身的属性。</p><p>网格中，假想的水平线和垂直线被称为线（lines）。 这些线在网格的左上角从 1 开始编号，垂直线向右、水平线向下累加计数。</p><p>这是一个 3x3 网格的线条：</p><p><img src="https://cdn.jsdelivr.net/gh/chenjing185/chenjing185.github.io@latest/images/web/1.png" loading="lazy"></p><p>列线1234行线1234<br>要设置一个网格项占据几列，你可以使用 grid-column 属性加上网格线条的编号来定义网格项开始和结束的位置。</p><p>示例如下：</p><pre class="language-none"><code class="language-none">grid-column: 1 &#x2F; 3;</code></pre><p>这会让网格项从左侧第一条线开始到第三条线结束，占用两列。</p><h2 id="使用-grid-row-来控制空间大小"><a href="#使用-grid-row-来控制空间大小" class="headerlink" title="使用 grid-row 来控制空间大小"></a>使用 grid-row 来控制空间大小</h2><p>和设置一个网格项占用多列类似，你也可以设置它占用多行。 你可以使用 grid-row 属性来定义一个网格项开始和结束的水平线。<br>示例如下：</p><pre class="language-none"><code class="language-none">grid-row: 1 &#x2F; 3;</code></pre><h2 id="使用-justify-self-水平对齐项目"><a href="#使用-justify-self-水平对齐项目" class="headerlink" title="使用 justify-self 水平对齐项目"></a>使用 justify-self 水平对齐项目</h2><p>在 CSS 网格中，每个网格项的内容分别位于被称为单元格（cell）的框内。 你可以使用网格项的 justify-self 属性，设置其内容的位置在单元格内沿水平轴的对齐方式。 默认情况下，这个属性的值是 stretch，这将使内容占满整个单元格的宽度。 该 CSS 网格属性也可以使用其他的值：</p><ol><li>start：使内容在单元格左侧对齐</li><li>center：使内容在单元格居中对齐</li><li>end：使内容在单元格右侧对齐</li></ol><h2 id="使用-align-self-垂直对齐项目"><a href="#使用-align-self-垂直对齐项目" class="headerlink" title="使用 align-self 垂直对齐项目"></a>使用 align-self 垂直对齐项目</h2><p>正如能设置网格项沿水平方向的对齐方式一样，我们也可以设置网格项沿竖直方向的对齐方式。 为此，我们可以对网格项使用 align-self 属性来实现。 适用于 justify-self 属性的属性值同样也可用于这个属性。</p><h2 id="使用-justify-items-水平对齐所有项目"><a href="#使用-justify-items-水平对齐所有项目" class="headerlink" title="使用 justify-items 水平对齐所有项目"></a>使用 justify-items 水平对齐所有项目</h2><p>有时你想让 CSS 网格中的网格项共享对齐方式。 你可以像之前学习的那样分别设置它们的对齐方式，也可以对网格容器使用 justify-items 使它们一次性沿水平轴对齐。 这个属性能接受我们在之前两个挑战中学到的所有值作为属性值，但与之前不同的是，它会将网格中 所有 的网格项按所设置的方式对齐。</p><h2 id="使用-align-items-垂直对齐所有项目"><a href="#使用-align-items-垂直对齐所有项目" class="headerlink" title="使用 align-items 垂直对齐所有项目"></a>使用 align-items 垂直对齐所有项目</h2><p>对网格容器使用 align-items 属性可以让网格中所有的网格项沿竖直方向对齐。</p><h2 id="将网格划分为区域模板"><a href="#将网格划分为区域模板" class="headerlink" title="将网格划分为区域模板"></a>将网格划分为区域模板</h2><p>你可以将网格中的一些单元格组合成一个区域（area），并为该区域指定一个自定义名称。 可以通过给容器加上 grid-template-areas 来实现：</p><pre class="language-none"><code class="language-none">grid-template-areas:  &quot;header header header&quot;  &quot;advert content content&quot;  &quot;advert footer footer&quot;;</code></pre><p>上面的代码将网格单元格分成四个区域：header、advert、content 和 footer。 每个单词代表一个单元格，每对引号代表一行。</p><h2 id="使用-grid-area-属性将项目放置在网格区域中"><a href="#使用-grid-area-属性将项目放置在网格区域中" class="headerlink" title="使用 grid-area 属性将项目放置在网格区域中"></a>使用 grid-area 属性将项目放置在网格区域中</h2><p>像上一个挑战那样，在为网格添加区域模板后，可以通过引用你所定义的区域的名称，将元素放入相应的区域。 为此，你需要对网格项使用 grid-area：</p><pre class="language-none"><code class="language-none">.item1 &#123;  grid-area: header;&#125;</code></pre><p>这样，class 为 item1 的网格项就被放到了 header 区域里。 在这种情况下，该项目将使用整个顶行，因为该整行被命名为 header 区域。</p><h2 id="使用-grid-area-创建区域模板"><a href="#使用-grid-area-创建区域模板" class="headerlink" title="使用 grid-area 创建区域模板"></a>使用 grid-area 创建区域模板</h2><p>我们在上一次挑战中学到的 grid-area 属性还有另一种使用方式。 如果网格中没有定义区域模板，你也可以像这样为它添加一个模板：</p><pre class="language-none"><code class="language-none">item1 &#123; grid-area: 1&#x2F;1&#x2F;2&#x2F;4; &#125;</code></pre><p>这里使用了你之前学习的网格线编号来定义网格项的区域。 上例中数字代表这些值：</p><pre class="language-none"><code class="language-none">grid-area: horizontal line to start at &#x2F; vertical line to start at &#x2F; horizontal line to end at &#x2F; vertical line to end at;</code></pre><p>因此，示例中的网格项将占用第 1 条水平网格线（起始）和第 2 条水平网格线（终止）之间的行，及第 1 条垂直网格线（起始）和第 4 条垂直网格线（终止）之间的列。</p><h2 id="使用-repeat-函数减少重复"><a href="#使用-repeat-函数减少重复" class="headerlink" title="使用 repeat 函数减少重复"></a>使用 repeat 函数减少重复</h2><p>使用 grid-template-columns 或 grid-template-rows 定义网格结构时，你需要为添加的每一行或每一列都输入一个值。</p><p>如果一个网格共有 100 行且每行高度相同， 那我们就需要输入 100 个值，这显然不太实际。 为此，更好的方式是使用 repeat 方法指定行或列的重复次数，后面加上逗号以及需要重复的值。</p><p>以下为添加 100 行网格的例子，每行高度均为 50px：</p><pre class="language-none"><code class="language-none">grid-template-rows: repeat(100, 50px);</code></pre><p>你还可以用 repeat 方法重复多个值，并在定义网格结构时与其他值一起使用。 比如：</p><pre class="language-none"><code class="language-none">grid-template-columns: repeat(2, 1fr 50px) 20px;</code></pre><p>效果相当于：</p><pre class="language-none"><code class="language-none">grid-template-columns: 1fr 50px 1fr 50px 20px;</code></pre><blockquote><p>注意： 1fr 50px 重复了两次，后面跟着 20px。</p></blockquote><h2 id="使用-minmax-函数限制项目大小"><a href="#使用-minmax-函数限制项目大小" class="headerlink" title="使用 minmax 函数限制项目大小"></a>使用 minmax 函数限制项目大小</h2><p>此外，内置函数 minmax 也可用于设置 grid-template-columns 和 grid-template-rows 的值。 它的作用是在网格容器改变大小时限制网格项的大小。 为此，你需要指定网格项允许的尺寸范围。 例如：</p><pre class="language-none"><code class="language-none">grid-template-columns: 100px minmax(50px, 200px);</code></pre><p>在上面的代码中，我们通过 grid-template-columns 添加了两列，第一列宽度为 100px，第二列宽度最小值是 50px，最大值是 200px。</p><h2 id="使用-auto-fill-创建弹性布局"><a href="#使用-auto-fill-创建弹性布局" class="headerlink" title="使用 auto-fill 创建弹性布局"></a>使用 auto-fill 创建弹性布局</h2><p>repeat 方法带有一个名为自动填充（auto-fill）的功能。 它的功能是根据容器的大小，尽可能多地放入指定大小的行或列。 你可以通过结合 auto-fill 和 minmax 来更灵活地布局。</p><pre class="language-none"><code class="language-none">repeat(auto-fill, minmax(60px, 1fr));</code></pre><p>上面的代码效果是这样：首先，列的宽度会随容器大小改变。其次，只要容器宽度不足以插入一个宽为 60px 的列，当前行的所有列就都会一直拉伸。</p><blockquote><p>注意： 如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。</p></blockquote><h2 id="使用-auto-fit-创建弹性布局"><a href="#使用-auto-fit-创建弹性布局" class="headerlink" title="使用 auto-fit 创建弹性布局"></a>使用 auto-fit 创建弹性布局</h2><p>auto-fit 效果几乎和 auto-fill 一样。 不同点仅在于，当容器的大小大于各网格项之和时，auto-fill 会持续地在一端放入空行或空列，这样就会使所有网格项挤到另一边；而 auto-fit 则不会在一端放入空行或空列，而是会将所有网格项拉伸至合适的大小。</p><blockquote><p>注意：如果容器宽度不足以将所有网格项放在同一行，余下的网格项将会移至新的一行。</p></blockquote><h2 id="使用媒体查询创建响应式布局"><a href="#使用媒体查询创建响应式布局" class="headerlink" title="使用媒体查询创建响应式布局"></a>使用媒体查询创建响应式布局</h2><p>将 CSS 网格与使用媒体查询结合使用，如使用媒体查询重新排列网格区域、更改网格尺寸以及重新排列网格项位置，我们可以让制作出的网站更具响应性。</p><p>在右侧的预览区中，当网页可视区域的宽不小于 300px 时，列数从 1 变为 2。 并且，广告（advertisement）区域会完全占据左列。</p><pre class="language-none"><code class="language-none">@media (min-width: 400px)&#123;    .container&#123;      grid-template-areas:      &#x2F;* 只修改这一行下面的代码 *&#x2F;        &quot;header header&quot;        &quot;advert content&quot;        &quot;footer footer&quot;;      &#x2F;* 只修改这一行上面的代码 *&#x2F;    &#125;  &#125;</code></pre><h2 id="在网格中创建网格"><a href="#在网格中创建网格" class="headerlink" title="在网格中创建网格"></a>在网格中创建网格</h2><p>将元素转换为网格只会影响其子元素（即直接后代元素，英文为 direct descendants。意思是一个元素的所有后代元素中，父级元素为该元素的所有元素）。 因此，如果我们把某个子元素设置为网格，就会得到一个嵌套的网格。</p><p>例如，如果我们设置 class 为 item3 的元素的 display 和 grid-template-columns 属性，就会得到一个嵌套的网格。</p><pre class="language-none"><code class="language-none">.item3 &#123;    background: PaleTurquoise;    grid-area: content;    &#x2F;* 只修改这一行下面的代码 *&#x2F;    display: grid;    grid-template-columns: auto 1fr;    &#x2F;* 只修改这一行上面的代码 *&#x2F;  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-CSS弹性盒子</title>
      <link href="/2022/04/13/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-CSS%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/"/>
      <url>/2022/04/13/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-CSS%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>Flexbox（弹性盒子）是最新版本的 CSS（即 CSS3）中引入的一种强大且兼容性好的布局方法。使用 flexbox，我们可以很容易地处理好页面上的元素布局，并创建可以自动缩小和放大的动态用户界面。</p><span id="more"></span><h2 id="使用-display-flex-定位两个盒子"><a href="#使用-display-flex-定位两个盒子" class="headerlink" title="使用 display: flex 定位两个盒子"></a>使用 display: flex 定位两个盒子</h2><p>只要在一个元素的 CSS 中添加 display: flex;，就可以使用其它 flex 属性来构建响应式页面了。例如:</p><pre class="language-none"><code class="language-none">#box-container &#123;   height: 500px;   display: flex; &#125;</code></pre><h2 id="使用-flex-direction-属性创建一个行"><a href="#使用-flex-direction-属性创建一个行" class="headerlink" title="使用 flex-direction 属性创建一个行"></a>使用 flex-direction 属性创建一个行</h2><p>给元素添加 display: flex 属性可以让它变成 flex 容器， 然后可以让元素的项目排列成行或列。 只要给父元素添加 flex-direction 属性，并把属性值设置为以下可选值,即可达成可选值的效果.</p><p>flex-direction的可选值有:</p><ol><li>row：横向从左到右排列（左对齐），默认的排列方式。</li><li>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。</li><li>column：纵向排列。</li><li>column-reverse：反转纵向排列，从后往前排，最后一项排在最上面。</li></ol><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;    flex-direction: column;  &#125;</code></pre><h2 id="使用-justify-content-属性对齐元素"><a href="#使用-justify-content-属性对齐元素" class="headerlink" title="使用 justify-content 属性对齐元素"></a>使用 justify-content 属性对齐元素</h2><p>flex 子元素有时不能充满整个 flex 容器， 所以我们经常需要告诉 CSS 以什么方式排列 flex 子元素，以及调整它们的间距。 幸运的是，我们可以通过 justify-content 属性的不同值来实现。 在介绍属性的可选值之前，我们要先理解一些重要术语。</p><p>回忆一下，如果把 flex 容器设为一个行，它的子元素会从左到右逐个排列； 如果把 flex 容器设为一个列，它的子元素会从上到下逐个排列。 子元素排列的方向被称为 main axis（主轴）。 对于行，主轴水平贯穿每一个项目； 对于列，主轴垂直贯穿每一个项目。<br>例子:</p><pre class="language-none"><code class="language-none">#box-container &#123;    background: gray;    display: flex;    height: 500px;    justify-content: center;  &#125;</code></pre><p>justify-content可选值包括：</p><ul><li>center: 即 flex 子元素在 flex 容器中居中排列。</li><li>flex-start：从 flex 容器的起始位置开始排列项目。 对行来说是把项目移至左边， 对于列是把项目移至顶部。 如未设置 justify-content 的值，那么这就是默认值。</li><li>flex-end：从 flex 容器的终止位置开始排列项目。 对行来说是把项目移至右边， 对于列是把项目移至底部。</li><li>space-between：项目间保留一定间距地沿主轴居中排列。 第一个和最后一个项目被放置在容器边沿。 例如，在行中第一个项目会紧贴着容器左边，最后一个项目会紧贴着容器右边，然后其他项目均匀排布。</li><li>space-around：与space-between相似，但头尾两个项目不会紧贴容器边缘，所有项目之间的空间均匀排布。<br>space-evenly：在 flex 项目之间均匀分配空间，在 flex 容器的任一端都有一个完整的空间。</li></ul><h2 id="使用-align-items-属性对齐元素"><a href="#使用-align-items-属性对齐元素" class="headerlink" title="使用 align-items 属性对齐元素"></a>使用 align-items 属性对齐元素</h2><p>align-items 属性与 justify-content 类似。 回忆一下，justify-content 属性使 flex 子元素沿主轴排列。 行的主轴是水平线，列的主轴是垂直线。</p><p>Flex 容器中，与主轴垂直的叫做 cross axis（交叉轴）。 行的交叉轴是垂直的，列的交叉轴是水平的。</p><p>CSS 中的 align-items 属性用来定义 flex 子元素沿交叉轴的对齐方式。 对行来说，定义的是元素的上下对齐方式； 对列来说，是定义元素的左右对齐方式。<br>例子:</p><pre class="language-none"><code class="language-none">#box-container &#123;    background: gray;    display: flex;    height: 500px;    align-items: center;  &#125;</code></pre><p>align-items 的可选值包括：</p><ul><li>flex-start：从 flex 容器的起始位置开始对齐项目。 对行来说，把项目移至容器顶部； 对列来说，是把项目移至容器左边。</li><li>flex-end：从 flex 容器的终止位置开始对齐项目。 对行来说，把项目移至容器底部； 对列来说，把项目移至容器右边。</li><li>center：把项目居中放置。 对行来说，垂直居中（项目距离顶部和底部的距离相等）； 对列来说，水平居中（项目距离左边和右边的距离相等）。</li><li>stretch：拉伸项目，填满 flex 容器。 例如，排成行的项目从容器顶部拉伸到底部。 如未设置align-items的值，那么这就是默认值。</li><li>baseline：沿基线对齐。 基线是文本相关的概念，可以认为它是字母排列的下端基准线。</li></ul><h2 id="使用-flex-wrap-属性包裹一行或一列"><a href="#使用-flex-wrap-属性包裹一行或一列" class="headerlink" title="使用 flex-wrap 属性包裹一行或一列"></a>使用 flex-wrap 属性包裹一行或一列</h2><p>CSS flexbox 具有将 flex 容器拆分为多行（或列）的功能。 默认情况下，flex 容器会调整项目大小，把它们都塞到一起。 对于行来说，所有项目都会在一条直线上。</p><p>不过，使用 flex-wrap 属性可以使项目换行展示。 这意味着多出来的子元素会被移到新的行或列。 换行发生的断点由子元素和容器的大小决定。<br>例子:</p><pre class="language-none"><code class="language-none">#box-container &#123;    background: gray;    display: flex;    height: 100%;    flex-wrap: wrap;  &#125;</code></pre><p>换行方向的可选值有这些：</p><ul><li>nowrap：默认值，不换行。</li><li>wrap：如果排列以行为基准，就将行从上往下排列；如果排列以列为基准，就将列从左往右排列。</li><li>wrap-reverse：如果排列以行为基准，就将行从下往上排列；如果排列以列为基准，就将列从右往左排列。</li></ul><h2 id="使用-flex-shrink-属性定义-flex-子元素的收缩规则"><a href="#使用-flex-shrink-属性定义-flex-子元素的收缩规则" class="headerlink" title="使用 flex-shrink 属性定义 flex 子元素的收缩规则"></a>使用 flex-shrink 属性定义 flex 子元素的收缩规则</h2><p>目前为止，提到的属性都是应用于 flex 容器（flex 子元素的父元素）的。 除此之外，flex 子元素也有很多实用属性。</p><p>首先介绍的是 flex-shrink 属性。 使用之后，如果 flex 容器太小，则子元素会自动缩小。 当容器的宽度小于里面所有子元素的宽度之和时，所有子元素都会自动压缩。</p><p>子元素的 flex-shrink 接受数值作为属性值。 数值越大，则该元素与其他元素相比会被压缩得更厉害。 比如，一个项目的 flex-shrink 属性值为 1，另一个项目的 flex-shrink 属性值为 3，那么后者相比前者会受到 3 倍压缩。<br>例子: </p><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;  &#125;#box-1 &#123;    background-color: dodgerblue;    width: 100%;    height: 200px;    flex-shrink: 1;  &#125;</code></pre><h2 id="使用-flex-grow-属性定义-flex-子元素的增长系数"><a href="#使用-flex-grow-属性定义-flex-子元素的增长系数" class="headerlink" title="使用 flex-grow 属性定义 flex 子元素的增长系数"></a>使用 flex-grow 属性定义 flex 子元素的增长系数</h2><p>与 flex-shrink 相对的是 flex-grow。 你应该还记得，flex-shrink 会在容器太小时对子元素作出调整。 相应地，flex-grow 会在容器太大时对子元素作出调整。</p><p>例子与之前相似，如果一个项目的 flex-grow 属性值为 1，另一个项目的 flex-grow 属性值为 3，那么值为 3 的一个会较另一个扩大 3 倍。<br>例子: </p><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;  &#125;#box-1 &#123;    background-color: dodgerblue;    height: 200px;    flex-grow: 1;  &#125;</code></pre><h2 id="使用-flex-basis-属性设置元素的初始大小"><a href="#使用-flex-basis-属性设置元素的初始大小" class="headerlink" title="使用 flex-basis 属性设置元素的初始大小"></a>使用 flex-basis 属性设置元素的初始大小</h2><p>flex-basis 属性定义了在使用 CSS 的 flex-shrink 或 flex-grow 属性对元素进行调整前，元素的初始大小。</p><p>flex-basis 属性的单位与其他表示尺寸的属性的单位一致（px、em、% 等）。 如果值为 auto，则项目的尺寸随内容调整。</p><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;  &#125;#box-1 &#123;    background-color: dodgerblue;    height: 200px;    flex-basis: 10em;  &#125;</code></pre><h2 id="使用-flex-短方法属性"><a href="#使用-flex-短方法属性" class="headerlink" title="使用 flex 短方法属性"></a>使用 flex 短方法属性</h2><p>上面几个 flex 属性有一个简写方式。 flex-grow、flex-shrink 和 flex-basis 属性可以在 flex 中一并设置。</p><p>例如，flex: 1 0 10px; 会把项目属性设为 flex-grow: 1;、flex-shrink: 0; 以及 flex-basis: 10px;。</p><blockquote><p>属性的默认设置是 flex: 0 1 auto;。</p></blockquote><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;  &#125;#box-1 &#123;    background-color: dodgerblue;    flex: 2 2 150px;    height: 200px;  &#125;</code></pre><h2 id="使用-order-属性重新排列子元素"><a href="#使用-order-属性重新排列子元素" class="headerlink" title="使用 order 属性重新排列子元素"></a>使用 order 属性重新排列子元素</h2><p>order 属性告诉 CSS flex 容器里子元素的顺序。 默认情况下，项目排列顺序与源 HTML 文件中顺序相同。 这个属性接受数字作为参数，可以使用负数。</p><pre class="language-none"><code class="language-none">#box-container &#123;    display: flex;    height: 500px;  &#125;#box-1 &#123;    background-color: dodgerblue;    order: 2;    height: 200px;    width: 200px;  &#125;</code></pre><h2 id="使用-align-self-属性"><a href="#使用-align-self-属性" class="headerlink" title="使用 align-self 属性"></a>使用 align-self 属性</h2><p>flex 子项目的最后一个属性是 align-self。 这个属性允许你调整单个子元素自己的对齐方式，而不会影响到全部子元素。 因为 float、clear 和 vertical-align 等调整对齐方式的属性都不能应用于 flex 子元素，所以这个属性显得十分有用。</p><p>align-self 可设置的值与 align-items 的一样，并且它会覆盖 align-items 所设置的值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#box-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box-1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> dodgerblue<span class="token punctuation">;</span>    <span class="token property">align-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">#box-2</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>    <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用无障碍</title>
      <link href="/2022/04/12/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
      <url>/2022/04/12/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E6%97%A0%E9%9A%9C%E7%A2%8D/</url>
      
        <content type="html"><![CDATA[<p>在网页开发中，可访问性是指网页内容和用户界面可以被用户理解、浏览并与之交互。这里的用户包括有视觉障碍、听觉障碍或认知障碍的用户。</p><span id="more"></span><h2 id="为视觉障碍用户添加替代图像的文本"><a href="#为视觉障碍用户添加替代图像的文本" class="headerlink" title="为视觉障碍用户添加替代图像的文本"></a>为视觉障碍用户添加替代图像的文本</h2><p>在其他挑战里你应该已经见到过 img 标签的 alt 属性了。 alt 属性中的文本来描述图片内容，作为备用文字。 alt 属性可以帮助用户在图片加载失败或者不可见的情况下理解图片内容， 搜索引擎也通过它来理解图片内容，并将其加入到搜索结果中。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>importantLogo.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Company logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>视觉障碍用户无法通过视觉获取信息，而是通过屏幕阅读器将网页内容转换为音频以获取信息。 他们无法通过直观的呈现理解信息。 屏幕阅读器可以识别 alt 属性，朗读其中的内容，来告知用户图片包含的关键信息。</p><p>alt 文本可以为屏幕阅读器提供图片的描述信息， 所以你应始终为图片添加 alt 属性。 另外，根据最新的 HTML5 标准，为图片添加这个属性是必须的。</p><h2 id="使用-main-元素包裹主题内容"><a href="#使用-main-元素包裹主题内容" class="headerlink" title="使用 main 元素包裹主题内容"></a>使用 main 元素包裹主题内容</h2><p>HTML5 引入了一些新元素，给予开发者更多的选择，也包含辅助功能。 HTML5 引入了诸如 main、header、footer、nav、article、section 等大量新标签。</p><p>默认情况下，浏览器呈现这些元素的方式类似于普通的 div。 但是，在适当的地方使用它们会让标记文本具有更多的含义。 仅标签名称就可以表示它所包含的信息类型，这给内容增加了语义含义。 辅助技术可以获取这种信息，为用户提供更好的页面摘要或导航选项。</p><p>main 标签用于呈现网页的主体内容，且每个页面应只有一个。 这是为了围绕与页面中心主题相关的信息， 而不应包含如导航连接、网页横幅等需要在多个页面中重复出现的内容。</p><p>main 标签也有一个内嵌的特性，以便辅助技术快速定位到页面的主体。 如果你在页面顶部看到过“跳转到主要内容”链接，那么使用 main 标签会自动让辅助设备具有这个跳转的功能。</p><h2 id="使用-article-元素包裹文章内容"><a href="#使用-article-元素包裹文章内容" class="headerlink" title="使用 article 元素包裹文章内容"></a>使用 article 元素包裹文章内容</h2><p>article 是另一个具有语义化特性的 HTML5 新标签。 article 是一个分段标签，用于呈现独立及完整的内容。 这个标签适用于博客、论坛帖子或者新闻文章。</p><p>确定内容是否可以单独作为一部分，通常是个人的判断，但你可以使用几个简单的测试。 如果删除了所有周围的上下文，这个内容是否仍然有意义？ 类似地，对于文本内容，可否把这些内容放到一个 RSS 推送里？</p><p>请牢记，辅助设备依赖组织良好、语义化的标签来获取页面中的信息。</p><blockquote><p>注意： section 元素也是 HTML5 引入的新元素，其语义与 article 略有不同。 article 用于独立且完整的内容，而 section 用于对与主题相关的内容进行分组。 它们可以根据需要来嵌套使用。 举个例子：如果一本书是一个 article 的话，那么每个章节就是 section。 当内容组之间没有联系时，我们可以使用 div。</p></blockquote><h2 id="使用-header-元素来让屏幕阅读器更容易进行导航"><a href="#使用-header-元素来让屏幕阅读器更容易进行导航" class="headerlink" title="使用 header 元素来让屏幕阅读器更容易进行导航"></a>使用 header 元素来让屏幕阅读器更容易进行导航</h2><p>header 也是一个具有语义化的、可以提升页面可访问性的 HTML5 标签。 它可以为父级标签呈现简介信息或者导航链接，适用于那些在多个页面顶部重复出现的内容。</p><p>与 main 类似，header 的语义化特性也可以让辅助工具快速定位到它的内容。</p><blockquote><p>注意： header 应当在 HTML 文档的 body 标签内使用。 它与包含页面标题、元信息的 head 标签不同。</p></blockquote><h2 id="使用-nav-元素使屏幕阅读器更容易导航"><a href="#使用-nav-元素使屏幕阅读器更容易导航" class="headerlink" title="使用 nav 元素使屏幕阅读器更容易导航"></a>使用 nav 元素使屏幕阅读器更容易导航</h2><p>nav 也是一个具有语义化特性的 HTML5 标签，它可以使屏幕阅读器快速识别出页面中的导航信息。 它用于呈现页面中的主导航链接。</p><blockquote><p>对于在多个页面底部出现的站点链接，我们不需要使用 nav 标签。 </p></blockquote><h2 id="使用-footer-元素来让屏幕阅读器更容易进行导航"><a href="#使用-footer-元素来让屏幕阅读器更容易进行导航" class="headerlink" title="使用 footer 元素来让屏幕阅读器更容易进行导航"></a>使用 footer 元素来让屏幕阅读器更容易进行导航</h2><p>与 header 和 nav 类似，footer 元素也具有语义化的特性，可以让辅助工具快速定位到它。 它位于页面底部，用于呈现版权信息或者相关文档链接。</p><h2 id="使用-audio-元素提高音频内容的可访问性"><a href="#使用-audio-元素提高音频内容的可访问性" class="headerlink" title="使用 audio 元素提高音频内容的可访问性"></a>使用 audio 元素提高音频内容的可访问性</h2><p>HTML5 的 audio 标签用于呈现音频内容或音频流，它也具有语义化特性。 音频内容也需要备用文本，供聋哑人或听力困难的人使用。 这可以通过页面上的文本或与字幕链接来实现。</p><p>audio 标签支持 controls 属性， 用于显示浏览器默认播放、停止和其他控制，以及支持键盘功能。 这是一个布尔值属性，意味着它不需要一个值，它在标签上存在即开启设置。<br>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>audio</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>meowClip<span class="token punctuation">"</span></span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/meow.mp3<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/mpeg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/meow.ogg<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>audio/ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>audio</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： 多媒体内容通常同时包含音频与视频部分， 它需要同步的字幕，使视觉或听觉障碍用户可以获取它的内容。 一般情况下，网页开发者不负责创建字幕或逐字稿，但是需要将它们添加到多媒体中。</p></blockquote><h2 id="使用-figure-元素提高图表的可访问性"><a href="#使用-figure-元素提高图表的可访问性" class="headerlink" title="使用 figure 元素提高图表的可访问性"></a>使用 figure 元素提高图表的可访问性</h2><p>HTML5 引入了 figure 标签以及与之相关的 figcaption 标签。 它们一起用于展示可视化信息（如：图片、图表）及其标题。 这样通过语义化对内容进行分组并配以用于解释 figure 的文字，可以极大地提升内容的可访问性。</p><p>对于图表之类的可视化数据，标题可以为屏幕阅读器用户提供简要的说明。 但是这里有一个难点，如何为屏幕阅读器用户展示那些超出屏幕可视范围（使用 CSS）的表格所表现的图表数据。</p><p>举个例子，注意 figcaption 包含在 figure 标签中，并且可以与其他标签组合使用：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roundhouseDestruction.jpeg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Photo of Camper Cat executing a roundhouse kick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>    Master Camper Cat demonstrates proper form of a roundhouse kick.  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-label-元素提高表单的可访问性"><a href="#使用-label-元素提高表单的可访问性" class="headerlink" title="使用 label 元素提高表单的可访问性"></a>使用 label 元素提高表单的可访问性</h2><p>合理地使用语义化的 HTML 标签和属性可以提升页面可访问性。</p><p>label 标签的文本内容通常会是表单组件的名称或标签。 这些文本表明了组件的意义，也提升了表单的可访问性。 label 标签的 for 属性将标签与表单组件绑定；同时，屏幕阅读器也会读取 for 属性的属性值。</p><p>在 HTML 基础章节中，我们已经学习使用了单选按钮标签。 在那个挑战中，为了让标签可以在点击的时候也选中输入框，我们将单选按钮 input 标签嵌套在了 label 标签里面。 在本节课程中，我们介绍了另外一种实现这个功能的方法，那就是使用 for 属性。</p><p>for 的属性值必须与表单组件的 id 属性值相同。 举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="将单选按钮包裹在-fieldset-元素中以获得更好的可访问性"><a href="#将单选按钮包裹在-fieldset-元素中以获得更好的可访问性" class="headerlink" title="将单选按钮包裹在 fieldset 元素中以获得更好的可访问性"></a>将单选按钮包裹在 fieldset 元素中以获得更好的可访问性</h2><p>接下来的表单主题是关于单选按钮的可访问性。 每个单选按钮都有一个包含 for 属性的 label 标签，这些属性值指向相关选项的 id。 然而单选按钮通常成组出现，而且用户必须选择其中一项。</p><p>fieldset 标签包裹整组单选按钮，实现这个功能。 它经常使用 legend 标签来提供分组的描述，以便屏幕阅读器用户会阅读 fieldset 元素中的每个选项。</p><p>当选项的含义很明确时，如“性别选择”，fieldset 与 legend 标签可以省略。 这时，使用包含 for 属性的 label 标签就足够了。</p><p>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Choose one of these three items:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Choice One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Choice Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>items<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Choice Three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="添加可访问的日期选择器"><a href="#添加可访问的日期选择器" class="headerlink" title="添加可访问的日期选择器"></a>添加可访问的日期选择器</h2><p>表单中经常出现 input 标签，它可以用来创建多种表单控件。 它的 type 属性指定了所要创建的 input 标签类型。</p><p>在以前的挑战中，我们已经见过 text 与 submit 类型的 input 标签。 HTML5 规范添加了 date 类型来创建日期选择器。 如果浏览器支持，在点击 input 标签时，日期选择器会显示出来，这让用户填写表单变得更加容易。</p><p>对于较老的浏览器，类型将默认为 text， 这样它可以通过 label 或 placeholder 文本向用户显示预期的日期格式。</p><p>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Enter a date:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="使用-HTML5-的-datetime-属性标准化时间"><a href="#使用-HTML5-的-datetime-属性标准化时间" class="headerlink" title="使用 HTML5 的 datetime 属性标准化时间"></a>使用 HTML5 的 datetime 属性标准化时间</h2><p>继续日期主题。 HTML5 还引入了 time 标签与 datetime 属性来标准化时间。 time 元素是一个行内元素，用于在一个页面上显示日期或时间。 datetime 属性包含的有效格式。 辅助设备可以获取这个值。 这个属性也有助于避免混乱，因为它规定了时间的标准化版本，甚至可以在文本中以非正式的方式或学术方式使用它。</p><p>举个例子：</p><p>Master Camper Cat officiated the cage match between Goro and Scorpion <time datetime="2013-02-13">last Wednesday</time>, which ended in a draw.</p><h2 id="使用自定义-CSS-让元素仅对屏幕阅读器可见"><a href="#使用自定义-CSS-让元素仅对屏幕阅读器可见" class="headerlink" title="使用自定义 CSS 让元素仅对屏幕阅读器可见"></a>使用自定义 CSS 让元素仅对屏幕阅读器可见</h2><p>到目前为止，所有关于可访问性的挑战都没有使用 CSS。 这是为了在介绍视觉设计方面之前强调使用逻辑结构和有语义意义的标签的重要性。</p><p>但如果我们想在页面中添加一些只对屏幕阅读器可见的内容，可以用 CSS 来实现。 当信息为视觉格式（例如图表）时，但屏幕阅读器用户需要备用文稿（例如表格）来访问数据，在这种情况下， 使用 CSS 将屏幕的只读元素放到浏览器窗口可视区域之外。</p><p>举个例子：</p><pre class="language-none"><code class="language-none">.sr-only &#123;  position: absolute;  left: -10000px;  width: 1px;  height: 1px;  top: auto;  overflow: hidden;&#125;</code></pre><blockquote><p>注意： 以下的 CSS 解决方案与上面的结果不同：</p><ul><li>display: none; 或 visibility: hidden; 会把内容彻底隐藏起来，屏幕阅读器也无法获取这些内容。</li><li>如果把值设置为 0px，如 width: 0px; height: 0px;，意味着让元素脱离文档流，这样做同样也会让屏幕阅读器忽略此元素。</li></ul></blockquote><h2 id="使用高对比度文本提高可读性"><a href="#使用高对比度文本提高可读性" class="headerlink" title="使用高对比度文本提高可读性"></a>使用高对比度文本提高可读性</h2><p>低对比度的前景色与背景色会使文本难以阅读。 足够的对比度可以提高内容的可读性，但是怎样的对比度才算是“足够”的？</p><p>Web 内容无障碍指南（WCAG）建议正常文本的对比度至少为 4.5 : 1。 对比度是通过比较两种颜色的相对亮度值来计算的。 对比度的范围是从相同颜色的 1:1（无对比度）到白色与黑色的最高对比度 21:1。 在线可用的对比检查工具很多，可以计算这个比率。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #636363<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #FFF<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="考虑色盲用户的需求设置合适的对比度"><a href="#考虑色盲用户的需求设置合适的对比度" class="headerlink" title="考虑色盲用户的需求设置合适的对比度"></a>考虑色盲用户的需求设置合适的对比度</h2><p>颜色是可视化设计的重要组成部分，但是使用颜色也引入了两个可访问性问题。 首先，不能仅仅使用颜色作为传达重要信息的唯一方式，因为屏幕阅读器无法获取这些信息。 其次，前景色与背景色需要有足够的对比度，这样色盲用户才可以区分它们。</p><p>在之前的挑战中，我们用文本备用方案解决了第一个问题。 在上一个挑战中，我们使用对比度检测工具解决了第二个问题。 WCAG 建议为颜色及灰度组合使用 4.5:1 的对比度。</p><p>色盲用户无法将一些颜色与另一些颜色区分出来，这通常是因为色调，有时候是因为亮度。 你可能还记得，对比度是用前景色与背景色的相对亮度计算的。</p><p>实践中，在对比度检测工具的帮助下，我们可以通过将较暗的颜色变暗、将较淡的颜色变淡的方法来使对比度达到 4.5:1。 在色轮中，较暗的颜色通常是蓝色、紫色、洋红和红色，而较淡的颜色通常是橙色、黄色、绿色和蓝绿色。</p><h2 id="考虑色盲用户的需求仔细选择传达信息的颜色"><a href="#考虑色盲用户的需求仔细选择传达信息的颜色" class="headerlink" title="考虑色盲用户的需求仔细选择传达信息的颜色"></a>考虑色盲用户的需求仔细选择传达信息的颜色</h2><p>色盲的形式有很多种， 它的表现可以从对特定波长光波的感知度较低，到完全无法看到颜色。 最常见的形式是对绿色的低感知度。</p><p>例如，如果内容的前景色与背景色是两种相近的绿色，那么色盲用户可能会无法区分它们。 色轮上距离较近的颜色，特别是相邻的颜色，看起来都会很难区分。 在表示重要信息的时候应避免使用这类相近颜色的组合。</p><p>注意： 一些在线颜色选择器有色盲模拟功能，可以模拟颜色在不同形式的色盲中所呈现的效果。 它们和在线对比度检查器一样，都是很好的工具。</p><h2 id="为链接添加描述性的文本"><a href="#为链接添加描述性的文本" class="headerlink" title="为链接添加描述性的文本"></a>为链接添加描述性的文本</h2><p>屏幕阅读器用户可以选择其设备读取的内容的类型， 包括表示“跳转到”（或“跳过”）的元素，跳转到主要内容，或者从标题中获取页面摘要。 用户还可以选择只听取页面中的超链接内容。</p><p>屏幕阅读器通过阅读链接文本（即 a 标签的内容文本）来完成这个操作。 如果我们只在链接中写上 “click here”（点击这里）或者 “read more”（阅读更多），显然帮助有限。 相反地，应该在 a 标签中使用简洁的描述性语言来为用户提供更多的信息。</p><h2 id="通过给元素添加-accesskey-属性来让用户可以在链接之间快速导航"><a href="#通过给元素添加-accesskey-属性来让用户可以在链接之间快速导航" class="headerlink" title="通过给元素添加 accesskey 属性来让用户可以在链接之间快速导航"></a>通过给元素添加 accesskey 属性来让用户可以在链接之间快速导航</h2><p>HTML 提供 accesskey 属性，用于指定激活元素或者使元素获得焦点的快捷键。 添加 accesskey 属性可以让使用键盘的用户更高效率地导航。</p><p>HTML5 允许在任何标签上使用这个属性。 该属性尤其适用于链接、按钮、表单组件等元素。</p><p>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">accesskey</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Important Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-tabindex-将键盘焦点添加到元素中"><a href="#使用-tabindex-将键盘焦点添加到元素中" class="headerlink" title="使用 tabindex 将键盘焦点添加到元素中"></a>使用 tabindex 将键盘焦点添加到元素中</h2><p>HTML 的 tabindex 属性有三种与标签焦点相关的功能。 当它在一个元素上时，表示该元素可以获得焦点。 tabindex 的值（可以是零、负整数或正整数）定义了行为。</p><p>当用户使用键盘浏览页面时，诸如链接、表单控件等元素可以自动获得焦点。 它们获得焦点的顺序与它们出现在 HTML 文档流中的顺序一致。 我们可以通过将其他标签（如 div、span、p 等）的 tabindex 属性值设为 0 来让它们实现类似的效果。 比如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I need keyboard focus!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： tabindex 属性值为负整数（通常为 -1）的标签也是可以获得焦点的，只是不可以通过键盘操作（如 tab 键）来获得焦点。 这种方法通常用于以编程的方式使内容获得焦点（如：将焦点设置到用 div 实现的弹出框上）的场景。 </p></blockquote><h2 id="使用-tabindex-指定多个元素的键盘焦点顺序"><a href="#使用-tabindex-指定多个元素的键盘焦点顺序" class="headerlink" title="使用 tabindex 指定多个元素的键盘焦点顺序"></a>使用 tabindex 指定多个元素的键盘焦点顺序</h2><p>tabindex 属性还可以指定元素的 tab 键焦点顺序， 将它的值设置为大于等于 1 的整数，就可以实现这个功能。</p><p>给元素设置 tabindex&#x3D;”1”，键盘将首先把焦点放在这个元素上。 然后它按照指定的 tabindex 值（2、3 等等）顺序循环，再移动到默认值和 tabindex&#x3D;”0” 项目。</p><p>需要注意的是，使用这种方式设置 tab 键焦点顺序会覆盖默认顺序，其中默认顺序为标签在文档流中出现的顺序。 这可能会让那些希望从页面顶部开始导航的用户感到困惑。 使用 tabindex 在某些情况下是必要的，但在使用时要充分考虑到页面的可访问性。</p><p>举个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I get keyboard focus, and I get it first!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I get keyboard focus, and I get it second!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-应用视觉设计</title>
      <link href="/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%BA%94%E7%94%A8%E8%A7%86%E8%A7%89%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>视觉设计结合了排版、色彩理论、图形、动画、页面布局等，以表达独特的信息。</p><span id="more"></span><h2 id="使用-text-align-属性创建视觉平衡"><a href="#使用-text-align-属性创建视觉平衡" class="headerlink" title="使用 text-align 属性创建视觉平衡"></a>使用 text-align 属性创建视觉平衡</h2><p>这部分课程的主题是应用视觉设计。 开始的挑战基于美化一个卡片组件的外观，借此展示了若干核心原则。<br>web 内容大部分都是文本。 CSS 里面的 text-align 属性可以控制文本的对齐方式。</p><ol><li>text-align: justify; 将文本隔开，使每行的宽度相等。</li><li>text-align: center; 可以让文本居中对齐。</li><li>text-align: right; 可以让文本右对齐。</li><li>text-align: left; 是默认值，它可以让文本左对齐。<h2 id="使用-width-属性调整元素的宽度"><a href="#使用-width-属性调整元素的宽度" class="headerlink" title="使用 width 属性调整元素的宽度"></a>使用 width 属性调整元素的宽度</h2>你可以使用 CSS 里的 width 属性来指定元素的宽度。 属性值可以是相对单位（比如 em），绝对单位（比如 px），或者包含块（父元素）宽度的百分比。 下面这段代码可以把图片的宽度设置为 220px：<pre class="language-none"><code class="language-none">img &#123;  width: 220px;&#125;</code></pre><h2 id="使用-height-属性调整元素的高度"><a href="#使用-height-属性调整元素的高度" class="headerlink" title="使用 height 属性调整元素的高度"></a>使用 height 属性调整元素的高度</h2>和 width 属性类似，你可以使用 CSS 里面的 height 属性来指定元素的高度。 下面这段代码可以把图片的高度设置为 20px：<pre class="language-none"><code class="language-none">img &#123;  height: 20px;&#125;</code></pre><h2 id="使用-strong-标签加粗文本"><a href="#使用-strong-标签加粗文本" class="headerlink" title="使用 strong 标签加粗文本"></a>使用 strong 标签加粗文本</h2>你可以使用 strong 标签来加粗文字。 粗体文字一般用来吸引读者注意或用来表示强调。 添加了 strong 标签后，浏览器会自动给元素添加这段样式：font-weight:bold;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Stanford University<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-u-标签给文本添加下划线"><a href="#使用-u-标签给文本添加下划线" class="headerlink" title="使用 u 标签给文本添加下划线"></a>使用 u 标签给文本添加下划线</h2>你可以使用 u 标签来给文字添加下划线。 下划线通常用来表示重要内容或需要记忆的内容。 添加了 u 标签后，浏览器会自动给元素添加这段样式：text-decoration: underline;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>Ph.D.students<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-em-标签强调文本"><a href="#使用-em-标签强调文本" class="headerlink" title="使用 em 标签强调文本"></a>使用 em 标签强调文本</h2>你可以使用 em 标签来强调文本。 由于浏览器会自动给元素应用 font-style: italic; 所以文本会显示为斜体。<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Google was founded by Larry Page and Sergey Brin while they were <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>Ph.D. students<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> at <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Stanford University<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-s-标签给文本添加删除线"><a href="#使用-s-标签给文本添加删除线" class="headerlink" title="使用 s 标签给文本添加删除线"></a>使用 s 标签给文本添加删除线</h2>你可以用 s 标签来给文字添加删除线。 删除线是位于文字水平中央的一条线，它代表着一段文字不再有效。 添加了 s 标签后，浏览器会自动给元素添加这段样式：text-decoration: line-through;<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>s</span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>s</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-hr-标签创建水平线"><a href="#使用-hr-标签创建水平线" class="headerlink" title="使用 hr 标签创建水平线"></a>使用 hr 标签创建水平线</h2>你可以用 hr 标签来创建一条宽度撑满父元素的水平线。 这种水平分割线一般用来表示内容主题的改变，或在视觉上将文档分隔成几个部分。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： HTML 中的 hr 是自闭合标签，所以我们不需要为它添加结束标签。</p></blockquote><h2 id="调整文本的背景色"><a href="#调整文本的背景色" class="headerlink" title="调整文本的背景色"></a>调整文本的背景色</h2><p>为了让页面更美观，除了设置整个页面的背景色以及文字颜色外，你还可以单独设置文字的背景色，即在文字的父元素上添加 background-color 属性。 在本挑战里我们将使用 <code>rgba()</code> 颜色，而不是之前学到的 hex 编码或者 <code>rgb()</code> 颜色。</p><pre class="language-none"><code class="language-none">rgba 代表：  r &#x3D; red 红色  g &#x3D; green 绿色  b &#x3D; blue 蓝色  a &#x3D; alpha 透明度</code></pre><p>RGB 值可以取在 0 到 255 之间。 alpha 值可取在 0 到 1 之间，其中 0 代表完全透明，1 代表完全不透明。 <code>rgba()</code> 在需要设置颜色透明度时十分有用， 这意味着你可以做出一些很漂亮的半透明效果。<br>例如: <code>background-color: rgba(45, 45, 45, 0.1)</code>。 它表示背景是黑灰色，因为设置了透明度为 0.1，所以几乎是透明的。</p><h2 id="调整标题元素与段落元素的大小"><a href="#调整标题元素与段落元素的大小" class="headerlink" title="调整标题元素与段落元素的大小"></a>调整标题元素与段落元素的大小</h2><p>标题元素（h1 到 h6）的字体大小通常应大于段落标签的字体大小。 这使用户更容易直观地了解页面上所有内容的布局和重要性级别。 你可以使用 font-size 属性来调整元素中文本的大小。例如:</p><pre class="language-none"><code class="language-none">h4 &#123;    text-align: center;    background-color: rgba(45, 45, 45, 0.1);    padding: 10px;    font-size: 27px;  &#125;</code></pre><h2 id="给卡片元素添加-box-shadow"><a href="#给卡片元素添加-box-shadow" class="headerlink" title="给卡片元素添加 box-shadow"></a>给卡片元素添加 box-shadow</h2><p>box-shadow 属性用来给元素添加阴影，该属性值是由逗号分隔的一个或多个阴影列表。<br>box-shadow 属性按顺序采用以下值：</p></li></ol><ul><li>offset-x （阴影的水平偏移量）</li><li>offset-y （阴影的垂直偏移量）</li><li>blur-radius</li><li>spread-radius</li><li>color<br>其中 blur-radius 和 spread-radius 是可选的。</li></ul><p>可以通过逗号分隔每个 box-shadow 元素的属性来添加多个 box-shadow。</p><p>如下为添加了模糊效果的例子，它使用了透明度较高的黑色作为阴影：</p><pre class="language-none"><code class="language-none">box-shadow: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);</code></pre><h2 id="降低元素的透明度"><a href="#降低元素的透明度" class="headerlink" title="降低元素的透明度"></a>降低元素的透明度</h2><p>CSS 里的 opacity 属性用来设置元素的透明度。</p><ul><li>属性值为 1 代表完全不透明。</li><li>属性值为 0.5 代表半透明。</li><li>属性值为 0 代表完全透明。<br>透明度会应用到元素内的所有内容，不论是图片，还是文本，或是背景色。<h2 id="使用-text-transform-属性给文本添加大写效果"><a href="#使用-text-transform-属性给文本添加大写效果" class="headerlink" title="使用 text-transform 属性给文本添加大写效果"></a>使用 text-transform 属性给文本添加大写效果</h2>CSS 里的 text-transform 属性可以改变英文字母的大小写。 使用这个属性时，我们无需改变 HTML 元素中的文本也可以统一页面里英文的显示。<br>下面的表格展示了 text-transform 的不同值对文字 “Transform me” 的影响：<table><thead><tr><th align="center">值</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">lowercase</td><td align="center">“transform me”</td></tr><tr><td align="center">uppercase</td><td align="center">“TRANSFORM ME”</td></tr><tr><td align="center">capitalize</td><td align="center">“Transform Me”</td></tr><tr><td align="center">initial</td><td align="center">使用默认值</td></tr><tr><td align="center">inherit</td><td align="center">使用父元素的 text-transform 值。</td></tr><tr><td align="center">none</td><td align="center">Default:不改变文字。</td></tr></tbody></table><h2 id="设置段落的-line-height"><a href="#设置段落的-line-height" class="headerlink" title="设置段落的 line-height"></a>设置段落的 line-height</h2>CSS 提供 line-height 属性来设置行间的距离。 行高，顾名思义，可以用来设置每行文字所占据的垂直空间。<br>例如:<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">p</span> <span class="token punctuation">&#123;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="调整锚点的悬停状态"><a href="#调整锚点的悬停状态" class="headerlink" title="调整锚点的悬停状态"></a>调整锚点的悬停状态</h2>伪类是可以添加到选择器上的关键字，用来选择特定状态的元素。<br>比如，可以使用 :hover 伪类选择器来选取超链接的悬停状态。 下面的代码可以在鼠标悬停在超链接上时将其 color 变成红色：<pre class="language-none"><code class="language-none">a:hover &#123;  color: red;&#125;</code></pre><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="更改元素的相对位置"><a href="#更改元素的相对位置" class="headerlink" title="更改元素的相对位置"></a>更改元素的相对位置</h3>在 CSS 里一切 HTML 元素皆为盒子，也就是通常所说的盒模型。 块级元素自动从新的一行开始（比如标题、段落以及 div），行内元素排列在上一个元素后（比如图片以及 span）。 元素默认按照这种方式布局称为文档的普通流，同时 CSS 提供了 position 属性来覆盖它。<br>当元素的定位设置为 relative 时，它允许你通过 CSS 指定该元素在当前文档流页面下的相对偏移量。 CSS 里控制各个方向偏移量的属性是 left、right、top 和 bottom。 它们代表从原来位置向远离该方向偏移指定的像素、百分比或者 em。 下面的例子展示了段落向上偏移 10px：<pre class="language-none"><code class="language-none">p &#123;  position: relative;  bottom: 10px;&#125;</code></pre>把元素的位置设置成相对，并不会改变该元素在布局中所占的位置，也不会对其它元素的位置产生影响。<br>注意： 定位可以使页面布局更灵活、高效。 不管元素的定位是怎样的，HTML 标记在从上到下阅读起来时应该是整洁的、有意义的。 这样可以让视障人士（重度依赖辅助设备比如屏幕阅读软件的人们）也能够无障碍地浏览你的网页。<blockquote><p>CSS 里面的 top、bottom、left 和 right 定义了元素在相应方位的偏移距离。 元素将从当前位置向属性相反的方向偏移。</p></blockquote><h3 id="绝对定位的参照物是元素的父元素"><a href="#绝对定位的参照物是元素的父元素" class="headerlink" title="绝对定位的参照物是元素的父元素"></a>绝对定位的参照物是元素的父元素</h3><p>接下来要介绍 CSS position 属性的取值选项 absolute，它的含义是相对于其包含块定位。 和 relative 定位不一样，绝对定位会将元素从当前的文档流里面移除，周围的元素会忽略它。 这样我们就可以用 CSS 的 top、bottom、left、right 属性来调整元素的位置。<br>绝对定位比较特殊的一点是元素的定位参照于最近的 positioned 祖先元素。 如果它的父元素没有添加定位规则（默认是 position: relative;），浏览器会继续寻找直到默认的 body 标签。</p><h3 id="固定定位的参照物是浏览器的窗口"><a href="#固定定位的参照物是浏览器的窗口" class="headerlink" title="固定定位的参照物是浏览器的窗口"></a>固定定位的参照物是浏览器的窗口</h3><p>fixed 定位，它是一种特殊的绝对（absolute）定位，将元素相对于浏览器窗口定位。 类似于绝对位置，它与 CSS 偏移属性一起使用，并且也会将元素从当前的文档流里面移除。 其它元素会忽略它的存在，这样也许需要调整其他位置的布局。<br>但 fixed 和 absolute 的最明显的区别在于，前者定位的元素不会随着屏幕滚动而移动。</p><h2 id="使用-float-属性将元素左浮动或右浮动"><a href="#使用-float-属性将元素左浮动或右浮动" class="headerlink" title="使用 float 属性将元素左浮动或右浮动"></a>使用 float 属性将元素左浮动或右浮动</h2><p>定位机制并不是 position 属性的选项，而是通过元素的 float 属性来设置。 浮动元素不在文档流中，它向 left 或 right 浮动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。 通常需要用 width 属性来指定浮动元素占据的水平空间。</p><h2 id="使用-z-index-属性更改重叠元素的位置"><a href="#使用-z-index-属性更改重叠元素的位置" class="headerlink" title="使用 z-index 属性更改重叠元素的位置"></a>使用 z-index 属性更改重叠元素的位置</h2><p>当一些元素在位置上重叠时（例如，使用 position: absolute | relative | fixed | sticky 时），在 HTML 里后出现的元素会默认显示在更早出现的元素的上面。 你可以使用 z-index 属性指定元素的堆叠次序。 z-index 的取值是整数，数值大的元素会叠放到数值小的元素上面。</p><h2 id="使用-margin-属性将元素水平居中"><a href="#使用-margin-属性将元素水平居中" class="headerlink" title="使用 margin 属性将元素水平居中"></a>使用 margin 属性将元素水平居中</h2><p>在应用设计中经常需要把一个块级元素水平居中显示。 一种常见的实现方式是把块级元素的 margin 值设置为 auto。</p><blockquote><p>同样的，这个方法也对图片奏效。 图片默认是内联元素，但是可以通过设置其 display 属性为 block来把它变成块级元素。</p></blockquote><h2 id="色彩"><a href="#色彩" class="headerlink" title="色彩"></a>色彩</h2><h3 id="互补色"><a href="#互补色" class="headerlink" title="互补色"></a>互补色</h3><p>在网站设计里，颜色能让内容更醒目，能调动情绪，从而创造舒适的视觉体验。 不同的颜色组合对网站的视觉效果影响很大，精妙的设计都需要适宜的颜色来美化页面内容。<br>色环是我们认识颜色关系的好工具。它是一个近色相邻、异色相离的圆环。 当两个颜色恰好在色环的两端时，这两个颜色就互为补色。 两个互为补色的颜色会在混合后变成灰色。 然而，补色搭配能形成强烈的视觉对比效果。<br>下面是一些以 hex 形式表示的补色例子：</p></li></ul><ol><li>红色（#FF0000）和蓝绿色 (#00FFFF)</li><li>绿色（#00FF00）和品红色（#FF00FF）</li><li>蓝色（#0000FF）和黄色（#FFFF00）</li></ol><p>这与我们许多人在学校学的过时的 RYB 色彩模式不同，RYB 有不同的原色和补色。 现代色彩理论使用 RGB 模型（如在计算机屏幕上）和 CMY（K）模型（如在印刷中）。 在这里阅读了解更多有关这个复杂主题的信息。<br>现在，很多在线选色工具也为我们提供了寻找补色的功能。</p><blockquote><p>注意：颜色搭配是提起用户兴趣或吸引用户注意的重要方式之一。 但我们不应让颜色作为传达重要信息的唯一方式，因为视觉障碍用户可能无法像其他人一样看出其中的含义。</p></blockquote><h3 id="三次色"><a href="#三次色" class="headerlink" title="三次色"></a>三次色</h3><p>电脑显示器和各类屏幕都是基于颜色叠加的模型：将红（R）、绿（G）、蓝（B）三原色的色光以不同的比例相加，就可以产生各种色彩光。 这在现代色彩理论中叫作三原色光模式（RGB Color Model）。 红色（R）、绿色（G）和蓝色（B）叫作三原色。 如果把两种原色相加，就可以产生二次色：蓝绿（G+B）、品红（R+B）和黄色（R+G），这些二次色恰好是在合成它们时未使用的原色的补色，即在色环中位于两端。 例如，品红色是红色和蓝色相加产生，它是绿色的补色。</p><p>三次色是由原色和二次色相加产生的颜色， 例如，在 RGB 颜色模型中，红色（原色）和黄色（二次色）相加产生橙色（三次色）。 将这六种颜色中相邻的颜色相加，便产生了十二色色环。</p><p>设计里面有很多种颜色搭配方法。 涉及到三次色的一种配色方法是分裂补色搭配法。 选定主色之后，在色环上选择与它的补色相邻的两种颜色与之搭配。 此种搭配既有对比，又不失和谐。</p><p>下面是使用分裂补色搭配法创建的三个颜色：</p><table><thead><tr><th align="center">颜色</th><th align="center">HEX 颜色码</th></tr></thead><tbody><tr><td align="center">橙色</td><td align="center">#FF7F00</td></tr><tr><td align="center">蓝绿色</td><td align="center">#00FFFF</td></tr><tr><td align="center">树莓红</td><td align="center">#FF007F</td></tr></tbody></table><h2 id="调整颜色的色相"><a href="#调整颜色的色相" class="headerlink" title="调整颜色的色相"></a>调整颜色的色相</h2><p>颜色具有多种特性，包括色相、饱和度和亮度。 CSS3 引入了hsl()函数，作为直接说明这些特征来挑选颜色的替代方法。<br>色相 是色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。 以颜色光谱为例，光谱左边从红色开始，移动到中间的绿色，一直到右边的蓝色，色相值就是沿着这条线的取值。 在 hsl() 里面，色相用色环来代替光谱，色相值就是色环里面的颜色对应的从 0 到 360 度的角度值。<br>饱和度 是指色彩的纯度，也就是颜色里灰色的占比。 饱和度越高则灰色占比越少，色彩也就越纯；反之则完全是灰色。 饱和度的取值范围是表示灰色所占百分比的 0 至 100。<br>亮度 决定颜色的明暗程度，也就是颜色里白色或者黑色的占比。 其中，100% 的亮度表示纯白色， 0% 的亮度则表示纯黑色；而 50% 的亮度就表示在色相中选取的颜色。<br>下面是一些使用 hsl() 描述颜色的例子，颜色都为满饱和度，中等亮度:</p><table><thead><tr><th align="center">颜色</th><th align="center">HSL</th></tr></thead><tbody><tr><td align="center">红</td><td align="center">hsl(0, 100%, 50%)</td></tr><tr><td align="center">黄</td><td align="center">hsl(60, 100%, 50%)</td></tr><tr><td align="center">绿</td><td align="center">hsl(120, 100%, 50%)</td></tr><tr><td align="center">蓝绿</td><td align="center">hsl(180, 100%, 50%)</td></tr><tr><td align="center">蓝</td><td align="center">hsl(240, 100%, 50%)</td></tr><tr><td align="center">品红</td><td align="center">hsl(300, 100%, 50%)</td></tr></tbody></table><h2 id="调整颜色的色调"><a href="#调整颜色的色调" class="headerlink" title="调整颜色的色调"></a>调整颜色的色调</h2><p>hsl() 使 CSS 更改颜色色调更加方便。 比如，给一个纯色添加白色可以调出更浅的色调；添加黑色可以创造更深的色调。 另外，还可以通过给纯色添加灰色来同时改变颜色的深浅和明暗。hsl() 里面的 ‘s’ 和 ‘l’ 分别代表饱和度和亮度。 饱和度代表灰色的占比，亮度代表白色和黑色的占比。 这在你想获取一个基准色的变种的情景下会十分有用。</p><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><h3 id="创建一个-CSS-线性渐变"><a href="#创建一个-CSS-线性渐变" class="headerlink" title="创建一个 CSS 线性渐变"></a>创建一个 CSS 线性渐变</h3><p>HTML 元素的背景色并不局限于单色。 CSS 还为我们提供了颜色渐变。 可通过 background 里的 linear-gradient() 实现线性渐变， 以下是它的语法：</p><pre class="language-none"><code class="language-none">background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);</code></pre><p>第一个参数指定了颜色过渡的方向——它的值是角度，90deg 表示垂直渐变（从左到右），45deg 表示沿对角线渐变（从左下方到右上方）。 其他参数指定了渐变颜色的顺序：<br>例如：</p><pre class="language-none"><code class="language-none">background: linear-gradient(90deg, red, yellow, rgb(204, 204, 255));</code></pre><h3 id="使用-CSS-线性渐变创建条纹元素"><a href="#使用-CSS-线性渐变创建条纹元素" class="headerlink" title="使用 CSS 线性渐变创建条纹元素"></a>使用 CSS 线性渐变创建条纹元素</h3><p>repeating-linear-gradient() 函数和 linear-gradient() 很像，主要区别是前者会重复指定的渐变。 repeating-linear-gradient() 有很多参数，为了便于理解，这里只用到角度值和色标。<br>角度就是渐变的方向。 色标代表渐变颜色及发生渐变的位置，由百分比或者像素值表示。<br>下面的代码可以帮助理解成对的起止渐变颜色值是如何过渡的。</p><pre class="language-none"><code class="language-none">0px [yellow -- blend -- blue] 40px [green -- blend -- red] 80px</code></pre><p>如果每对起止渐变颜色值的颜色都是相同的，由于是在两个相同的颜色间过渡，那么中间的过渡色也为同色，接着就是同色的过渡色和下一个起止颜色，最终产生的效果就是条纹。<br>例子:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">div</span><span class="token punctuation">&#123;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>  50 auto<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">repeating-linear-gradient</span><span class="token punctuation">(</span>      45deg<span class="token punctuation">,</span>      yellow 0px<span class="token punctuation">,</span>      yellow 40px<span class="token punctuation">,</span>      black 40px<span class="token punctuation">,</span>      black 80px    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="通过添加细微图案作为背景图像来创建纹理"><a href="#通过添加细微图案作为背景图像来创建纹理" class="headerlink" title="通过添加细微图案作为背景图像来创建纹理"></a>通过添加细微图案作为背景图像来创建纹理</h2><p>为了增加背景图的质感，我们可以为它添加一个不那么明显的纹理图案，这样可以让页面更讨喜。 但关键在于，我们需要找到一个平衡点，因为我们不希望背景图抢占了内容的风头，造成喧宾夺主的结果。 background 属性支持使用 url() 函数作为属性值，这让我们可以通过链接的方式引入纹理或样式的图片。 图片链接的地址应写在括号内，一般会用引号包起来。<br>例子:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">body</span> <span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://cdn-media-1.freecodecamp.org/imgr/MJAkxbh.png<span class="token punctuation">)</span></span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="Transform-scale缩放"><a href="#Transform-scale缩放" class="headerlink" title="Transform scale缩放"></a>Transform scale缩放</h2><h3 id="使用-CSS-Transform-scale-属性可以更改元素的大小"><a href="#使用-CSS-Transform-scale-属性可以更改元素的大小" class="headerlink" title="使用 CSS Transform scale 属性可以更改元素的大小"></a>使用 CSS Transform scale 属性可以更改元素的大小</h3><p>CSS 属性 transform 里面的 scale() 函数可以用来改变元素的显示比例。 下面的例子把页面的段落元素放大到了原来的 2 倍：</p><pre class="language-none"><code class="language-none">p &#123;  transform: scale(2);&#125;</code></pre><h3 id="使用CSS-Transform-scale-属性在悬停时缩放元素"><a href="#使用CSS-Transform-scale-属性在悬停时缩放元素" class="headerlink" title="使用CSS Transform scale 属性在悬停时缩放元素"></a>使用CSS Transform scale 属性在悬停时缩放元素</h3><p>transform 属性有很多函数可以调用，可以对元素进行调整大小、移动、旋转、翻转等操作。 当使用伪类选取元素的指定状态（如 :hover）时，我们可以通过 transform 属性非常方便地给元素添加交互。<br>下面是当用户悬停在段落元素时，段落大小缩放到原始大小 2.1 倍的例子：</p><pre class="language-none"><code class="language-none">p:hover &#123;  transform: scale(2.1);&#125;</code></pre><blockquote><p>注意： 给 div 元素添加 transform 也会影响这个 div 包裹的子元素。</p></blockquote><h2 id="Transform-skex倾斜"><a href="#Transform-skex倾斜" class="headerlink" title="Transform skex倾斜"></a>Transform skex倾斜</h2><h3 id="使用-CSS-Transform-skex-属性沿X轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿X轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿X轴倾斜元素"></a>使用 CSS Transform skex 属性沿X轴倾斜元素</h3><p>接下来要介绍的 transform 属性是 skewX()：它使选择的元素沿着 X 轴（横向）倾斜指定的角度。</p><p>下面的代码沿着 X 轴倾斜段落元素 -32 度。</p><pre class="language-none"><code class="language-none">p &#123;  transform: skewX(-32deg);&#125;</code></pre><h3 id="使用-CSS-Transform-skex-属性沿Y轴倾斜元素"><a href="#使用-CSS-Transform-skex-属性沿Y轴倾斜元素" class="headerlink" title="使用 CSS Transform skex 属性沿Y轴倾斜元素"></a>使用 CSS Transform skex 属性沿Y轴倾斜元素</h3><p>skewX 函数使指定元素沿 X 轴翻转指定的角度，想必你已经猜到了，skewY 属性使指定元素沿 Y 轴（垂直方向）翻转指定角度。<br>下面的代码沿着 Y 轴倾斜段落元素 -32 度。</p><pre class="language-none"><code class="language-none">p &#123;  transform: skewY(-32deg);&#125;</code></pre><h2 id="使用-CSS-创建一个图形"><a href="#使用-CSS-创建一个图形" class="headerlink" title="使用 CSS 创建一个图形"></a>使用 CSS 创建一个图形</h2><p>通过使用不同的选择器和属性，你可以做出有趣的形状， 一个简单的例子是新月形状。<br>首先我们来创建一个圆的、透明的图形，它具有模糊阴影并略微向两边递减。 如你所见，这个阴影其实就是新月形狀。<br>为了创建一个圆形的对象，border-radius 应该被设置成 50%。<br>你应该还记得之前的 box-shadow 属性以及它的依次取值 offset-x、offset-y、blur-radius、spread-radius 和 color 值。 其中 blur-radius 和 spread-radius 是可选的。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.center</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 25px 10px 0px 0px blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-CSS-和-HTML-创建更复杂的形状"><a href="#使用-CSS-和-HTML-创建更复杂的形状" class="headerlink" title="使用 CSS 和 HTML 创建更复杂的形状"></a>使用 CSS 和 HTML 创建更复杂的形状</h2><p>伪元素 ::before 和 ::after。 ::before 创建一个伪元素，它是所选元素的第一个子元素； ::after 创建一个伪元素，它是所选元素的最后一个子元素。 在下面的代码中，::before 伪元素用来给 class 为 heart 的元素添加一个正方形：</p><p>.heart::before {<br>  content: “”;<br>  background-color: yellow;<br>  border-radius: 25%;<br>  position: absolute;<br>  height: 50px;<br>  width: 70px;<br>  top: -50px;<br>  left: 5px;<br>}<br>::before 和 ::after 必须配合 content 来使用。 这个属性通常用来给元素添加内容诸如图片或者文字。 尽管有时 ::before 和 ::after 是用来实现形状而非文字，但 content 属性仍然是必需的，此时它的值可以是空字符串。 在上面的例子里，class 为 heart 元素的 ::before 伪类添加了一个黄色的长方形，长方形的高和宽分别为 50px 和 70px。 这个矩形有圆角，因为它的 border-radius 为 25%，它的位置是绝对位置，位于离元素左边和顶部分别是 5px、50px 的位置。</p><style>  .heart {    position: absolute;    margin: auto;    top: 0;    right: 0;    bottom: 0;    left: 0;    background-color: pink;    height: 50px;    width: 50px;    transform: rotate(-45deg);  }  .heart::after {    background-color: pink;    content: "";    border-radius: 50%;    position: absolute;    width: 50px;    height: 50px;    top: 0px;    left: 25px;  }  .heart::before {    content: "";    background-color: pink;    border-radius: 50%;    position: absolute;    width: 50px;    height: 50px;    top: -25px;    left: 0px;  }</style><div class="heart"></div><h2 id="css动画"><a href="#css动画" class="headerlink" title="css动画"></a>css动画</h2><h3 id="了解-CSS-的关键帧和动画是如何工作的"><a href="#了解-CSS-的关键帧和动画是如何工作的" class="headerlink" title="了解 CSS 的关键帧和动画是如何工作的"></a>了解 CSS 的关键帧和动画是如何工作的</h3><p>如果要给元素添加动画，你需要了解 animation 属性以及 @keyframes 规则。 animation 属性控制动画的外观，@keyframes 规则控制动画中各阶段的变化。 总共有 8 个 animation 属性。 为了便于理解，本挑战中我们只会暂时涉及到两个最常用的属性。</p><ol><li>animation-name 用来设置动画的名称，也就是我们稍后要在 @keyframes 里用到的名称</li><li>animation-duration 设置动画所花费的时间。</li></ol><p>@keyframes 可以通过设置特定时间点的行为来创建动画。 为此，我们只需要给持续时间内的特定帧（从 0% 到 100%）加上 CSS 规则。 如果用一部电影来做类比，那么 CSS 里面的 0% 关键帧就像是电影里面的开场镜头；100% 关键帧就像是电影里的片尾，就是那个之后会出现演职人员列表的片尾。 在动画设定的时间内，CSS 会根据关键帧的规则来给元素添加动画效果。 100% 位置的 CSS 属性就是元素最后的样子，相当于电影里的演职员表或者鸣谢镜头。 然后CSS 应用魔法来在给定的时间内转换元素以使其脱离场景。 下面举例说明 @keyframes 和动画属性的用法：</p><p>#anim {<br>  animation-name: colorful;<br>  animation-duration: 3s;<br>}</p><p>@keyframes colorful {<br>  0% {<br>    background-color: blue;<br>  }<br>  100% {<br>    background-color: yellow;<br>  }<br>}<br>id 为 anim 的元素，我们在代码中将它的 animation-name 设置为 colorful，同时设置 animation-duration 为 3 秒。 然后我们把 @keyframes 规则添加到名为 colorful 的动画属性上。 在动画开始时（0%）的背景颜色为蓝色，在动画结束时（100%）的背景颜色为黄色。 注意我们不只可以设置开始和结束，而是从 0% 到 100% 间的任意位置都可以设置。</p><h3 id="使用CSS动画更改按钮的悬停状态"><a href="#使用CSS动画更改按钮的悬停状态" class="headerlink" title="使用CSS动画更改按钮的悬停状态"></a>使用CSS动画更改按钮的悬停状态</h3><p>你可以在按钮悬停时使用 @keyframes 改变按钮的颜色。<br>下面是在图片悬停时改变图片宽度的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">img</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">img:hover</span> <span class="token punctuation">&#123;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> width<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 500ms<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> width</span> <span class="token punctuation">&#123;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/curriculum/applied-visual-design/google-logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Google<span class="token punctuation">'</span>s Logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><h3 id="修改动画的填充模式"><a href="#修改动画的填充模式" class="headerlink" title="修改动画的填充模式"></a>修改动画的填充模式</h3><p>注意动画在 500ms 之后重置了，所以按钮又变成了之前的颜色。 而我们想要的效果是按钮在悬停时始终高亮。<br>为此，我们可以通过把 animation-fill-mode 设置成 forwards 来实现。 animation-fill-mode 指定了在动画结束时元素的样式： 你可以这样设置：</p><pre class="language-none"><code class="language-none">animation-fill-mode: forwards;</code></pre><h3 id="使用-CSS-动画创建动画"><a href="#使用-CSS-动画创建动画" class="headerlink" title="使用 CSS 动画创建动画"></a>使用 CSS 动画创建动画</h3><p>在元素的 position 已有指定值（如 fixed 或者 relative）时，CSS 偏移属性 right、left、top、bottom 可以用在动画规则里创建动作。<br>就像下面的例子展示的那样，你可以在 50% keyframe 处设置 top 属性为 50px，在开始（0%）和结束（100%）keyframe 处设置为 0px，以实现元素先向下运动，然后返回的动作效果。</p><pre class="language-none"><code class="language-none">@keyframes rainbow &#123;  0% &#123;    background-color: blue;    top: 0px;  &#125;  50% &#123;    background-color: green;    top: 50px;  &#125;  100% &#123;    background-color: yellow;    top: 0px;  &#125;&#125;</code></pre><h3 id="通过从左到右淡化元素来创建视觉方向"><a href="#通过从左到右淡化元素来创建视觉方向" class="headerlink" title="通过从左到右淡化元素来创建视觉方向"></a>通过从左到右淡化元素来创建视觉方向</h3><p>现在我们需要改变动画元素的 opacity 属性值，使其在到达屏幕右侧时渐隐。<br>在示例动画中，具有渐变背景的圆形元素在 @keyframes 为 50% 的节点向右移动。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">#ball</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 50px auto<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>      35deg<span class="token punctuation">,</span>      #ccffff<span class="token punctuation">,</span>      #ffcccc    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">animation-name</span><span class="token punctuation">:</span> fade<span class="token punctuation">;</span>    <span class="token property">animation-duration</span><span class="token punctuation">:</span> 3s<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@keyframes</span> fade</span> <span class="token punctuation">&#123;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>      <span class="token property">opacity</span><span class="token punctuation">:</span> 0.1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="使用无限的动画计数制作永不停止的动画"><a href="#使用无限的动画计数制作永不停止的动画" class="headerlink" title="使用无限的动画计数制作永不停止的动画"></a>使用无限的动画计数制作永不停止的动画</h3><p>之前介绍了一些动画属性以及 @keyframes 规则的用法。 还有一个常用的动画属性是 animation-iteration-count，这个属性允许你控制动画循环的次数。 下面是一个例子：</p><pre class="language-none"><code class="language-none">animation-iteration-count: 3;</code></pre><p>在这里动画会在运行 3 次后停止，如果想让动画一直运行，可以把值设置成 infinite。</p><pre class="language-none"><code class="language-none">#ball &#123;    width: 100px;    height: 100px;    margin: 50px auto;    position: relative;    border-radius: 50%;    background: linear-gradient(      35deg,      #ccffff,      #ffcccc    );    animation-name: bounce;    animation-duration: 1s;    animation-iteration-count: 3;  &#125;</code></pre><h3 id="以可变速率来给元素添加动画"><a href="#以可变速率来给元素添加动画" class="headerlink" title="以可变速率来给元素添加动画"></a>以可变速率来给元素添加动画</h3><p>改变相似元素的动画频率的方法有很多。 目前我们接触到的就有 animation-iteration-count 和 @keyframes。<br>举例说明，可以通过改变其中一个元素的 @keyframes 规则以此改变其动画频率。例如:</p><pre class="language-none"><code class="language-none">@keyframes twinkle-1 &#123;    20% &#123;      transform: scale(0.5);      opacity: 0.5;    &#125;  &#125;</code></pre><p>将以上代码改为</p><pre class="language-none"><code class="language-none">@keyframes twinkle-1 &#123;    50% &#123;      transform: scale(0.5);      opacity: 0.5;    &#125;  &#125;</code></pre><h3 id="以可变速率来给多个元素添加动画"><a href="#以可变速率来给多个元素添加动画" class="headerlink" title="以可变速率来给多个元素添加动画"></a>以可变速率来给多个元素添加动画</h3><p>我们通过修改 @keyframes 改变了两个相似动画元素的频率。 你也可以通过改变多个元素的 animation-duration 来达到同样的效果。例如:</p><pre class="language-none"><code class="language-none">.star-1 &#123;    margin-top: 15%;    margin-left: 60%;    animation-duration: 1s;    animation-name: twinkle;  &#125;.star-2 &#123;    margin-top: 25%;    margin-left: 25%;    animation-duration: 0.9s;    animation-name: twinkle;  &#125;.star-3 &#123;    margin-top: 10%;    margin-left: 50%;    animation-duration: 1.1s;    animation-name: twinkle;  &#125;</code></pre><h3 id="使用关键字更改动画定时器"><a href="#使用关键字更改动画定时器" class="headerlink" title="使用关键字更改动画定时器"></a>使用关键字更改动画定时器</h3><p>在 CSS 动画里，animation-timing-function属性用来定义动画的速度曲线。 速度曲线决定了动画从一套 CSS 样式变为另一套所用的时间。 如果要描述的动画是一辆车在指定时间内（animation-duration）从 A 运动到 B，那么 animation-timing-function 表述的就是车在运动中的加速和减速等过程。<br>有一些预定义的关键字可用于常见的选项。 比如，</p><ol><li>ease，动画以低速开始，然后加快，在结束前变慢。  </li><li>ease-out：动画以高速开始，以低速结束；</li><li>ease-in，动画以低速开始，以高速结束；</li><li>linear：动画从头到尾的速度是相同的。<br>例如:<pre class="language-none"><code class="language-none">#ball1 &#123;    left:27%;    animation-timing-function: linear;  &#125;#ball2 &#123;    left:56%;    animation-timing-function: ease-out;  &#125;</code></pre><h2 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h2><h3 id="学习贝塞尔曲线的原理"><a href="#学习贝塞尔曲线的原理" class="headerlink" title="学习贝塞尔曲线的原理"></a>学习贝塞尔曲线的原理</h3>CSS 还提供了贝塞尔曲线（Bezier curves）来更细致地控制动画的速度曲线。</li></ol><p>在 CSS 动画里，我们可以用 cubic-bezier 来定义贝塞尔曲线。 曲线的形状代表了动画的速度。 曲线在 1 * 1 的坐标系统内， 其中 X 轴代表动画的时间间隔（类似于时间比例尺），Y 轴代表动画的改变。</p><p>cubic-bezier 函数包含了 1 * 1 网格里的4个点：p0、p1、p2、p3。 其中 p0 和 p3 是固定值，代表曲线的起始点和结束点，坐标值依次为 (0, 0) 和 (1, 1)。 你只需设置另外两点的 x 值和 y 值，设置的这两点确定了曲线的形状从而确定了动画的速度曲线。 在 CSS 里面通过 (x1, y1, x2, y2) 来确定 p1 和 p2。 以下就是 CSS 贝塞尔曲线的例子：</p><pre class="language-none"><code class="language-none">animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);</code></pre><p>在上面的例子里，两个点的 x 和 y 值相等（x1 &#x3D; 0.25 &#x3D; y1 和 x2 &#x3D; 0.75 &#x3D; y2）。如果你还记得几何课的知识，结果是从原点到点 (1, 1) 的一条直线。 元素在动画中的速度呈线性，效果和使用 linear 关键词的效果一致。 换言之，元素匀速运动。例如:</p><pre class="language-none"><code class="language-none">#ball1 &#123;    left: 27%;    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);  &#125;</code></pre><h3 id="使用贝塞尔曲线移动图形"><a href="#使用贝塞尔曲线移动图形" class="headerlink" title="使用贝塞尔曲线移动图形"></a>使用贝塞尔曲线移动图形</h3><p>前面使用 ease-out 预定义值描述了动画以高速开始低速结束。 同样的，ease-out 预定义值也可以用贝塞尔曲线函数实现。</p><p>通俗的讲，将一条直线放在范围只有 1 的坐标轴中，并从中间拿 p1 和 p2 两个点来拉扯（X 轴的取值区间是 [0, 1]，Y 轴任意），最后形成的曲线就是动画的贝塞尔速度曲线。 下面是一个使用值来模仿 ease-out 样式的 Bezier 曲线示例：</p><pre class="language-none"><code class="language-none">animation-timing-function: cubic-bezier(0, 0, 0.58, 1);</code></pre><p>记住所有的 cubic-bezier 函数都是从坐标为 (0, 0) 的 p0 开始，在坐标为 (1, 1) 的 p3 结束。 在这个例子里，曲线在 y 轴（从 0 开始，运动到 p1 的 0，然后运动到 p2 的 1）上移动得比在 x 轴（从 0 开始，运动到 p1 的 0，到 p2 的 0.58）上移动得快。 结果是，在这一段动画内元素运动得快。 到曲线的结尾，x 和 y 之间的关系反过来了，y 值保持为 1，没有变化，x 值从 0.58 变为 1，元素运动得慢。例如:</p><pre class="language-none"><code class="language-none">#red &#123;    background: red;    left: 27%;    animation-timing-function: cubic-bezier(0,0,0.58,1)  &#125;</code></pre><h3 id="使用贝塞尔曲线让运动更加自然"><a href="#使用贝塞尔曲线让运动更加自然" class="headerlink" title="使用贝塞尔曲线让运动更加自然"></a>使用贝塞尔曲线让运动更加自然</h3><p>之前学习了 linear 和 ease-out 的贝塞尔曲线描述，但这两个都无法完美地描述杂耍球的运动。<br>当 animation-iteration-count 值为 infinite 时，animation-timing-function 会自动循环 keyframe。 由于我们是在动画周期的中间点（50% 处）设置的 keyframe 规则，最终的结果是球向上和球向下是两个同样的动画过程。<br>下面的例子模拟了杂耍球运动：</p><pre class="language-none"><code class="language-none">cubic-bezier(0.3, 0.4, 0.5, 1.6);</code></pre><p>注意 y2 的值是大于 1 的。 虽然贝塞尔曲线是在 1*1 的坐标系统内，x 值只能在 0 到 1，但是 y 值是可以大于 1 的。 这样才能模拟杂耍球运动。例如:</p><pre class="language-none"><code class="language-none">#green &#123;    background: green;    left: 75%;    animation-timing-function: cubic-bezier(0.311, 0.441, 0.444, 1.649);  &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-响应式网页设计原则</title>
      <link href="/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2022/04/06/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>人们可能通过形状和大小不同的设备来访问网页。通过响应式网页设计，你可以设计出能灵活适应不同屏幕大小、方向和分辨率的网页。</p><span id="more"></span><h2 id="创建一个媒体查询"><a href="#创建一个媒体查询" class="headerlink" title="创建一个媒体查询"></a>创建一个媒体查询</h2><p>媒体查询是 CSS3 中引入的一项新技术，它可以根据不同的视口大小调整内容的布局。 视口是指浏览器中，用户可见的网页内容。 视口会随访问网站的设备不同而改变。<br>媒体查询由媒体类型组成，如果媒体类型与展示网页的设备类型匹配，则应用对应的样式。 你可以在媒体查询中使用各种选择器和样式。<br>下面是一个媒体查询的例子，当设备宽度小于或等于 100px 时返回内容：</p><pre class="language-none"><code class="language-none">@media (max-width: 100px) &#123; &#x2F;* CSS Rules *&#x2F; &#125;</code></pre><p>以下定义的媒体查询，是当设备高度大于或等于 350px 时返回内容：</p><pre class="language-none"><code class="language-none">@media (min-height: 350px) &#123; &#x2F;* CSS Rules *&#x2F; &#125;</code></pre><p>注意，只有当媒体类型与所使用的设备的类型匹配时，媒体查询中定义的 CSS 才生效。</p><h2 id="使图片自适应设备尺寸"><a href="#使图片自适应设备尺寸" class="headerlink" title="使图片自适应设备尺寸"></a>使图片自适应设备尺寸</h2><p>用 CSS 来让图片自适应其实很简单。 你只需要给图片添加这些属性:</p><pre class="language-none"><code class="language-none">img &#123;  max-width: 100%;  height: auto;&#125;</code></pre><p>设置 max-width 值为 100% 可确保图片不超出父容器的范围；设置 height 属性为 auto 可以保持图片的原始宽高比。</p><h2 id="针对高分辨率屏幕应使用视网膜图片"><a href="#针对高分辨率屏幕应使用视网膜图片" class="headerlink" title="针对高分辨率屏幕应使用视网膜图片"></a>针对高分辨率屏幕应使用视网膜图片</h2><p>随着联网设备的增加，设备间的区别不仅发生在尺寸和规格上，还发生在用于显示的设备上。 像素密度就是区分不同显示设备的一个指标，它一般会以 PPI（Pixel Per Inch，即每英寸像素）或 DPI（每英寸点数）为计量单位。 最著名的显示器就是 Apple MacBook Pro 笔记本电脑上的“视网膜显示屏”（现亦用于 iMac）。 由于“视网膜显示屏”和“非视网膜显示屏”显示器之间像素密度的不同，某些未考虑高分辨率显示器的图像在高分辨率显示器上渲染时，可能因出现“像素化”而不够清晰。<br>让图像正确出现在高分辨率显示器（例如 MacBook Pros “Revistina display”）上的最简单方式， 是定义它们的 width 和 height 值为原始值的一半。 下面是一个仅使用原始高度和宽度一半的图像示例：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">img</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 250px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>coolPic500x500<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>A most excellent picture<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="使排版根据设备尺寸自如响应"><a href="#使排版根据设备尺寸自如响应" class="headerlink" title="使排版根据设备尺寸自如响应"></a>使排版根据设备尺寸自如响应</h2><p>除了使用 em 或 px 设置文本大小，你还可以用视窗单位来做响应式排版。 视窗单位和百分比都是相对单位，但它们是基于不同的参照物。 视窗单位是相对于设备的视窗尺寸（宽度或高度），百分比是相对于父级元素的大小。<br>四个不同的视窗单位分别是：<br>vw：如 10vw 的意思是视窗宽度的 10%。<br>vh： 如 3vh 的意思是视窗高度的 3%。<br>vmin： 如 70vmin 的意思是视窗的高度和宽度中较小一个的 70%。<br>vmax： 如 100vmax 的意思是视窗的高度和宽度中较大一个的 100%。<br>下面这个例子是设置 body 标签的宽度为视窗宽度的 30%。</p><pre class="language-none"><code class="language-none">body &#123; width: 30vw; &#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-基础CSS</title>
      <link href="/2022/04/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80CSS/"/>
      <url>/2022/04/03/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80CSS/</url>
      
        <content type="html"><![CDATA[<p>CSS（级联样式表）告诉浏览器如何显示你在 HTML 中写入的文本和其他内容。你可以使用 CSS 控制 HTML 元素的颜色、字体、大小、间距等许多属性。</p><span id="more"></span><h2 id="修改文本的颜色。"><a href="#修改文本的颜色。" class="headerlink" title="修改文本的颜色。"></a>修改文本的颜色。</h2><p>我们通过修改 h2 元素的 style 属性来改变文本颜色。<br>我们需要修改 color 属性值。<br>以下是将 h2 元素设置为蓝色的方法：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>CatPhotoApp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>请注意,需要在内联 style 声明末尾加上;</p><h2 id="使用元素选择器来设置元素的样式"><a href="#使用元素选择器来设置元素的样式" class="headerlink" title="使用元素选择器来设置元素的样式"></a>使用元素选择器来设置元素的样式</h2><p>在 CSS 中，页面样式的属性有几百个，你可以用来改变元素在页面上的外观。</p><p>当你输入 <code>&lt;h2 style=&quot;color: red;&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>，就可以用行内 CSS 设置 h2 元素的样式。</p><p>这是指定元素样式的一种方法，但有一个更好的方法来应用 CSS。</p><p>在代码的顶部，创建一个 style 声明区域，如下方所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>在样式声明区域内，可以为所有 h2 元素创建一个 CSS selector。 如果想让所有 h2 元素在变成红色，可以添加下方的样式规则：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">h2</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>请注意，每个元素的样式规则都应该有开始和结束大括号{和}。 还需要确保元素的样式定义在开始和结束样式标签之间。 你需要确保所有样式规则位于花括号之间，并且每条样式规则都以分号结束。</p><h2 id="使用-class-选择器设置元素的样式"><a href="#使用-class-选择器设置元素的样式" class="headerlink" title="使用 class 选择器设置元素的样式"></a>使用 class 选择器设置元素的样式</h2><p>CSS 的 class 具有可重用性，可应用于各种 HTML 元素。<br>一个 CSS class 声明示例如下所示：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.blue-text</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>可以看到，我们在<code>&lt;style&gt;</code>样式声明区域里，创建了一个名为blue-text的class选择器。 你可以这样将 class 应用于 HTML 元素：<code>&lt;h2 class=&quot;blue-text&quot;&gt;CatPhotoApp&lt;/h2&gt;</code>。 注意在CSS style元素里，class 名以一个句点开头。 在HTML元素的class属性中，class 名的开头没有句点。</p><h2 id="更改元素的字体大小"><a href="#更改元素的字体大小" class="headerlink" title="更改元素的字体大小"></a>更改元素的字体大小</h2><p>字体大小由 font-size 属性控制，如下所示：</p><pre class="language-html" data-language="html"><code class="language-html">h1 &#123;  font-size: 30px;&#125;</code></pre><h2 id="元素的字体族名"><a href="#元素的字体族名" class="headerlink" title="元素的字体族名"></a>元素的字体族名</h2><h3 id="设置元素的字体族名"><a href="#设置元素的字体族名" class="headerlink" title="设置元素的字体族名"></a>设置元素的字体族名</h3><p>通过 font-family 属性，我们可以设置元素里的字体族名。<br>如果你想将 h2 元素的字体设置为 sans-serif，可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html">h2 &#123;  font-family: sans-serif;&#125;</code></pre><h3 id="引入谷歌字体"><a href="#引入谷歌字体" class="headerlink" title="引入谷歌字体"></a>引入谷歌字体</h3><p>在我们的网站上，除了使用系统提供的默认字体以外，我们也可以使用自定义字体。 网络上有很多字体库。 在这个例子中，我们将使用 Google 字体库。<br>Google 字体库是一个免费的 Web 字体库，我们只需要在 CSS 里设置字体的 URL 即可使用。<br>要引入 Google Font，你需要从 Google Fonts 上复制字体的 URL，并粘贴到你的 HTML 里面。 在这个挑战中，我们需要引入 Lobster 字体。 因此，请复制以下代码段，并粘贴到代码编辑器顶部，即放到 style 标签之前。<br><code>&lt;link href=&quot;https://fonts.googleapis.com/css?family=Lobster&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;</code><br>现在可以在 CSS 中使用 Lobster 字体，并像下面一样使用 Lobster 作为 FAMILY_NAME：</p><pre class="language-none"><code class="language-none">font-family: FAMILY_NAME, GENERIC_NAME;</code></pre><p>GENERIC_NAME是可选的，它用来指明在其他字体不可用时的后备字体。<br>字体名区分大小写，并且如果字体名含有空格，则在声明时需要用引号包起来。 例如，使用 “Open Sans” 字体需要添加引号，而Lobster则不需要。</p><h3 id="字体如何优雅降级"><a href="#字体如何优雅降级" class="headerlink" title="字体如何优雅降级"></a>字体如何优雅降级</h3><p>所有浏览器都有几种默认字体， 包括monospace、serif 和sans-serif。<br>在字体不可用的时候，你可以告诉浏览器通过“降级”去使用其他字体。<br>如果你想将一个元素的字体设置成 Helvetica，但当 Helvetica 不可用时，降级使用 sans-serif 字体，那么可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html">p &#123;  font-family: Helvetica, sans-serif;&#125;</code></pre><p>通用字体名不区分大小写。 同时，也不需要使用引号，因为它们是 CSS 中的关键字。</p><h2 id="调整图片的大小"><a href="#调整图片的大小" class="headerlink" title="调整图片的大小"></a>调整图片的大小</h2><p>CSS 的 width 属性可以控制元素的宽度。 和设置文本字号一样，我们会以 px（像素）为单位来设置图片的宽度。<br>例如，如果你想创建一个叫 larger-image 的 CSS class，来控制 HTML 元素的宽度为 500px，就可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.larger-image</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="元素添加边框"><a href="#元素添加边框" class="headerlink" title="元素添加边框"></a>元素添加边框</h2><h3 id="在元素周围添加边框"><a href="#在元素周围添加边框" class="headerlink" title="在元素周围添加边框"></a>在元素周围添加边框</h3><p>CSS 边框具有 style、color、width 属性。<br>假如我们要将一个 HTML 元素边框设置为 5px 的红色实线边框，我们可以这样做：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.thin-red-border</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">border-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="用border-radius添加圆角边框"><a href="#用border-radius添加圆角边框" class="headerlink" title="用border-radius添加圆角边框"></a>用border-radius添加圆角边框</h3><p>边框的四个角看起来很尖锐， 我们可以使用border-radius属性来让它变得圆润。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.thick-green-border</span> <span class="token punctuation">&#123;</span><span class="token property">border-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">border-width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="用border-radius制作圆形图片"><a href="#用border-radius制作圆形图片" class="headerlink" title="用border-radius制作圆形图片"></a>用border-radius制作圆形图片</h3><p>除像素外，你也可以使用百分比来指定border-radius的值。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.thick-green-border</span> <span class="token punctuation">&#123;</span><span class="token property">border-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token property">border-width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="给div元素添加背景色"><a href="#给div元素添加背景色" class="headerlink" title="给div元素添加背景色"></a>给div元素添加背景色</h2><p>background-color 属性可以设置元素的背景颜色。<br>如果想将一个元素的背景颜色改为 green，可以在style里面这样写：</p><pre class="language-none"><code class="language-none">.green-background &#123;  background-color: green;&#125;</code></pre><h2 id="元素的id"><a href="#元素的id" class="headerlink" title="元素的id"></a>元素的id</h2><p>除了 class 属性，每一个 HTML 元素都有一个 id 属性。<br>使用 id 有几个好处：你可以通过 id 选择器来改变单个元素的样式。在稍后的课程中，你还会了解到如何在 JavaScript 里面用它来选择和操作元素。<br>根据规范，id 属性应是唯一的。 尽管浏览器并非必须执行这条规范，但这是广泛认可的最佳实践。 因此，请不要给多个元素设置相同的 id。<br>设置 h2 元素的 id 为 cat-photo-app 的代码如下：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat-photo-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="使用id属性来设定元素的样式"><a href="#使用id属性来设定元素的样式" class="headerlink" title="使用id属性来设定元素的样式"></a>使用id属性来设定元素的样式</h2><p>通过id属性，你可以做一些很酷的事情。就像class一样，你可以使用CSS来设置他们的样式。<br>不过，id不可以重复，它只能作用于一个元素上。 如果一个元素同时应用了class和id，且两者设置的样式有冲突，会优先应用 id 中所设置的样式。<br>选择id为cat-photo-element的元素，并设置它的背景颜色为绿色。 可以在style标签里这样写：</p><pre class="language-none"><code class="language-none">#cat-photo-element &#123;  background-color: green;&#125;</code></pre><p>注意在 style 标签里，声明 class 的时候必须在名字前插入.符号。同样，在声明 id 的时候，也必须在名字前插入#符号。</p><h2 id="调整元素的内边距"><a href="#调整元素的内边距" class="headerlink" title="调整元素的内边距"></a>调整元素的内边距</h2><p>所有的 HTML 元素都是以矩形为基础。每个 HTML 元素所占有的矩形空间由这三个重要的属性来控制：内边距padding、外边距margin 、边框border。padding用来控制着元素内容与border之间的空隙大小。</p><h3 id="给元素的每一侧添加不同的内边距"><a href="#给元素的每一侧添加不同的内边距" class="headerlink" title="给元素的每一侧添加不同的内边距"></a>给元素的每一侧添加不同的内边距</h3><p>有时候，你会想给一个元素每个方向的 padding 都设置一个特定的值<br>CSS 允许你使用 padding-top、padding-right、padding-bottom、padding-left 属性来设置四个不同方向的 padding 值。</p><h3 id="使用顺时针标记指定元素的内边距"><a href="#使用顺时针标记指定元素的内边距" class="headerlink" title="使用顺时针标记指定元素的内边距"></a>使用顺时针标记指定元素的内边距</h3><p>如果不想每次都要分别声明 padding-top、padding-right、padding-bottom、padding-left 属性，可以把它们汇总在一行里面一并声明，像是这样：</p><pre class="language-none"><code class="language-none">padding: 10px 20px 10px 20px;</code></pre><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的内边距。</p><h2 id="调整元素的外边距"><a href="#调整元素的外边距" class="headerlink" title="调整元素的外边距"></a>调整元素的外边距</h2><p>外边距 margin 用来控制元素的边框与其他元素之间的 border 距离。</p><h3 id="给元素添加负外边距"><a href="#给元素添加负外边距" class="headerlink" title="给元素添加负外边距"></a>给元素添加负外边距</h3><p>元素的 margin（外边距） 用来控制元素 border（边框） 与其周围元素之间的距离大小。<br>如果你把元素的 margin 设置为负值，元素会变得占用更多空间。</p><h3 id="给元素的每一侧添加不同的外边距"><a href="#给元素的每一侧添加不同的外边距" class="headerlink" title="给元素的每一侧添加不同的外边距"></a>给元素的每一侧添加不同的外边距</h3><p>有时候，你会想给一个元素每个方向的 margin 都设置成一个特定的值。<br>CSS 允许你使用 margin-top、margin-right、margin-bottom、margin-left 属性来设置四个不同方向的 margin 值。</p><h3 id="使用顺时针标记指定元素的外边距"><a href="#使用顺时针标记指定元素的外边距" class="headerlink" title="使用顺时针标记指定元素的外边距"></a>使用顺时针标记指定元素的外边距</h3><p>同样，每个方向的外边距值可以在一行里面汇总声明，而无需分别通过 margin-top、margin-right、margin-bottom、margin-left 分别声明，比如：</p><pre class="language-none"><code class="language-none">margin: 10px 20px 10px 20px;</code></pre><p>这四个值按顺时针排序：上、右、下、左，并且设置的效果等同于分别声明每一个方向的外边距值。</p><h2 id="使用属性选择器来设置元素的样式"><a href="#使用属性选择器来设置元素的样式" class="headerlink" title="使用属性选择器来设置元素的样式"></a>使用属性选择器来设置元素的样式</h2><p>我们已经通过设置元素的 id 和 class 来显示想要的样式。 这就是 ID 选择器和 Class 选择器。 另外，也还有其他的 CSS 选择器可以让我们给特定的元素设置样式。<br>属性选择器使用特定的属性值来匹配和设置元素样式。 例如，下面的代码会改变所有 type 为 radio 的元素的外边距。</p><pre class="language-none"><code class="language-none">[type&#x3D;&#39;radio&#39;] &#123;  margin: 20px 0px 20px 0px;&#125;</code></pre><h2 id="理解绝对单位与相对单位"><a href="#理解绝对单位与相对单位" class="headerlink" title="理解绝对单位与相对单位"></a>理解绝对单位与相对单位</h2><p>设置元素的内边距和外边距的 px 值，即像素。 像素是一个长度单位，它告诉浏览器应该如何调整元素的大小和位置。 其实除了 px，CSS 也有其他单位供我们使用。<br>单位长度的类型可以分成 2 种：相对和绝对。 绝对单位与长度的物理单位相关。 例如，in 和 mm 分别代表着英寸和毫米。 绝对长度单位会接近屏幕上的实际测量值，不过不同屏幕的分辨率会存在差异，这就可能会造成误差。<br>相对单位长度，比如 em 和 rem，它们的实际值会依赖其他长度的值而决定。 比如 em 的大小基于元素字体的字体大小。 如果使用它来设置 font-size 值，它的值会跟随父元素的 font-size 值来改变。<br>Note: 有些单位长度选项是相对视窗大小来改变值的， 这种设定符合响应式网页设计的原则。</p><h2 id="给-HTML-的-body-元素添加样式"><a href="#给-HTML-的-body-元素添加样式" class="headerlink" title="给 HTML 的 body 元素添加样式"></a>给 HTML 的 body 元素添加样式</h2><p>每一个 HTML 页面都有一个 body 元素。<br>我们可以通过设置 background-color 的属性值为 黑色，来证明 body 元素的存在。<br>请将以下代码添加到 style 标签里面：</p><pre class="language-none"><code class="language-none">body &#123;  background-color: black;&#125;</code></pre><h2 id="从-body-元素继承样式"><a href="#从-body-元素继承样式" class="headerlink" title="从 body 元素继承样式"></a>从 body 元素继承样式</h2><p>我们已经证明每一个 HTML 页面都含有 body 元素，我们也可以在 body 元素上使用 CSS 样式。<br>设置 body 元素样式的方法跟设置其他 HTML 元素样式的方式一样，并且其他元素也会继承 body 中所设置的样式。</p><h2 id="样式中的优先级"><a href="#样式中的优先级" class="headerlink" title="样式中的优先级"></a>样式中的优先级</h2><p>有时候，HTML 元素的样式会跟其他样式发生冲突。就像 h1 元素不能同时设置绿色和粉色两种颜色。</p><ol><li>Class 选择器的优先级高于继承样式</li><li>ID 选择器优先级高于 Class 选择器</li><li>内联样式的优先级高于 ID 选择器</li><li>Important 的优先级最高,例如<code>color: red !important;</code><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="使用十六进制编码获得指定颜色"><a href="#使用十六进制编码获得指定颜色" class="headerlink" title="使用十六进制编码获得指定颜色"></a>使用十六进制编码获得指定颜色</h3>你知道在 CSS 里面还有其他方式来代表颜色吗？ 其中一个方法叫十六进制编码，简称 hex。<br>日常生活中，我们使用的计数方法一般是 decimals，或十进制，即使用数字 0 到 9 来表示。 而 Hexadecimals（或 hex）基于 16 位数字， 它包括 16 种不同字符。 像十进制一样，0-9 的符号代表 0 到 9 的值。 然后，A、B、C、D、E、F 代表 10 至 15 的值。 总的来说，0 到 F 在十六进制里代表数字，总共有 16 个值。 你可以在此处找到更多关于十六进制信息。<br>在 CSS 里面，我们可以使用 6 个十六进制的数字来代表颜色，每两个数字控制一种颜色，分别是红（R）、绿（G）、蓝（B）。 例如，#000000 代表黑色，同时也是最小的值。 你可以在此处找到更多关于 RGB 颜色系统的信息。<pre class="language-none"><code class="language-none">body &#123;  color: #000000;&#125;</code></pre><h3 id="使用十六进制编码混合颜色"><a href="#使用十六进制编码混合颜色" class="headerlink" title="使用十六进制编码混合颜色"></a>使用十六进制编码混合颜色</h3>十六进制编码使用 6 个十六进制字符来表示颜色，两个字符为一组，分别代表红（R）、绿（G）、蓝（B）。<br>通过三原色（红、绿、蓝），我们可以创建 1600 万种不同颜色。<br>例如，橘色是纯红色混合一些绿色而成，其中没有蓝色。 在十六进制编码里面，它可以写成 #FFA500。<br>0 是十六进制里面最小的数字，表示没有颜色。<br>F 是十六进制里面最大的数字，有最高的亮度。<h3 id="使用缩写的十六进制编码"><a href="#使用缩写的十六进制编码" class="headerlink" title="使用缩写的十六进制编码"></a>使用缩写的十六进制编码</h3>许多人对超过 1600 万种颜色感到不知所措， 并且很难记住十六进制编码。 幸运的是，你可以使用缩写形式。<br>例如，红色的 #FF0000 十六进制编码可以缩写成 #F00。 在这种缩写形式里，三个数字分别代表着红（R）、绿（G）、蓝（B）三原色。<br>这样，颜色的数量减少到了大约 4000 种。 且在浏览器里 #FF0000 和 #F00 是完全相同的颜色。<h3 id="使用-RGB-值为元素上色"><a href="#使用-RGB-值为元素上色" class="headerlink" title="使用 RGB 值为元素上色"></a>使用 RGB 值为元素上色</h3>RGB 值是在 CSS 中表示颜色的另一种方法。<br>黑色的 RGB 值：<code>rgb(0, 0, 0)</code><br>白色的 RGB 值：<code>rgb(255, 255, 255)</code><br>RGB 值与我们之前学到的十六进制编码不同。RGB 值不需要用到 6 位十六进制数字，而只需要指定每种颜色的亮度大小，数值范围从 0 到 255。<br>如果我们稍微计算一下，就不难发现这两种表示方式本质上是等价的。在十六进制编码中，我们用两个十六进制数表示一个颜色；这样，每种颜色都有 16 * 16（即 256）种可能。 所以，RGB 从零开始计算，与十六进制代码的值的数量完全相同。<br>下面是通过使用 RGB 值设置背景颜色为橘色的例子：body。<pre class="language-none"><code class="language-none">body &#123;  background-color: rgb(255, 165, 0);&#125;</code></pre><h3 id="使用-RGB-混合颜色"><a href="#使用-RGB-混合颜色" class="headerlink" title="使用 RGB 混合颜色"></a>使用 RGB 混合颜色</h3>就像使用十六进制编码一样，你可以通过不同值的组合，来混合得到不同的 RGB 颜色。例如:<table><thead><tr><th align="center">颜色</th><th align="center">RGB</th></tr></thead><tbody><tr><td align="center">蓝色</td><td align="center">rgb(0, 0, 255)</td></tr><tr><td align="center">红色</td><td align="center">rgb(255, 0, 0)</td></tr><tr><td align="center">淡紫色</td><td align="center">rgb(218, 112, 214)</td></tr><tr><td align="center">赭黄色</td><td align="center">rgb(160, 82, 45)</td></tr></tbody></table><h2 id="CSS变量"><a href="#CSS变量" class="headerlink" title="CSS变量"></a>CSS变量</h2><h3 id="创建一个自定义的-CSS-变量"><a href="#创建一个自定义的-CSS-变量" class="headerlink" title="创建一个自定义的 CSS 变量"></a>创建一个自定义的 CSS 变量</h3>为创建一个 CSS 变量，你只需要在变量名前添加两个连字符号，并为其赋值即可，例子如下：<pre class="language-none"><code class="language-none">--penguin-skin: gray;</code></pre>这样就会创建一个 –penguin-skin 变量，它的值为 gray。 现在你可以在你的 CSS 中的其他地方使用这个变量来改变其他属性的值为灰色。<h3 id="使用一个自定义的-CSS-变量"><a href="#使用一个自定义的-CSS-变量" class="headerlink" title="使用一个自定义的 CSS 变量"></a>使用一个自定义的 CSS 变量</h3>创建变量后，CSS 属性可以通过调用变量名来使用它对应的值。<pre class="language-none"><code class="language-none">background: var(--penguin-skin);</code></pre>因为引用了 –penguin-skin 变量的值，使用了这个样式的元素背景颜色会是灰色。 请注意，除非变量名称完全匹配，否则将不会应用样式。<h3 id="给-CSS-变量设置备用值"><a href="#给-CSS-变量设置备用值" class="headerlink" title="给 CSS 变量设置备用值"></a>给 CSS 变量设置备用值</h3>使用变量来作为 CSS 属性值的时候，可以设置一个备用值来防止由于某些原因导致变量不生效的情况。<br>注意： 备用值不是用于增强浏览器的兼容性，它也不适用于 IE 浏览器。 相反，它是用来让浏览器在找不到你的变量时可以显示一种颜色。<br>下面是操作方式：<pre class="language-none"><code class="language-none">background: var(--penguin-skin, black);</code></pre>如果你的变量没有设置，这将会把背景设置为 black。 提示：这对调试代码也会很有帮助。<h3 id="继承-CSS-变量"><a href="#继承-CSS-变量" class="headerlink" title="继承 CSS 变量"></a>继承 CSS 变量</h3>当创建一个变量时，变量会在创建变量的选择器里可用。 同时，在这个选择器的后代选择器里也是可用的。 这是因为 CSS 变量是可继承的，和普通的属性一样。<br>CSS 变量经常会定义在 :root 元素内，这样就可被所有选择器继承。<br>:root 是一个伪类选择器，它是一个能够匹配文档根元素的选择器，通常指的是 html 元素。 我们在 :root 里创建变量在全局都可用，即在任何选择器里都生效。<h3 id="更改特定区域的变量"><a href="#更改特定区域的变量" class="headerlink" title="更改特定区域的变量"></a>更改特定区域的变量</h3>当你在 :root 里创建变量时，这些变量的作用域是整个页面。<br>然后，你可以通过在一个特定的选择器中再次设置这些变量来重写这些变量。<h3 id="使用媒体查询更改变量"><a href="#使用媒体查询更改变量" class="headerlink" title="使用媒体查询更改变量"></a>使用媒体查询更改变量</h3>CSS 变量可以简化媒体查询的定义方式。<br>例如，当屏幕小于或大于媒体查询所设置的值，只要我们更新变量的值，那么使用了此变量的元素样式就都会更改。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>    <span class="token property">--penguin-size</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>    <span class="token property">--penguin-belly</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>    <span class="token property">--penguin-beak</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/* 只修改这一行下面的代码 */</span>      <span class="token property">--penguin-size</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">--penguin-skin</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>      <span class="token comment">/* 只修改这一行上面的代码 */</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="通过浏览器降级提高兼容性"><a href="#通过浏览器降级提高兼容性" class="headerlink" title="通过浏览器降级提高兼容性"></a>通过浏览器降级提高兼容性</h2>使用 CSS 时可能会遇到浏览器兼容性问题。 提供浏览器降级方案来避免潜在的问题会显得很重要。<br>当浏览器解析页面的 CSS 时，会自动忽视不能识别或者不支持的属性。 举个例子，如果使用 CSS 变量来指定站点的背景色，IE 浏览器由于不支持 CSS 变量而会忽略背景色。 此时，浏览器会尝试使用其它值。 但如果没有找到其它值，则会使用默认值，也就是没有背景色。<br>这意味着如果想提供浏览器降级方案，在声明之前提供另一个更宽泛的值即可。 这样老旧的浏览器会降级使用这个方案，新的浏览器会在后面的声明里覆盖降级方案。<br>我们使用了 CSS 变量来定义 .red-box 的背景色。 现在，我们通过在现有的声明之前添加另一个 background 声明，并将它的值设置为 red，来提升浏览器的兼容性。<pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">:root</span> <span class="token punctuation">&#123;</span>    <span class="token property">--red-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.red-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--red-color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式网页设计-基础HTML和HTML5</title>
      <link href="/2022/04/01/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80HTML%E5%92%8CHTML5/"/>
      <url>/2022/04/01/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1-%E5%9F%BA%E7%A1%80HTML%E5%92%8CHTML5/</url>
      
        <content type="html"><![CDATA[<p>HTML 是一种标记语言，使用特殊的语法或标记来向浏览器描述网页的结构。HTML 元素由开始和结束标签构成，标签之间是文本内容。 不同的标签可以让文本内容以标题、段落、列表等形式展现。</p><span id="more"></span><p>大部分 HTML 元素都有一个开始标签和一个结束标签。<br>开始标签像这样：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></code></pre><p>结束标签像这样：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><p>开始标签和结束标签的唯一区别就是结束标签多了一个斜杠。</p><h2 id="标题标签-h1-h6"><a href="#标题标签-h1-h6" class="headerlink" title="标题标签: h1~h6"></a>标题标签: h1~h6</h2><p>这些元素用来告诉浏览器网站的结构是什么样子。 h1 元素通常被用作主标题，h2 元素通常被用作副标题， 还有 h3、h4、h5、h6 元素，它们分别用作不同级别的标题。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span></code></pre><h2 id="段落标签-p"><a href="#段落标签-p" class="headerlink" title="段落标签: p"></a>段落标签: p</h2><p>p 元素是网站上段落文本的首选元素。 p 是“paragraph（段落）”的缩写。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签:"></a>注释标签:</h2><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--注释文本--></span></code></pre><h2 id="图片标签-img"><a href="#图片标签-img" class="headerlink" title="图片标签: img"></a>图片标签: img</h2><p>你可以使用 img 元素来为你的网站添加图片，其中 src 属性指向图片的地址。<br>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecatphotoapp.com/your-image.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>注意：img 元素是没有结束标签的。所有的 img 元素 必须 有 alt 属性。 alt 的属性值有两个作用，第一个作用是让屏幕阅读器可以知晓图片的内容，这会对网页的可访问性有很大提升；另一个作用是当图片无法加载时，页面需要显示的替代文本。</p><blockquote><p>注意： 如果图片是纯装饰性的，把 alt 的属性值设置为空是最佳实践。理想情况下，alt 属性不应该包含特殊字符，除非有特殊需要。</p></blockquote><h2 id="超链接标签-a"><a href="#超链接标签-a" class="headerlink" title="超链接标签: a"></a>超链接标签: a</h2><h3 id="网页间的跳转"><a href="#网页间的跳转" class="headerlink" title="网页间的跳转"></a>网页间的跳转</h3><p>你可以用 a（Anchor，简写为 a）来实现网页间的跳转。</p><p>a 需要一个 href 属性指向跳转的目的地。 同时，它还应有内容。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this links to freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>浏览器将显示文本 this links to freecodecamp.org，这是一个可点击的链接。 你可以通过这个链接访问 <a href="https://www.freecodecamp.org./">https://www.freecodecamp.org。</a></p><h3 id="网页内部的跳转"><a href="#网页内部的跳转" class="headerlink" title="网页内部的跳转"></a>网页内部的跳转</h3><p>a（anchor）元素也可以用于创建内部链接，跳转到网页内的各个不同部分。<br>要创建内部链接，你需要将链接的 href 属性值设置为一个哈希符号 # 加上你想内部链接到的元素的 id，通常是在网页下方的元素。 然后你需要将相同的 id 属性添加到你链接到的元素中。 id 是描述网页元素的一个属性，它的值在整个页面中唯一。<br>例如当用户点击了 Contacts 链接，页面就会跳转到网页的 Contacts 区域。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#contacts-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>contacts-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Contacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span></code></pre><p>当用户点击 Contacts 链接时，他们将被带到带有 Contacts 标题元素的网页部分。</p><h3 id="将a标签嵌套在段落中"><a href="#将a标签嵌套在段落中" class="headerlink" title="将a标签嵌套在段落中"></a>将a标签嵌套在段落中</h3><p>你可以在其他文本元素内嵌套链接。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  Here's a <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> link to www.freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> for you to follow.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>让我们来拆解一下这个例子。 通常，文本是被包裹在 p 元素内：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> Here's a ... for you to follow. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>接下来是锚点元素 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>（它需要结束标签 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>）：```html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>target 是锚点元素的一个属性，它用来指定链接的打开方式。 属性值 _blank 表示链接会在新标签页打开。 href 是锚点元素的另一个属性，它用来指定链接的 URL：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.freecodecamp.org<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>a 元素内的文本 link to <a href="http://www.freecodecamp.org/">www.freecodecamp.org</a> 叫作锚文本，会显示为一个可以点击的链接：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> ... <span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>link to freecodecamp.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>此示例的最终输出结果是这样：<br>Here’s a link to <a href="http://www.freecodecamp.org/">www.freecodecamp.org</a> for you to follow.</p><h3 id="链接占位符"><a href="#链接占位符" class="headerlink" title="链接占位符#"></a>链接占位符#</h3><p>有时你想为网站添加一个 a 元素，但还不确定要将它链接到哪里。 可以将 href 属性的值替换为#，以此来创建链接占位符。例如: </p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h3 id="给图片添加链接"><a href="#给图片添加链接" class="headerlink" title="给图片添加链接"></a>给图片添加链接</h3><p>你可以通过把元素嵌套进 a 里使其变成一个链接。如果我们要把图片嵌套进 a 元素， 可以这样写：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.freecodecamp.org/curriculum/cat-photo-app/relaxing-cat.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Three kittens running towards the camera.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>如果把 a 的 href 属性值设置为 #，创建的是一个死链接（不跳转到其他画面）。</p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>HTML 有一个特定的元素用于创建无序列表。<br>无序列表以ul开始，中间包含一个或多个li元素， 最后以&#x2F;ul结束。<br>例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>cheese<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>会创建一个要点列表，包括 milk 和 cheese。</p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>HTML 中有用于创建有序列表的特定元素。<br>有序列表以ol开始，中间包含一个或多个li元素。 最后以&#x2F;ol结束。<br>例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Garfield<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>Sylvester<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>将创建一个包含 Garfield 和 Sylvester 的编号列表。</p><h2 id="输入框标签"><a href="#输入框标签" class="headerlink" title="输入框标签"></a>输入框标签</h2><p>input 输入框可以让你轻松获得用户的输入。你可以像这样创建一个文本输入框：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意 input 输入框是没有结束标签的。</p></blockquote><h2 id="给输入框添加占位符文本"><a href="#给输入框添加占位符文本" class="headerlink" title="给输入框添加占位符文本"></a>给输入框添加占位符文本</h2><p>占位符文本是用户在 input 输入框中输入任何东西前的预定义文本。你可以像这样创建一个占位符：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>this is placeholder text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： 别忘了 input 元素是 “自闭和标签”，即不需要结束标签。</p></blockquote><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="创建表单"><a href="#创建表单" class="headerlink" title="创建表单"></a>创建表单</h3><p>我们可以只通过 HTML 来实现发送数据给服务器的表单， 只需要给 form 元素添加 action 属性即可。例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url-where-you-want-to-submit-form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="给表单添加提交按钮"><a href="#给表单添加提交按钮" class="headerlink" title="给表单添加提交按钮"></a>给表单添加提交按钮</h3><p>给表单添加一个 submit（提交）按钮。 点击提交按钮时，表单中的数据将会被发送到 action 属性指定的 URL 上。例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>this button submits the form<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h3 id="给表单添加一个必填字段"><a href="#给表单添加一个必填字段" class="headerlink" title="给表单添加一个必填字段"></a>给表单添加一个必填字段</h3><p>当你设计表单时，你可以指定某些字段为必填项（required），只有当用户填写了该字段后，才可以提交表单。<br>如果你想把文本输入框设置为必填项，在 input 元素中加上 required 属性就可以了，例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">></span></span></code></pre><h2 id="单选框和复选框"><a href="#单选框和复选框" class="headerlink" title="单选框和复选框"></a>单选框和复选框</h2><h3 id="创建一组单选按钮"><a href="#创建一组单选按钮" class="headerlink" title="创建一组单选按钮"></a>创建一组单选按钮</h3><p>单选按钮是 input 选择框的一种类型。<br>每一个单选按钮都应该嵌套在它自己的 label（标签）元素中。 这样，我们相当于给 input 元素和包裹它的 label 元素建立起了对应关系。<br>所有关联的单选按钮应该拥有相同的 name 属性。 创建一组单选按钮，选中其中一个按钮，其他按钮即显示为未选中，以确保用户只提供一个答案。<br>下面是一个单选按钮的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>最佳实践是在 label 元素上设置 for 属性，让其值与相关联的 input 单选按钮的 id 属性值相同。 这使得辅助技术能够在标签和相关的 input 元素之间建立关联关系。 例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>我们也可以在 label 标签中嵌入 input 元素：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><h3 id="创建一组复选框"><a href="#创建一组复选框" class="headerlink" title="创建一组复选框"></a>创建一组复选框</h3><p>复选框是 input 选择框的一种类型。<br>每一个复选框都应该嵌套在它自己的 label（标签）元素中。这样我们相当于给 input 元素和包裹它的 label 元素建立起了对应关系。所有关联的复选框应该拥有相同的 name 属性。<br>使得 input 与 label 关联的最佳实践是在 label 元素上设置 for 属性，让其值与相关联的 input 复选框的 id 属性值相同。<br>下面是一个复选框的例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loving<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loving<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>personality<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Loving<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><h3 id="使用单选框和复选框的value属性"><a href="#使用单选框和复选框的value属性" class="headerlink" title="使用单选框和复选框的value属性"></a>使用单选框和复选框的value属性</h3><p>提交表单时，所选项的值会发送给服务端。 radio 和 checkbox 的 value 属性值决定了发送到服务端的实际内容。<br>例如：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Indoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>outdoor<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indoor-outdoor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Outdoor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span></code></pre><p>这里有两个 radio 单选框。 当用户提交表单时，如果 indoor 选项被选中，表单数据会包含：indoor-outdoor&#x3D;indoor。 也就是所选项的 name 和 value 属性值。<br>如果没有指明 value 属性值，则会使用默认值做为表单数据提交，也就是 on。 在这种情况下，如果用户选中 “indoor” 选项然后提交表单，表单数据则会包含 indoor-outdoor&#x3D;on。 这样的表单数据看起来不够直观，因此最好将 value 属性值设置为一些有意义的内容。</p><h3 id="给单选按钮和复选框添加默认选中项"><a href="#给单选按钮和复选框添加默认选中项" class="headerlink" title="给单选按钮和复选框添加默认选中项"></a>给单选按钮和复选框添加默认选中项</h3><p>用 checked 属性把第一个复选框和单选按钮都设置为默认选中。<br>为此，只需将单词 checked 添加到 input 元素的内部。 例如:</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test-name<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span></code></pre><h2 id="元素嵌套"><a href="#元素嵌套" class="headerlink" title="元素嵌套"></a>元素嵌套</h2><p>div 元素也叫内容划分元素，是一个包裹其他元素的通用容器。<br>它也是 HTML 中出现频率最高的元素。<br>和其他普通元素一样，你可以用<div>来标记一个 div 元素的开始，用 </div> 来标记一个 div 元素的结束。</p><h2 id="声明HTML的文档类型"><a href="#声明HTML的文档类型" class="headerlink" title="声明HTML的文档类型"></a>声明HTML的文档类型</h2><p>在文档的顶部，我们需要告诉浏览器网页所使用的 HTML 的版本。 HTML 是一个在不停发展的语言，大部分浏览器都支持 HTML 的最新标准，也就是 HTML5。 大部分主流浏览器都支持最新的 HTML5 规范。 但是一些陈旧的网页可能使用的是老版本的 HTML。<br>你可以通过 <!DOCTYPE ...> 来告诉浏览器页面上使用的 HTML 版本，”…” 部分就是版本号。 <!DOCTYPE html> 对应的就是 HTML5。<br>! 和大写的 DOCTYPE 是很重要的，尤其是对那些老的浏览器。 但 html 无论大写小写都可以。<br>所有的 HTML 代码都必须位于 html 标签中。 其中 <html> 位于 <!DOCTYPE html> 之后，</html> 位于网页的结尾。<br>这是一个网页结构的列子。 你的 HTML 代码会在两个 html 标签之间。</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="定义HTML文档的head和body"><a href="#定义HTML文档的head和body" class="headerlink" title="定义HTML文档的head和body"></a>定义HTML文档的head和body</h2><p>html 的结构主要分为两大部分：head 和 body。 网页的描述应放入 head 标签， 网页的内容（向用户展示的）则应放入 body 标签。<br>比如 link、meta、title 和 style 都应放入 head 标签。<br>这是网页布局的一个例子：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 响应式网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中部署django</title>
      <link href="/2022/03/18/%E5%9C%A8Ubuntu%E4%B8%AD%E9%83%A8%E7%BD%B2django/"/>
      <url>/2022/03/18/%E5%9C%A8Ubuntu%E4%B8%AD%E9%83%A8%E7%BD%B2django/</url>
      
        <content type="html"><![CDATA[<p>这是作者本人在Ubuntu中部署django中遇到的一些问题</p><span id="more"></span><p><strong>在Ubuntu中部署django本人是参考的django中文网的</strong><br><a href="https://www.django.cn/article/show-22.html">Ubuntu部署Django项目方法详解</a></p><p>在部署过程中本人遇到了以下问题,特此记录一下:</p><h2 id="Ubuntu中安装nginx报错"><a href="#Ubuntu中安装nginx报错" class="headerlink" title="Ubuntu中安装nginx报错"></a>Ubuntu中安装nginx报错</h2><h3 id="‘struct-crypt-data’-has-no-member-named-‘current-salt’"><a href="#‘struct-crypt-data’-has-no-member-named-‘current-salt’" class="headerlink" title="‘struct crypt_data’ has no member named ‘current_salt’"></a>‘struct crypt_data’ has no member named ‘current_salt’</h3><p>本人在按照上面的部署教程部署到第八步安装nginx并配置中的sudo make报错</p><p><img src="https://img-blog.csdnimg.cn/2020071712094293.png" loading="lazy"></p><p>问题原因: nginx的版本高或者服务器版本高的问题</p><p>解决方法: 在nginx安装目录下找到src&#x2F;os&#x2F;unix&#x2F;ngx_user.c文件,使用vim打开,将cd.current_salt[0] &#x3D; ~salt[0]:这行注释就行了</p><p><img src="https://img-blog.csdnimg.cn/20200717121206221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1bWFueXI=,size_16,color_FFFFFF,t_70" loading="lazy"></p><p>在执行完上面的操作后,又出现了新的报错</p><h3 id="make-1-objs-x2F-src-x2F-core-x2F-ngx-murmurhash-o-Error-1"><a href="#make-1-objs-x2F-src-x2F-core-x2F-ngx-murmurhash-o-Error-1" class="headerlink" title="make[1]: *** [objs&#x2F;src&#x2F;core&#x2F;ngx_murmurhash.o] Error 1"></a>make[1]: *** [objs&#x2F;src&#x2F;core&#x2F;ngx_murmurhash.o] Error 1</h3><p>问题原因: Werror它要求GCC将所有的警告当成错误进行处理 所有导致错误输出 并不能进行下一步</p><p>解决方法: 使用vim打开&#x2F;nginx-1.10.3&#x2F;objs&#x2F;Makefile找到 -Werror并去掉在重新make即可</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
